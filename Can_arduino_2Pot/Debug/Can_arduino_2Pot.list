
Can_arduino_2Pot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007010  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08007354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  24000010  08007364  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001e0  08007364  000201e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011bc6  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ea1  00000000  00000000  00031c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee8  00000000  00000000  00033ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b5b  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003382a  00000000  00000000  0003552b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010711  00000000  00000000  00068d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157d4b  00000000  00000000  00079466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000040a4  00000000  00000000  001d11b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  001d5258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080072c8 	.word	0x080072c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	080072c8 	.word	0x080072c8

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fd59 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f8e5 	bl	80004e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800031e:	f000 f953 	bl	80005c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 fae3 	bl	80008ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000326:	f000 f97f 	bl	8000628 <MX_ADC1_Init>
  MX_ADC2_Init();
 800032a:	f000 f9f7 	bl	800071c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800032e:	f000 fa5b 	bl	80007e8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t valorPotLin;
  uint8_t valorPotLog;
  uint8_t dif;

        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8000332:	4867      	ldr	r0, [pc, #412]	; (80004d0 <main+0x1c0>)
 8000334:	f002 ff58 	bl	80031e8 <HAL_FDCAN_Start>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <main+0x32>

      	  Error_Handler();
 800033e:	f000 fb4d 	bl	80009dc <Error_Handler>
        }

        if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK){
 8000342:	2200      	movs	r2, #0
 8000344:	2101      	movs	r1, #1
 8000346:	4862      	ldr	r0, [pc, #392]	; (80004d0 <main+0x1c0>)
 8000348:	f002 ffd4 	bl	80032f4 <HAL_FDCAN_ActivateNotification>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <main+0x46>
      	  Error_Handler();
 8000352:	f000 fb43 	bl	80009dc <Error_Handler>

        }

        // Configurando os parâmetros da mensagem
          TxHeader.Identifier = 0x07; // Identificador da mensagem
 8000356:	4b5f      	ldr	r3, [pc, #380]	; (80004d4 <main+0x1c4>)
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
          TxHeader.IdType = FDCAN_STANDARD_ID; // Tipo de identificador: Padrão
 800035c:	4b5d      	ldr	r3, [pc, #372]	; (80004d4 <main+0x1c4>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
          TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Tipo de quadro: Quadro de dados
 8000362:	4b5c      	ldr	r3, [pc, #368]	; (80004d4 <main+0x1c4>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
          TxHeader.DataLength = FDCAN_DLC_BYTES_8; // Comprimento dos dados: 8 bytes
 8000368:	4b5a      	ldr	r3, [pc, #360]	; (80004d4 <main+0x1c4>)
 800036a:	2208      	movs	r2, #8
 800036c:	60da      	str	r2, [r3, #12]
          TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Indicador de estado de erro ativo
 800036e:	4b59      	ldr	r3, [pc, #356]	; (80004d4 <main+0x1c4>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
          TxHeader.BitRateSwitch = FDCAN_BRS_OFF; // Troca de taxa de bits desativada
 8000374:	4b57      	ldr	r3, [pc, #348]	; (80004d4 <main+0x1c4>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
          TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Formato CAN clasica
 800037a:	4b56      	ldr	r3, [pc, #344]	; (80004d4 <main+0x1c4>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
          TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; // Sem controle de FIFO de evento de transmissão
 8000380:	4b54      	ldr	r3, [pc, #336]	; (80004d4 <main+0x1c4>)
 8000382:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000386:	61da      	str	r2, [r3, #28]
          TxHeader.MessageMarker = 0; // Marcador de mensagem
 8000388:	4b52      	ldr	r3, [pc, #328]	; (80004d4 <main+0x1c4>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800038e:	4852      	ldr	r0, [pc, #328]	; (80004d8 <main+0x1c8>)
 8000390:	f001 fa76 	bl	8001880 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8000394:	4851      	ldr	r0, [pc, #324]	; (80004dc <main+0x1cc>)
 8000396:	f001 fa73 	bl	8001880 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800039a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800039e:	484e      	ldr	r0, [pc, #312]	; (80004d8 <main+0x1c8>)
 80003a0:	f001 fb38 	bl	8001a14 <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, 1000);
 80003a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003a8:	484c      	ldr	r0, [pc, #304]	; (80004dc <main+0x1cc>)
 80003aa:	f001 fb33 	bl	8001a14 <HAL_ADC_PollForConversion>
	  valorPotLog = HAL_ADC_GetValue(&hadc2);
 80003ae:	484b      	ldr	r0, [pc, #300]	; (80004dc <main+0x1cc>)
 80003b0:	f001 fc24 	bl	8001bfc <HAL_ADC_GetValue>
 80003b4:	4603      	mov	r3, r0
 80003b6:	71bb      	strb	r3, [r7, #6]
	  valorPotLin = HAL_ADC_GetValue(&hadc1);
 80003b8:	4847      	ldr	r0, [pc, #284]	; (80004d8 <main+0x1c8>)
 80003ba:	f001 fc1f 	bl	8001bfc <HAL_ADC_GetValue>
 80003be:	4603      	mov	r3, r0
 80003c0:	717b      	strb	r3, [r7, #5]
	  if(valorPotLin > valorPotLog){
 80003c2:	797a      	ldrb	r2, [r7, #5]
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d904      	bls.n	80003d4 <main+0xc4>
		  dif = valorPotLin - valorPotLog;
 80003ca:	797a      	ldrb	r2, [r7, #5]
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	71fb      	strb	r3, [r7, #7]
 80003d2:	e003      	b.n	80003dc <main+0xcc>
	  }else{
		  dif = valorPotLog - valorPotLin;
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	71fb      	strb	r3, [r7, #7]
	  }
	  TxData[0] = valorPotLog;
 80003dc:	4a40      	ldr	r2, [pc, #256]	; (80004e0 <main+0x1d0>)
 80003de:	79bb      	ldrb	r3, [r7, #6]
 80003e0:	7013      	strb	r3, [r2, #0]
	  TxData[1] = valorPotLin;
 80003e2:	4a3f      	ldr	r2, [pc, #252]	; (80004e0 <main+0x1d0>)
 80003e4:	797b      	ldrb	r3, [r7, #5]
 80003e6:	7053      	strb	r3, [r2, #1]
	  TxData[2] = dif;
 80003e8:	4a3d      	ldr	r2, [pc, #244]	; (80004e0 <main+0x1d0>)
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	7093      	strb	r3, [r2, #2]
	  if(valorPotLin > 1.1 *(valorPotLog) || valorPotLin < (0.9 * valorPotLog)){
 80003ee:	797b      	ldrb	r3, [r7, #5]
 80003f0:	ee07 3a90 	vmov	s15, r3
 80003f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	ee07 3a90 	vmov	s15, r3
 80003fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000402:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80004c0 <main+0x1b0>
 8000406:	ee27 7b05 	vmul.f64	d7, d7, d5
 800040a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	dc12      	bgt.n	800043a <main+0x12a>
 8000414:	797b      	ldrb	r3, [r7, #5]
 8000416:	ee07 3a90 	vmov	s15, r3
 800041a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800041e:	79bb      	ldrb	r3, [r7, #6]
 8000420:	ee07 3a90 	vmov	s15, r3
 8000424:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000428:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80004c8 <main+0x1b8>
 800042c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000430:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	d506      	bpl.n	8000448 <main+0x138>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000440:	4828      	ldr	r0, [pc, #160]	; (80004e4 <main+0x1d4>)
 8000442:	f003 fb7d 	bl	8003b40 <HAL_GPIO_WritePin>
 8000446:	e032      	b.n	80004ae <main+0x19e>
	  }else if(valorPotLog > 1.1 *(valorPotLin) || valorPotLog < (0.9 * valorPotLin)){
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	ee07 3a90 	vmov	s15, r3
 800044e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000452:	797b      	ldrb	r3, [r7, #5]
 8000454:	ee07 3a90 	vmov	s15, r3
 8000458:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800045c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80004c0 <main+0x1b0>
 8000460:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046c:	dc12      	bgt.n	8000494 <main+0x184>
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	ee07 3a90 	vmov	s15, r3
 8000474:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000478:	797b      	ldrb	r3, [r7, #5]
 800047a:	ee07 3a90 	vmov	s15, r3
 800047e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000482:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80004c8 <main+0x1b8>
 8000486:	ee27 7b05 	vmul.f64	d7, d7, d5
 800048a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	d506      	bpl.n	80004a2 <main+0x192>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <main+0x1d4>)
 800049c:	f003 fb50 	bl	8003b40 <HAL_GPIO_WritePin>
 80004a0:	e005      	b.n	80004ae <main+0x19e>
	  }else{
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	480e      	ldr	r0, [pc, #56]	; (80004e4 <main+0x1d4>)
 80004aa:	f003 fb49 	bl	8003b40 <HAL_GPIO_WritePin>
	  }
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <main+0x1d0>)
 80004b0:	4908      	ldr	r1, [pc, #32]	; (80004d4 <main+0x1c4>)
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <main+0x1c0>)
 80004b4:	f002 fec3 	bl	800323e <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_ADC_Start(&hadc1);
 80004b8:	e769      	b.n	800038e <main+0x7e>
 80004ba:	bf00      	nop
 80004bc:	f3af 8000 	nop.w
 80004c0:	9999999a 	.word	0x9999999a
 80004c4:	3ff19999 	.word	0x3ff19999
 80004c8:	cccccccd 	.word	0xcccccccd
 80004cc:	3feccccc 	.word	0x3feccccc
 80004d0:	2400010c 	.word	0x2400010c
 80004d4:	240001ac 	.word	0x240001ac
 80004d8:	2400002c 	.word	0x2400002c
 80004dc:	2400009c 	.word	0x2400009c
 80004e0:	240001d0 	.word	0x240001d0
 80004e4:	58021800 	.word	0x58021800

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	224c      	movs	r2, #76	; 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 feac 	bl	8007254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f006 fea6 	bl	8007254 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000508:	2002      	movs	r0, #2
 800050a:	f003 fb33 	bl	8003b74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <SystemClock_Config+0xdc>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800051a:	4a2a      	ldr	r2, [pc, #168]	; (80005c4 <SystemClock_Config+0xdc>)
 800051c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xdc>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800052e:	bf00      	nop
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <SystemClock_Config+0xdc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053c:	d1f8      	bne.n	8000530 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000542:	2301      	movs	r3, #1
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000546:	2340      	movs	r3, #64	; 0x40
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000552:	2304      	movs	r3, #4
 8000554:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000556:	230c      	movs	r3, #12
 8000558:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055a:	2302      	movs	r3, #2
 800055c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 800055e:	2318      	movs	r3, #24
 8000560:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000566:	230c      	movs	r3, #12
 8000568:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056a:	2300      	movs	r3, #0
 800056c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fb36 	bl	8003be8 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000582:	f000 fa2b 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	233f      	movs	r3, #63	; 0x3f
 8000588:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fef6 	bl	800439c <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005b6:	f000 fa11 	bl	80009dc <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3770      	adds	r7, #112	; 0x70
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	58024800 	.word	0x58024800

080005c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0ae      	sub	sp, #184	; 0xb8
 80005cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	22b8      	movs	r2, #184	; 0xb8
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 fe3d 	bl	8007254 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005de:	f04f 0300 	mov.w	r3, #0
 80005e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80005ea:	230c      	movs	r3, #12
 80005ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80005ee:	2305      	movs	r3, #5
 80005f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80005fa:	23c0      	movs	r3, #192	; 0xc0
 80005fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fa3a 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800061a:	f000 f9df 	bl	80009dc <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	37b8      	adds	r7, #184	; 0xb8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2224      	movs	r2, #36	; 0x24
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f006 fe07 	bl	8007254 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000646:	4b32      	ldr	r3, [pc, #200]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000648:	4a32      	ldr	r2, [pc, #200]	; (8000714 <MX_ADC1_Init+0xec>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800064c:	4b30      	ldr	r3, [pc, #192]	; (8000710 <MX_ADC1_Init+0xe8>)
 800064e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000654:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000656:	221c      	movs	r2, #28
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065a:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000662:	2204      	movs	r2, #4
 8000664:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_ADC1_Init+0xe8>)
 800066e:	2201      	movs	r2, #1
 8000670:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000674:	2201      	movs	r2, #1
 8000676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_ADC1_Init+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ADC1_Init+0xe8>)
 8000694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000698:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a8:	4819      	ldr	r0, [pc, #100]	; (8000710 <MX_ADC1_Init+0xe8>)
 80006aa:	f000 fee1 	bl	8001470 <HAL_ADC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b4:	f000 f992 	bl	80009dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_ADC1_Init+0xe8>)
 80006c4:	f002 f976 	bl	80029b4 <HAL_ADCEx_MultiModeConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006ce:	f000 f985 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_ADC1_Init+0xf0>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d6:	2306      	movs	r3, #6
 80006d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e4:	2304      	movs	r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0xe8>)
 80006f8:	f001 fa8e 	bl	8001c18 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000702:	f000 f96b 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3730      	adds	r7, #48	; 0x30
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2400002c 	.word	0x2400002c
 8000714:	40022000 	.word	0x40022000
 8000718:	19200040 	.word	0x19200040

0800071c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2224      	movs	r2, #36	; 0x24
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f006 fd93 	bl	8007254 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <MX_ADC2_Init+0xc4>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000736:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800073a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_ADC2_Init+0xc0>)
 800073e:	221c      	movs	r2, #28
 8000740:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_ADC2_Init+0xc0>)
 800074a:	2204      	movs	r2, #4
 800074c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000756:	2201      	movs	r2, #1
 8000758:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ADC2_Init+0xc0>)
 800075c:	2201      	movs	r2, #1
 800075e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000776:	2200      	movs	r2, #0
 8000778:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_ADC2_Init+0xc0>)
 800077c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000780:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC2_Init+0xc0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000792:	f000 fe6d 	bl	8001470 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800079c:	f000 f91e 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_ADC2_Init+0xc8>)
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a4:	2306      	movs	r3, #6
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b2:	2304      	movs	r3, #4
 80007b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_ADC2_Init+0xc0>)
 80007c6:	f001 fa27 	bl	8001c18 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80007d0:	f000 f904 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2400009c 	.word	0x2400009c
 80007e0:	40022100 	.word	0x40022100
 80007e4:	1d500080 	.word	0x1d500080

080007e8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007ee:	4b3d      	ldr	r3, [pc, #244]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 80007f0:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <MX_FDCAN1_Init+0x100>)
 80007f2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007f4:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007fa:	4b3a      	ldr	r3, [pc, #232]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000800:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000802:	2201      	movs	r2, #1
 8000804:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000808:	2200      	movs	r2, #0
 800080a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800080e:	2200      	movs	r2, #0
 8000810:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000814:	2201      	movs	r2, #1
 8000816:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 5;
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800081a:	2205      	movs	r2, #5
 800081c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 26;
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000820:	221a      	movs	r2, #26
 8000822:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000826:	2205      	movs	r2, #5
 8000828:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800082c:	2201      	movs	r2, #1
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000832:	2207      	movs	r2, #7
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000838:	2208      	movs	r2, #8
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800083e:	2207      	movs	r2, #7
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800084a:	2200      	movs	r2, #0
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000850:	2200      	movs	r2, #0
 8000852:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000856:	2201      	movs	r2, #1
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800085c:	2204      	movs	r2, #4
 800085e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000862:	2200      	movs	r2, #0
 8000864:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000868:	2204      	movs	r2, #4
 800086a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800086e:	2200      	movs	r2, #0
 8000870:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000874:	2204      	movs	r2, #4
 8000876:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800087a:	2200      	movs	r2, #0
 800087c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 1;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000880:	2201      	movs	r2, #1
 8000882:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000886:	2201      	movs	r2, #1
 8000888:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800088c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000890:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 8000894:	2204      	movs	r2, #4
 8000896:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 800089a:	f002 fa51 	bl	8002d40 <HAL_FDCAN_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80008a4:	f000 f89a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

      sFilterConfig.IdType = FDCAN_STANDARD_ID; //Dados são tipos Standard
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
      sFilterConfig .FilterIndex = 0;    // �?ndice do filtro (0 a 127 para IdType padrão)
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterType = FDCAN_FILTER_MASK;   // Tipo de filtro: Máscara
 80008b0:	2302      	movs	r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;  // Configuração do filtro para receber mensagens no FIFO0
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterID1 = 0x14;  // Identificador 1 do filtro (0 a 0x7FF para IdType padrão)
 80008b8:	2314      	movs	r3, #20
 80008ba:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterID2 = 0x14; // Identificador 2 do filtro (Ignorado para mensagens padrão)
 80008bc:	2314      	movs	r3, #20
 80008be:	617b      	str	r3, [r7, #20]
      sFilterConfig.RxBufferIndex = 0;  // �?ndice do buffer de recepção (0 a 63)
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
      sFilterConfig.IsCalibrationMsg = 0;// Não é uma mensagem de calibração se for 1 é uma msg de calibração
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]

      if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_FDCAN1_Init+0xfc>)
 80008ce:	f002 fc15 	bl	80030fc <HAL_FDCAN_ConfigFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_FDCAN1_Init+0xf4>
    	  Error_Handler();
 80008d8:	f000 f880 	bl	80009dc <Error_Handler>
      }
  /* USER CODE END FDCAN1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2400010c 	.word	0x2400010c
 80008e8:	4000a000 	.word	0x4000a000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a32      	ldr	r2, [pc, #200]	; (80009d4 <MX_GPIO_Init+0xe8>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	4a2b      	ldr	r2, [pc, #172]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xe8>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_GPIO_Init+0xe8>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0320 	and.w	r3, r3, #32
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_GPIO_Init+0xe8>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <MX_GPIO_Init+0xe8>)
 8000982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_GPIO_Init+0xe8>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_GPIO_Init+0xec>)
 80009a0:	f003 f8ce 	bl	8003b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xec>)
 80009aa:	f003 f8c9 	bl	8003b40 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xec>)
 80009c8:	f002 ff12 	bl	80037f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	58024400 	.word	0x58024400
 80009d8:	58021800 	.word	0x58021800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <Error_Handler+0x30>)
 80009ea:	f003 f8a9 	bl	8003b40 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f2:	f000 fa7d 	bl	8000ef0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <Error_Handler+0x30>)
 80009fc:	f003 f8a0 	bl	8003b40 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a04:	f000 fa74 	bl	8000ef0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a08:	e7ec      	b.n	80009e4 <Error_Handler+0x8>
 8000a0a:	bf00      	nop
 8000a0c:	58021800 	.word	0x58021800

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_MspInit+0x30>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x30>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x30>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	58024400 	.word	0x58024400

08000a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <HAL_ADC_MspInit+0x104>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d134      	bne.n	8000ad0 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <HAL_ADC_MspInit+0x108>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <HAL_ADC_MspInit+0x108>)
 8000a6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <HAL_ADC_MspInit+0x108>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10e      	bne.n	8000a96 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000a7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7e:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000a80:	f043 0320 	orr.w	r3, r3, #32
 8000a84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000a8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8e:	f003 0320 	and.w	r3, r3, #32
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a2c      	ldr	r2, [pc, #176]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000a9e:	f043 0320 	orr.w	r3, r3, #32
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4822      	ldr	r0, [pc, #136]	; (8000b54 <HAL_ADC_MspInit+0x110>)
 8000aca:	f002 fe91 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ace:	e037      	b.n	8000b40 <HAL_ADC_MspInit+0xfc>
  else if(hadc->Instance==ADC2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <HAL_ADC_MspInit+0x114>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d132      	bne.n	8000b40 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_ADC_MspInit+0x108>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_ADC_MspInit+0x108>)
 8000ae2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_ADC_MspInit+0x108>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d10e      	bne.n	8000b0a <HAL_ADC_MspInit+0xc6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_ADC_MspInit+0x10c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <HAL_ADC_MspInit+0x118>)
 8000b3c:	f002 fe58 	bl	80037f0 <HAL_GPIO_Init>
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	240001d8 	.word	0x240001d8
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58021400 	.word	0x58021400
 8000b58:	40022100 	.word	0x40022100
 8000b5c:	58020000 	.word	0x58020000

08000b60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0b8      	sub	sp, #224	; 0xe0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	22b8      	movs	r2, #184	; 0xb8
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f006 fb67 	bl	8007254 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <HAL_FDCAN_MspInit+0xc8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d146      	bne.n	8000c1e <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 ff6e 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000bb2:	f7ff ff13 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_FDCAN_MspInit+0xcc>)
 8000bb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <HAL_FDCAN_MspInit+0xcc>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_FDCAN_MspInit+0xcc>)
 8000bc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_FDCAN_MspInit+0xcc>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <HAL_FDCAN_MspInit+0xcc>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_FDCAN_MspInit+0xcc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bf2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c0c:	2309      	movs	r3, #9
 8000c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_FDCAN_MspInit+0xd0>)
 8000c1a:	f002 fde9 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	37e0      	adds	r7, #224	; 0xe0
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	4000a000 	.word	0x4000a000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020000 	.word	0x58020000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f916 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <SystemInit+0xd0>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <SystemInit+0xd0>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <SystemInit+0xd4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	d807      	bhi.n	8000cb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <SystemInit+0xd4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f023 030f 	bic.w	r3, r3, #15
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <SystemInit+0xd4>)
 8000cb2:	f043 0307 	orr.w	r3, r3, #7
 8000cb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <SystemInit+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <SystemInit+0xd8>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cc4:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <SystemInit+0xd8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <SystemInit+0xd8>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4924      	ldr	r1, [pc, #144]	; (8000d60 <SystemInit+0xd8>)
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <SystemInit+0xdc>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <SystemInit+0xd4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d007      	beq.n	8000cf2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <SystemInit+0xd4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 030f 	bic.w	r3, r3, #15
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <SystemInit+0xd4>)
 8000cec:	f043 0307 	orr.w	r3, r3, #7
 8000cf0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <SystemInit+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <SystemInit+0xd8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <SystemInit+0xd8>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <SystemInit+0xe0>)
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <SystemInit+0xd8>)
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <SystemInit+0xe4>)
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <SystemInit+0xd8>)
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <SystemInit+0xe8>)
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <SystemInit+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <SystemInit+0xd8>)
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <SystemInit+0xe8>)
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <SystemInit+0xd8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <SystemInit+0xd8>)
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <SystemInit+0xe8>)
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SystemInit+0xd8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <SystemInit+0xd8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <SystemInit+0xd8>)
 8000d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <SystemInit+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <SystemInit+0xec>)
 8000d48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	52002000 	.word	0x52002000
 8000d60:	58024400 	.word	0x58024400
 8000d64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d68:	02020200 	.word	0x02020200
 8000d6c:	01ff0000 	.word	0x01ff0000
 8000d70:	01010280 	.word	0x01010280
 8000d74:	52004000 	.word	0x52004000

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d7c:	f7ff ff84 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f006 fa5d 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fab1 	bl	8000310 <main>
  bx  lr
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000db4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dbc:	08007354 	.word	0x08007354
  ldr r2, =_sbss
 8000dc0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dc4:	240001e0 	.word	0x240001e0

08000dc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC3_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f001 ff82 	bl	8002cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dd8:	f003 fc96 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_Init+0x68>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	4913      	ldr	r1, [pc, #76]	; (8000e38 <HAL_Init+0x6c>)
 8000dea:	5ccb      	ldrb	r3, [r1, r3]
 8000dec:	f003 031f 	and.w	r3, r3, #31
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_Init+0x68>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_Init+0x6c>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x70>)
 8000e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_Init+0x74>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f814 	bl	8000e44 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e002      	b.n	8000e2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fdf3 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400
 8000e38:	0800732c 	.word	0x0800732c
 8000e3c:	24000004 	.word	0x24000004
 8000e40:	24000000 	.word	0x24000000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_InitTick+0x60>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e021      	b.n	8000e9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_InitTick+0x64>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_InitTick+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 ff59 	bl	8002d26 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f001 ff31 	bl	8002cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x68>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2400000c 	.word	0x2400000c
 8000ea8:	24000000 	.word	0x24000000
 8000eac:	24000008 	.word	0x24000008

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2400000c 	.word	0x2400000c
 8000ed4:	240001dc 	.word	0x240001dc

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	240001dc 	.word	0x240001dc

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2400000c 	.word	0x2400000c

08000f38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3360      	adds	r3, #96	; 0x60
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <LL_ADC_SetOffset+0x60>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d10b      	bne.n	8000fdc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000fda:	e00b      	b.n	8000ff4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58026000 	.word	0x58026000

08001004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	431a      	orrs	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	611a      	str	r2, [r3, #16]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00e      	beq.n	8001096 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3360      	adds	r3, #96	; 0x60
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
  }
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	58026000 	.word	0x58026000

080010a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <LL_ADC_SetOffsetSaturation+0x40>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d10e      	bne.n	80010da <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3360      	adds	r3, #96	; 0x60
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	58026000 	.word	0x58026000

080010ec <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <LL_ADC_SetOffsetSign+0x40>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d10e      	bne.n	800111e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3360      	adds	r3, #96	; 0x60
 8001104:	461a      	mov	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	58026000 	.word	0x58026000

08001130 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3360      	adds	r3, #96	; 0x60
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <LL_ADC_SetOffsetState+0x50>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d108      	bne.n	8001164 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001162:	e007      	b.n	8001174 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	431a      	orrs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	58026000 	.word	0x58026000

08001184 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b087      	sub	sp, #28
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3330      	adds	r3, #48	; 0x30
 80011ba:	461a      	mov	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	4413      	add	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	211f      	movs	r1, #31
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	401a      	ands	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0e9b      	lsrs	r3, r3, #26
 80011e2:	f003 011f 	and.w	r1, r3, #31
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f003 031f 	and.w	r3, r3, #31
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	431a      	orrs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001202:	b480      	push	{r7}
 8001204:	b087      	sub	sp, #28
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3314      	adds	r3, #20
 8001212:	461a      	mov	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	0e5b      	lsrs	r3, r3, #25
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	0d1b      	lsrs	r3, r3, #20
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	2107      	movs	r1, #7
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	0d1b      	lsrs	r3, r3, #20
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	431a      	orrs	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800124c:	bf00      	nop
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d115      	bne.n	8001298 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0318 	and.w	r3, r3, #24
 8001282:	4914      	ldr	r1, [pc, #80]	; (80012d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001284:	40d9      	lsrs	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	400b      	ands	r3, r1
 800128a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001296:	e014      	b.n	80012c2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012a4:	43db      	mvns	r3, r3
 80012a6:	401a      	ands	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0318 	and.w	r3, r3, #24
 80012ae:	4909      	ldr	r1, [pc, #36]	; (80012d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80012b0:	40d9      	lsrs	r1, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	400b      	ands	r3, r1
 80012b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012ba:	431a      	orrs	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	58026000 	.word	0x58026000
 80012d4:	000fffff 	.word	0x000fffff

080012d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <LL_ADC_DisableDeepPowerDown+0x20>)
 800131e:	4013      	ands	r3, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6093      	str	r3, [r2, #8]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	5fffffc0 	.word	0x5fffffc0

08001334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001348:	d101      	bne.n	800134e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <LL_ADC_EnableInternalRegulator+0x24>)
 800136a:	4013      	ands	r3, r2
 800136c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	6fffffc0 	.word	0x6fffffc0

08001384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001398:	d101      	bne.n	800139e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_ADC_Enable+0x24>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	7fffffc0 	.word	0x7fffffc0

080013d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <LL_ADC_IsEnabled+0x18>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <LL_ADC_IsEnabled+0x1a>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <LL_ADC_REG_StartConversion+0x24>)
 800140a:	4013      	ands	r3, r2
 800140c:	f043 0204 	orr.w	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	7fffffc0 	.word	0x7fffffc0

08001424 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b04      	cmp	r3, #4
 8001436:	d101      	bne.n	800143c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b08      	cmp	r3, #8
 800145c:	d101      	bne.n	8001462 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1ee      	b.n	8001868 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fad3 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff3f 	bl	8001334 <LL_ADC_IsDeepPowerDownEnabled>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff25 	bl	8001310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff5a 	bl	8001384 <LL_ADC_IsInternalRegulatorEnabled>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d114      	bne.n	8001500 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff3e 	bl	800135c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014e0:	4b8e      	ldr	r3, [pc, #568]	; (800171c <HAL_ADC_Init+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	4a8e      	ldr	r2, [pc, #568]	; (8001720 <HAL_ADC_Init+0x2b0>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	3301      	adds	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014f2:	e002      	b.n	80014fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f9      	bne.n	80014f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff3d 	bl	8001384 <LL_ADC_IsInternalRegulatorEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10d      	bne.n	800152c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	f043 0210 	orr.w	r2, r3, #16
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff77 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001536:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 8188 	bne.w	8001856 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 8184 	bne.w	8001856 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001556:	f043 0202 	orr.w	r2, r3, #2
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff36 	bl	80013d4 <LL_ADC_IsEnabled>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d136      	bne.n	80015dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6c      	ldr	r2, [pc, #432]	; (8001724 <HAL_ADC_Init+0x2b4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d004      	beq.n	8001582 <HAL_ADC_Init+0x112>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_ADC_Init+0x2b8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10e      	bne.n	80015a0 <HAL_ADC_Init+0x130>
 8001582:	4868      	ldr	r0, [pc, #416]	; (8001724 <HAL_ADC_Init+0x2b4>)
 8001584:	f7ff ff26 	bl	80013d4 <LL_ADC_IsEnabled>
 8001588:	4604      	mov	r4, r0
 800158a:	4867      	ldr	r0, [pc, #412]	; (8001728 <HAL_ADC_Init+0x2b8>)
 800158c:	f7ff ff22 	bl	80013d4 <LL_ADC_IsEnabled>
 8001590:	4603      	mov	r3, r0
 8001592:	4323      	orrs	r3, r4
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e008      	b.n	80015b2 <HAL_ADC_Init+0x142>
 80015a0:	4862      	ldr	r0, [pc, #392]	; (800172c <HAL_ADC_Init+0x2bc>)
 80015a2:	f7ff ff17 	bl	80013d4 <LL_ADC_IsEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_ADC_Init+0x2b4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d004      	beq.n	80015ca <HAL_ADC_Init+0x15a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_ADC_Init+0x2b8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x15e>
 80015ca:	4a59      	ldr	r2, [pc, #356]	; (8001730 <HAL_ADC_Init+0x2c0>)
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_Init+0x160>
 80015ce:	4a59      	ldr	r2, [pc, #356]	; (8001734 <HAL_ADC_Init+0x2c4>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fcae 	bl	8000f38 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_ADC_Init+0x2bc>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d129      	bne.n	800163a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7e5b      	ldrb	r3, [r3, #25]
 80015ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80015f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80015f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d013      	beq.n	8001628 <HAL_ADC_Init+0x1b8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d00d      	beq.n	8001624 <HAL_ADC_Init+0x1b4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b1c      	cmp	r3, #28
 800160e:	d007      	beq.n	8001620 <HAL_ADC_Init+0x1b0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b18      	cmp	r3, #24
 8001616:	d101      	bne.n	800161c <HAL_ADC_Init+0x1ac>
 8001618:	2318      	movs	r3, #24
 800161a:	e006      	b.n	800162a <HAL_ADC_Init+0x1ba>
 800161c:	2300      	movs	r3, #0
 800161e:	e004      	b.n	800162a <HAL_ADC_Init+0x1ba>
 8001620:	2310      	movs	r3, #16
 8001622:	e002      	b.n	800162a <HAL_ADC_Init+0x1ba>
 8001624:	2308      	movs	r3, #8
 8001626:	e000      	b.n	800162a <HAL_ADC_Init+0x1ba>
 8001628:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800162a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001632:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	e00e      	b.n	8001658 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e5b      	ldrb	r3, [r3, #25]
 800163e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001644:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800164a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	045b      	lsls	r3, r3, #17
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_ADC_Init+0x2bc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d115      	bne.n	80016c2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_ADC_Init+0x2c8>)
 800169e:	4013      	ands	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	69b9      	ldr	r1, [r7, #24]
 80016a6:	430b      	orrs	r3, r1
 80016a8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	e009      	b.n	80016d6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_ADC_Init+0x2cc>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	430b      	orrs	r3, r1
 80016d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fea2 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 80016e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff feaf 	bl	800144a <LL_ADC_INJ_IsConversionOngoing>
 80016ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 808e 	bne.w	8001812 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 808a 	bne.w	8001812 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_ADC_Init+0x2bc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d11b      	bne.n	8001740 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001714:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	e018      	b.n	800174e <HAL_ADC_Init+0x2de>
 800171c:	24000000 	.word	0x24000000
 8001720:	053e2d63 	.word	0x053e2d63
 8001724:	40022000 	.word	0x40022000
 8001728:	40022100 	.word	0x40022100
 800172c:	58026000 	.word	0x58026000
 8001730:	40022300 	.word	0x40022300
 8001734:	58026300 	.word	0x58026300
 8001738:	fff04007 	.word	0xfff04007
 800173c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_ADC_Init+0x400>)
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	69b9      	ldr	r1, [r7, #24]
 800175e:	430b      	orrs	r3, r1
 8001760:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001768:	2b01      	cmp	r3, #1
 800176a:	d137      	bne.n	80017dc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <HAL_ADC_Init+0x404>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d116      	bne.n	80017aa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_ADC_Init+0x408>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001794:	4311      	orrs	r1, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800179a:	430a      	orrs	r2, r1
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	e020      	b.n	80017ec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_ADC_Init+0x40c>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017b8:	3a01      	subs	r2, #1
 80017ba:	0411      	lsls	r1, r2, #16
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80017cc:	430a      	orrs	r2, r1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	e007      	b.n	80017ec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <HAL_ADC_Init+0x404>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d002      	beq.n	8001812 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 ffbd 	bl	800278c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10c      	bne.n	8001834 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f023 010f 	bic.w	r1, r3, #15
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
 8001832:	e007      	b.n	8001844 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020f 	bic.w	r2, r2, #15
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001848:	f023 0303 	bic.w	r3, r3, #3
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	661a      	str	r2, [r3, #96]	; 0x60
 8001854:	e007      	b.n	8001866 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001866:	7ffb      	ldrb	r3, [r7, #31]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3724      	adds	r7, #36	; 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	ffffbffc 	.word	0xffffbffc
 8001874:	58026000 	.word	0x58026000
 8001878:	fc00f81f 	.word	0xfc00f81f
 800187c:	fc00f81e 	.word	0xfc00f81e

08001880 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_ADC_Start+0x180>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_ADC_Start+0x1c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a5b      	ldr	r2, [pc, #364]	; (8001a04 <HAL_ADC_Start+0x184>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_Start+0x20>
 800189c:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_ADC_Start+0x188>)
 800189e:	e000      	b.n	80018a2 <HAL_ADC_Start+0x22>
 80018a0:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <HAL_ADC_Start+0x18c>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fd18 	bl	80012d8 <LL_ADC_GetMultimode>
 80018a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fdb8 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 809a 	bne.w	80019f0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Start+0x4a>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e095      	b.n	80019f6 <HAL_ADC_Start+0x176>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fed0 	bl	8002678 <ADC_Enable>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 8081 	bne.w	80019e6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_ADC_Start+0x190>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a42      	ldr	r2, [pc, #264]	; (8001a04 <HAL_ADC_Start+0x184>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d002      	beq.n	8001904 <HAL_ADC_Start+0x84>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e000      	b.n	8001906 <HAL_ADC_Start+0x86>
 8001904:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_ADC_Start+0x180>)
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	4293      	cmp	r3, r2
 800190c:	d002      	beq.n	8001914 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001918:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192c:	d106      	bne.n	800193c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001932:	f023 0206 	bic.w	r2, r3, #6
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	665a      	str	r2, [r3, #100]	; 0x64
 800193a:	e002      	b.n	8001942 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	221c      	movs	r2, #28
 8001948:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HAL_ADC_Start+0x184>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d002      	beq.n	8001962 <HAL_ADC_Start+0xe2>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	e000      	b.n	8001964 <HAL_ADC_Start+0xe4>
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_ADC_Start+0x180>)
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	4293      	cmp	r3, r2
 800196a:	d008      	beq.n	800197e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d002      	beq.n	800197e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b09      	cmp	r3, #9
 800197c:	d114      	bne.n	80019a8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001994:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fd2b 	bl	80013fc <LL_ADC_REG_StartConversion>
 80019a6:	e025      	b.n	80019f4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_ADC_Start+0x184>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d002      	beq.n	80019c4 <HAL_ADC_Start+0x144>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e000      	b.n	80019c6 <HAL_ADC_Start+0x146>
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_ADC_Start+0x180>)
 80019c6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00f      	beq.n	80019f4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	661a      	str	r2, [r3, #96]	; 0x60
 80019e4:	e006      	b.n	80019f4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80019ee:	e001      	b.n	80019f4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
 80019f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40022100 	.word	0x40022100
 8001a08:	40022300 	.word	0x40022300
 8001a0c:	58026300 	.word	0x58026300
 8001a10:	fffff0fe 	.word	0xfffff0fe

08001a14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a72      	ldr	r2, [pc, #456]	; (8001bec <HAL_ADC_PollForConversion+0x1d8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x1e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a70      	ldr	r2, [pc, #448]	; (8001bf0 <HAL_ADC_PollForConversion+0x1dc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x22>
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_ADC_PollForConversion+0x1e0>)
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_PollForConversion+0x24>
 8001a36:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_ADC_PollForConversion+0x1e4>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fc4d 	bl	80012d8 <LL_ADC_GetMultimode>
 8001a3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d102      	bne.n	8001a4e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e037      	b.n	8001abe <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d002      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	d111      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0b1      	b.n	8001be2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a7e:	2304      	movs	r3, #4
 8001a80:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001a82:	e01c      	b.n	8001abe <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_ADC_PollForConversion+0x1d8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_PollForConversion+0x84>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_ADC_PollForConversion+0x1dc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x88>
 8001a98:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_ADC_PollForConversion+0x1e0>)
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_PollForConversion+0x8a>
 8001a9c:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <HAL_ADC_PollForConversion+0x1e4>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fc28 	bl	80012f4 <LL_ADC_GetMultiDMATransfer>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e093      	b.n	8001be2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001aba:	2304      	movs	r3, #4
 8001abc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001abe:	f7ff fa0b 	bl	8000ed8 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ac4:	e021      	b.n	8001b0a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d01d      	beq.n	8001b0a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ace:	f7ff fa03 	bl	8000ed8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d302      	bcc.n	8001ae4 <HAL_ADC_PollForConversion+0xd0>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d112      	bne.n	8001b0a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10b      	bne.n	8001b0a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e06b      	b.n	8001be2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0d6      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb2b 	bl	8001184 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01c      	beq.n	8001b6e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e5b      	ldrb	r3, [r3, #25]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d118      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d111      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_ADC_PollForConversion+0x1dc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d002      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x16a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_PollForConversion+0x16c>
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_ADC_PollForConversion+0x1d8>)
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d008      	beq.n	8001b9a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d002      	beq.n	8001b9a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b09      	cmp	r3, #9
 8001b98:	d104      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e00c      	b.n	8001bbe <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_PollForConversion+0x1dc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d002      	beq.n	8001bb4 <HAL_ADC_PollForConversion+0x1a0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x1a2>
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_ADC_PollForConversion+0x1d8>)
 8001bb6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d104      	bne.n	8001bce <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e008      	b.n	8001be0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	220c      	movs	r2, #12
 8001bde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40022100 	.word	0x40022100
 8001bf4:	40022300 	.word	0x40022300
 8001bf8:	58026300 	.word	0x58026300

08001bfc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b0b9      	sub	sp, #228	; 0xe4
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c32:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4aab      	ldr	r2, [pc, #684]	; (8001ee8 <HAL_ADC_ConfigChannel+0x2d0>)
 8001c3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x34>
 8001c46:	2302      	movs	r3, #2
 8001c48:	f000 bcfe 	b.w	8002648 <HAL_ADC_ConfigChannel+0xa30>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fbe3 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 84e2 	bne.w	800262a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db38      	blt.n	8001ce0 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a9e      	ldr	r2, [pc, #632]	; (8001eec <HAL_ADC_ConfigChannel+0x2d4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d033      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x7e>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e9b      	lsrs	r3, r3, #26
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2201      	movs	r2, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	e01d      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0xba>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e004      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2201      	movs	r2, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	69d1      	ldr	r1, [r2, #28]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	f7ff fa5c 	bl	80011aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fb94 	bl	8001424 <LL_ADC_REG_IsConversionOngoing>
 8001cfc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fba0 	bl	800144a <LL_ADC_INJ_IsConversionOngoing>
 8001d0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 8270 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 826b 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f7ff fa67 	bl	8001202 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a6c      	ldr	r2, [pc, #432]	; (8001eec <HAL_ADC_ConfigChannel+0x2d4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d10d      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d58:	e032      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d5a:	4b65      	ldr	r3, [pc, #404]	; (8001ef0 <HAL_ADC_ConfigChannel+0x2d8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d66:	d10b      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x168>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	e01d      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1a4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10b      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x18e>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	e00a      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1a4>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d048      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dd8:	f7ff f8e2 	bl	8000fa0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a42      	ldr	r2, [pc, #264]	; (8001eec <HAL_ADC_ConfigChannel+0x2d4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d119      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f7ff f97a 	bl	80010ec <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6919      	ldr	r1, [r3, #16]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1f8>
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0e:	e000      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x1fa>
 8001e10:	2300      	movs	r3, #0
 8001e12:	461a      	mov	r2, r3
 8001e14:	f7ff f948 	bl	80010a8 <LL_ADC_SetOffsetSaturation>
 8001e18:	e1ee      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x21a>
 8001e2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e30:	e000      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x21c>
 8001e32:	2300      	movs	r3, #0
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff f915 	bl	8001064 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7e1b      	ldrb	r3, [r3, #24]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x238>
 8001e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e4e:	e000      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
 8001e50:	2300      	movs	r3, #0
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7ff f8ec 	bl	8001030 <LL_ADC_SetDataRightShift>
 8001e58:	e1ce      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_ADC_ConfigChannel+0x2d4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	f040 8181 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f8c9 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x27a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f8be 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	e01e      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2b8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f8b3 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8001eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8001eb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8001ec4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2dc>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x30e>
 8001ee8:	47ff0000 	.word	0x47ff0000
 8001eec:	58026000 	.word	0x58026000
 8001ef0:	5c001000 	.word	0x5c001000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	e004      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d106      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f8fc 	bl	8001130 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f860 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10a      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x34c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f855 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 021f 	and.w	r2, r3, #31
 8001f62:	e01e      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x38a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f84a 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e004      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8001f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x3a2>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0e9b      	lsrs	r3, r3, #26
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	e018      	b.n	8001fec <HAL_ADC_ConfigChannel+0x3d4>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e004      	b.n	8001fec <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8001fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f899 	bl	8001130 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fffd 	bl	8001004 <LL_ADC_GetOffsetChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <HAL_ADC_ConfigChannel+0x412>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2102      	movs	r1, #2
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fff2 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	e01e      	b.n	8002068 <HAL_ADC_ConfigChannel+0x450>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2102      	movs	r1, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ffe7 	bl	8001004 <LL_ADC_GetOffsetChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800204c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e004      	b.n	8002066 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800205c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x468>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	e014      	b.n	80020aa <HAL_ADC_ConfigChannel+0x492>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800208e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e004      	b.n	80020aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80020a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	2102      	movs	r1, #2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f83a 	bl	8001130 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2103      	movs	r1, #3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe ff9e 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x4d0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2103      	movs	r1, #3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe ff93 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	f003 021f 	and.w	r2, r3, #31
 80020e6:	e017      	b.n	8002118 <HAL_ADC_ConfigChannel+0x500>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2103      	movs	r1, #3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff88 	bl	8001004 <LL_ADC_GetOffsetChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e003      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800210e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x518>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	e011      	b.n	8002154 <HAL_ADC_ConfigChannel+0x53c>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800213e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002140:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002148:	2320      	movs	r3, #32
 800214a:	e003      	b.n	8002154 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800214c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	429a      	cmp	r2, r3
 8002156:	d14f      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	2103      	movs	r1, #3
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe ffe5 	bl	8001130 <LL_ADC_SetOffsetState>
 8002166:	e047      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	069b      	lsls	r3, r3, #26
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800218a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	069b      	lsls	r3, r3, #26
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f8e9 	bl	80013d4 <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 8219 	bne.w	800263c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff f81e 	bl	8001258 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4aa1      	ldr	r2, [pc, #644]	; (80024a8 <HAL_ADC_ConfigChannel+0x890>)
 8002222:	4293      	cmp	r3, r2
 8002224:	f040 812e 	bne.w	8002484 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x638>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2b09      	cmp	r3, #9
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e019      	b.n	8002284 <HAL_ADC_ConfigChannel+0x66c>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e003      	b.n	8002274 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800226c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b09      	cmp	r3, #9
 800227c:	bf94      	ite	ls
 800227e:	2301      	movls	r3, #1
 8002280:	2300      	movhi	r3, #0
 8002282:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002284:	2b00      	cmp	r3, #0
 8002286:	d079      	beq.n	800237c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x68c>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	069b      	lsls	r3, r3, #26
 800229e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a2:	e015      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x6b8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80022c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x6d8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	e017      	b.n	8002320 <HAL_ADC_ConfigChannel+0x708>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	ea42 0103 	orr.w	r1, r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x72e>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	051b      	lsls	r3, r3, #20
 8002344:	e018      	b.n	8002378 <HAL_ADC_ConfigChannel+0x760>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e003      	b.n	800236a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002378:	430b      	orrs	r3, r1
 800237a:	e07e      	b.n	800247a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x780>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	3301      	adds	r3, #1
 8002390:	069b      	lsls	r3, r3, #26
 8002392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002396:	e015      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x7ac>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7cc>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	e017      	b.n	8002414 <HAL_ADC_ConfigChannel+0x7fc>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	61bb      	str	r3, [r7, #24]
  return result;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e003      	b.n	8002408 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	ea42 0103 	orr.w	r1, r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x828>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	3b1e      	subs	r3, #30
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243e:	e01b      	b.n	8002478 <HAL_ADC_ConfigChannel+0x860>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	60fb      	str	r3, [r7, #12]
  return result;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f003 021f 	and.w	r2, r3, #31
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	3b1e      	subs	r3, #30
 8002472:	051b      	lsls	r3, r3, #20
 8002474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002478:	430b      	orrs	r3, r1
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe febf 	bl	8001202 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f280 80d7 	bge.w	800263c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_ADC_ConfigChannel+0x894>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x88a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_ADC_ConfigChannel+0x898>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x8a0>
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_ADC_ConfigChannel+0x89c>)
 80024a4:	e009      	b.n	80024ba <HAL_ADC_ConfigChannel+0x8a2>
 80024a6:	bf00      	nop
 80024a8:	47ff0000 	.word	0x47ff0000
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40022100 	.word	0x40022100
 80024b4:	40022300 	.word	0x40022300
 80024b8:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_ADC_ConfigChannel+0xa38>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fd62 	bl	8000f84 <LL_ADC_GetCommonPathInternalCh>
 80024c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a62      	ldr	r2, [pc, #392]	; (8002654 <HAL_ADC_ConfigChannel+0xa3c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x8c0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a61      	ldr	r2, [pc, #388]	; (8002658 <HAL_ADC_ConfigChannel+0xa40>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d10e      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x8de>
 80024d8:	485e      	ldr	r0, [pc, #376]	; (8002654 <HAL_ADC_ConfigChannel+0xa3c>)
 80024da:	f7fe ff7b 	bl	80013d4 <LL_ADC_IsEnabled>
 80024de:	4604      	mov	r4, r0
 80024e0:	485d      	ldr	r0, [pc, #372]	; (8002658 <HAL_ADC_ConfigChannel+0xa40>)
 80024e2:	f7fe ff77 	bl	80013d4 <LL_ADC_IsEnabled>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4323      	orrs	r3, r4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e008      	b.n	8002508 <HAL_ADC_ConfigChannel+0x8f0>
 80024f6:	4859      	ldr	r0, [pc, #356]	; (800265c <HAL_ADC_ConfigChannel+0xa44>)
 80024f8:	f7fe ff6c 	bl	80013d4 <LL_ADC_IsEnabled>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8084 	beq.w	8002616 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a53      	ldr	r2, [pc, #332]	; (8002660 <HAL_ADC_ConfigChannel+0xa48>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d132      	bne.n	800257e <HAL_ADC_ConfigChannel+0x966>
 8002518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800251c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d12c      	bne.n	800257e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_ADC_ConfigChannel+0xa44>)
 800252a:	4293      	cmp	r3, r2
 800252c:	f040 8086 	bne.w	800263c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_ADC_ConfigChannel+0xa3c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_ADC_ConfigChannel+0x92c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a46      	ldr	r2, [pc, #280]	; (8002658 <HAL_ADC_ConfigChannel+0xa40>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x930>
 8002544:	4a47      	ldr	r2, [pc, #284]	; (8002664 <HAL_ADC_ConfigChannel+0xa4c>)
 8002546:	e000      	b.n	800254a <HAL_ADC_ConfigChannel+0x932>
 8002548:	4a41      	ldr	r2, [pc, #260]	; (8002650 <HAL_ADC_ConfigChannel+0xa38>)
 800254a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800254e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7fe fd02 	bl	8000f5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_ADC_ConfigChannel+0xa50>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	4a42      	ldr	r2, [pc, #264]	; (800266c <HAL_ADC_ConfigChannel+0xa54>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	3301      	adds	r3, #1
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800256e:	e002      	b.n	8002576 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3b01      	subs	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800257c:	e05e      	b.n	800263c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <HAL_ADC_ConfigChannel+0xa58>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d120      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x9b2>
 8002588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800258c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11a      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_ADC_ConfigChannel+0xa44>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d14e      	bne.n	800263c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <HAL_ADC_ConfigChannel+0xa3c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x99a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_ADC_ConfigChannel+0xa40>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x99e>
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <HAL_ADC_ConfigChannel+0xa4c>)
 80025b4:	e000      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x9a0>
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <HAL_ADC_ConfigChannel+0xa38>)
 80025b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fccb 	bl	8000f5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c8:	e038      	b.n	800263c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a29      	ldr	r2, [pc, #164]	; (8002674 <HAL_ADC_ConfigChannel+0xa5c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d133      	bne.n	800263c <HAL_ADC_ConfigChannel+0xa24>
 80025d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d12d      	bne.n	800263c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_ADC_ConfigChannel+0xa44>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d128      	bne.n	800263c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_ADC_ConfigChannel+0xa3c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x9e6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_ADC_ConfigChannel+0xa40>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x9ea>
 80025fe:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_ADC_ConfigChannel+0xa4c>)
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x9ec>
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_ADC_ConfigChannel+0xa38>)
 8002604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7fe fca5 	bl	8000f5e <LL_ADC_SetCommonPathInternalCh>
 8002614:	e012      	b.n	800263c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002628:	e008      	b.n	800263c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002644:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002648:	4618      	mov	r0, r3
 800264a:	37e4      	adds	r7, #228	; 0xe4
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	58026300 	.word	0x58026300
 8002654:	40022000 	.word	0x40022000
 8002658:	40022100 	.word	0x40022100
 800265c:	58026000 	.word	0x58026000
 8002660:	c7520000 	.word	0xc7520000
 8002664:	40022300 	.word	0x40022300
 8002668:	24000000 	.word	0x24000000
 800266c:	053e2d63 	.word	0x053e2d63
 8002670:	c3210000 	.word	0xc3210000
 8002674:	cb840000 	.word	0xcb840000

08002678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fea5 	bl	80013d4 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d16e      	bne.n	800276e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <ADC_Enable+0x100>)
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e05a      	b.n	8002770 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fe74 	bl	80013ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fc08 	bl	8000ed8 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	; (800277c <ADC_Enable+0x104>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <ADC_Enable+0x66>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a29      	ldr	r2, [pc, #164]	; (8002780 <ADC_Enable+0x108>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <ADC_Enable+0x6a>
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <ADC_Enable+0x10c>)
 80026e0:	e000      	b.n	80026e4 <ADC_Enable+0x6c>
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <ADC_Enable+0x110>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fdf7 	bl	80012d8 <LL_ADC_GetMultimode>
 80026ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <ADC_Enable+0x108>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d002      	beq.n	80026fc <ADC_Enable+0x84>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	e000      	b.n	80026fe <ADC_Enable+0x86>
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <ADC_Enable+0x104>)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	4293      	cmp	r3, r2
 8002704:	d02c      	beq.n	8002760 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d130      	bne.n	800276e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270c:	e028      	b.n	8002760 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fe5e 	bl	80013d4 <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fe42 	bl	80013ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002728:	f7fe fbd6 	bl	8000ed8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d914      	bls.n	8002760 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d00d      	beq.n	8002760 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	f043 0210 	orr.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e007      	b.n	8002770 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d1cf      	bne.n	800270e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	8000003f 	.word	0x8000003f
 800277c:	40022000 	.word	0x40022000
 8002780:	40022100 	.word	0x40022100
 8002784:	40022300 	.word	0x40022300
 8002788:	58026300 	.word	0x58026300

0800278c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6c      	ldr	r2, [pc, #432]	; (800294c <ADC_ConfigureBoostMode+0x1c0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <ADC_ConfigureBoostMode+0x1c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6b      	ldr	r2, [pc, #428]	; (8002950 <ADC_ConfigureBoostMode+0x1c4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d109      	bne.n	80027bc <ADC_ConfigureBoostMode+0x30>
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <ADC_ConfigureBoostMode+0x1c8>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e008      	b.n	80027ce <ADC_ConfigureBoostMode+0x42>
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <ADC_ConfigureBoostMode+0x1cc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01c      	beq.n	800280c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027d2:	f002 f913 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 80027d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027e0:	d010      	beq.n	8002804 <ADC_ConfigureBoostMode+0x78>
 80027e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027e6:	d873      	bhi.n	80028d0 <ADC_ConfigureBoostMode+0x144>
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d002      	beq.n	80027f4 <ADC_ConfigureBoostMode+0x68>
 80027ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027f2:	d16d      	bne.n	80028d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	60fb      	str	r3, [r7, #12]
        break;
 8002802:	e068      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
        break;
 800280a:	e064      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800280c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f003 fad8 	bl	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002818:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002822:	d051      	beq.n	80028c8 <ADC_ConfigureBoostMode+0x13c>
 8002824:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002828:	d854      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800282a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800282e:	d047      	beq.n	80028c0 <ADC_ConfigureBoostMode+0x134>
 8002830:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002834:	d84e      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002836:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800283a:	d03d      	beq.n	80028b8 <ADC_ConfigureBoostMode+0x12c>
 800283c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002840:	d848      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002846:	d033      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x124>
 8002848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284c:	d842      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800284e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002852:	d029      	beq.n	80028a8 <ADC_ConfigureBoostMode+0x11c>
 8002854:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002858:	d83c      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800285a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800285e:	d01a      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002860:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002864:	d836      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002866:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800286a:	d014      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 800286c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002870:	d830      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 8002872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002876:	d00e      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800287c:	d82a      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800287e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002882:	d008      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002884:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002888:	d824      	bhi.n	80028d4 <ADC_ConfigureBoostMode+0x148>
 800288a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800288e:	d002      	beq.n	8002896 <ADC_ConfigureBoostMode+0x10a>
 8002890:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002894:	d11e      	bne.n	80028d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e016      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e012      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	e00e      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	60fb      	str	r3, [r7, #12]
        break;
 80028be:	e00a      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	09db      	lsrs	r3, r3, #7
 80028c4:	60fb      	str	r3, [r7, #12]
        break;
 80028c6:	e006      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	60fb      	str	r3, [r7, #12]
        break;
 80028ce:	e002      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80028d0:	bf00      	nop
 80028d2:	e000      	b.n	80028d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028d4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a1f      	ldr	r2, [pc, #124]	; (800295c <ADC_ConfigureBoostMode+0x1d0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d808      	bhi.n	80028f6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028f4:	e025      	b.n	8002942 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <ADC_ConfigureBoostMode+0x1d4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d80a      	bhi.n	8002914 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	e016      	b.n	8002942 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a13      	ldr	r2, [pc, #76]	; (8002964 <ADC_ConfigureBoostMode+0x1d8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d80a      	bhi.n	8002932 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	e007      	b.n	8002942 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000
 8002950:	40022100 	.word	0x40022100
 8002954:	40022300 	.word	0x40022300
 8002958:	58026300 	.word	0x58026300
 800295c:	005f5e10 	.word	0x005f5e10
 8002960:	00bebc20 	.word	0x00bebc20
 8002964:	017d7840 	.word	0x017d7840

08002968 <LL_ADC_IsEnabled>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <LL_ADC_IsEnabled+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_IsEnabled+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_REG_IsConversionOngoing>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b0a3      	sub	sp, #140	; 0x8c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e0c1      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029de:	2300      	movs	r3, #0
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d102      	bne.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029ec:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e001      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0a0      	b.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ffb9 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ffb2 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 8081 	bne.w	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d17c      	bne.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002a4e:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a50:	e000      	b.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002a52:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a54:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d039      	beq.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a39      	ldr	r2, [pc, #228]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10e      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002a84:	4836      	ldr	r0, [pc, #216]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002a86:	f7ff ff6f 	bl	8002968 <LL_ADC_IsEnabled>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4835      	ldr	r0, [pc, #212]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002a8e:	f7ff ff6b 	bl	8002968 <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4323      	orrs	r3, r4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e008      	b.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002aa2:	4833      	ldr	r0, [pc, #204]	; (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002aa4:	f7ff ff60 	bl	8002968 <LL_ADC_IsEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d047      	beq.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	6811      	ldr	r1, [r2, #0]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ace:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad0:	e03a      	b.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002adc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10e      	bne.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002af2:	481b      	ldr	r0, [pc, #108]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002af4:	f7ff ff38 	bl	8002968 <LL_ADC_IsEnabled>
 8002af8:	4604      	mov	r4, r0
 8002afa:	481a      	ldr	r0, [pc, #104]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002afc:	f7ff ff34 	bl	8002968 <LL_ADC_IsEnabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4323      	orrs	r3, r4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e008      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002b10:	4817      	ldr	r0, [pc, #92]	; (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002b12:	f7ff ff29 	bl	8002968 <LL_ADC_IsEnabled>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b32:	e009      	b.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002b46:	e000      	b.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002b52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	378c      	adds	r7, #140	; 0x8c
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40022100 	.word	0x40022100
 8002b68:	40022300 	.word	0x40022300
 8002b6c:	58026300 	.word	0x58026300
 8002b70:	58026000 	.word	0x58026000
 8002b74:	fffff0e0 	.word	0xfffff0e0

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	05fa0000 	.word	0x05fa0000

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f1c3 0307 	rsb	r3, r3, #7
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf28      	it	cs
 8002c4e:	2304      	movcs	r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <NVIC_EncodePriority+0x30>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b03      	subs	r3, #3
 8002c5e:	e000      	b.n	8002c62 <NVIC_EncodePriority+0x32>
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	401a      	ands	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	4313      	orrs	r3, r2
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca8:	d301      	bcc.n	8002cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00f      	b.n	8002cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <SysTick_Config+0x40>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7ff ff8e 	bl	8002bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff47 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff5e 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff90 	bl	8002c30 <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5f 	bl	8002bdc <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffb2 	bl	8002c98 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b098      	sub	sp, #96	; 0x60
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002d48:	4a84      	ldr	r2, [pc, #528]	; (8002f5c <HAL_FDCAN_Init+0x21c>)
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	4611      	mov	r1, r2
 8002d50:	224c      	movs	r2, #76	; 0x4c
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 faaa 	bl	80072ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1c6      	b.n	80030f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7e      	ldr	r2, [pc, #504]	; (8002f60 <HAL_FDCAN_Init+0x220>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d106      	bne.n	8002d7a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fee6 	bl	8000b60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da4:	f7fe f898 	bl	8000ed8 <HAL_GetTick>
 8002da8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002daa:	e014      	b.n	8002dd6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002dac:	f7fe f894 	bl	8000ed8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b0a      	cmp	r3, #10
 8002db8:	d90d      	bls.n	8002dd6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e18c      	b.n	80030f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d0e3      	beq.n	8002dac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df4:	f7fe f870 	bl	8000ed8 <HAL_GetTick>
 8002df8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002dfa:	e014      	b.n	8002e26 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002dfc:	f7fe f86c 	bl	8000ed8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b0a      	cmp	r3, #10
 8002e08:	d90d      	bls.n	8002e26 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e164      	b.n	80030f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0e3      	beq.n	8002dfc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0202 	orr.w	r2, r2, #2
 8002e42:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7c1b      	ldrb	r3, [r3, #16]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5a:	619a      	str	r2, [r3, #24]
 8002e5c:	e007      	b.n	8002e6e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7c5b      	ldrb	r3, [r3, #17]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d108      	bne.n	8002e88 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e84:	619a      	str	r2, [r3, #24]
 8002e86:	e007      	b.n	8002e98 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e96:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7c9b      	ldrb	r3, [r3, #18]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d108      	bne.n	8002eb2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eae:	619a      	str	r2, [r3, #24]
 8002eb0:	e007      	b.n	8002ec2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002ee6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0210 	bic.w	r2, r2, #16
 8002ef6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0204 	orr.w	r2, r2, #4
 8002f0e:	619a      	str	r2, [r3, #24]
 8002f10:	e030      	b.n	8002f74 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02c      	beq.n	8002f74 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d020      	beq.n	8002f64 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f30:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0210 	orr.w	r2, r2, #16
 8002f40:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d114      	bne.n	8002f74 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0220 	orr.w	r2, r2, #32
 8002f58:	619a      	str	r2, [r3, #24]
 8002f5a:	e00b      	b.n	8002f74 <HAL_FDCAN_Init+0x234>
 8002f5c:	080072e0 	.word	0x080072e0
 8002f60:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f84:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002f8c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002f9c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f9e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa8:	d115      	bne.n	8002fd6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002fb8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002fc2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002fd2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002fd4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	4413      	add	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d011      	beq.n	8003026 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800300a:	f023 0107 	bic.w	r1, r3, #7
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	3360      	adds	r3, #96	; 0x60
 8003016:	443b      	add	r3, r7
 8003018:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d011      	beq.n	8003052 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003036:	f023 0107 	bic.w	r1, r3, #7
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3360      	adds	r3, #96	; 0x60
 8003042:	443b      	add	r3, r7
 8003044:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003062:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	3360      	adds	r3, #96	; 0x60
 800306e:	443b      	add	r3, r7
 8003070:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003074:	011a      	lsls	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003090:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	3360      	adds	r3, #96	; 0x60
 800309c:	443b      	add	r3, r7
 800309e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_FDCAN_Init+0x3b8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d107      	bne.n	80030c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f022 0203 	bic.w	r2, r2, #3
 80030c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f981 	bl	80033e8 <FDCAN_CalcultateRamBlockAddresses>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80030ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3760      	adds	r7, #96	; 0x60
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	4000a000 	.word	0x4000a000

080030fc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800310c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <HAL_FDCAN_ConfigFilter+0x1e>
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d157      	bne.n	80031ca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d12b      	bne.n	800317a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b07      	cmp	r3, #7
 8003128:	d10d      	bne.n	8003146 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003136:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800313c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800313e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e00e      	b.n	8003164 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003152:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800315a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e025      	b.n	80031c6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	075a      	lsls	r2, r3, #29
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b07      	cmp	r3, #7
 800318e:	d103      	bne.n	8003198 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e006      	b.n	80031a6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	079a      	lsls	r2, r3, #30
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	3304      	adds	r3, #4
 80031be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e008      	b.n	80031dc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d0:	f043 0202 	orr.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d111      	bne.n	8003220 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e008      	b.n	8003232 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d141      	bne.n	80032da <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800325e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e038      	b.n	80032ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003290:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e026      	b.n	80032ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fa1d 	bl	80036f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80032ca:	2201      	movs	r2, #1
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e008      	b.n	80032ec <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e0:	f043 0208 	orr.w	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003306:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d002      	beq.n	8003314 <HAL_FDCAN_ActivateNotification+0x20>
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d155      	bne.n	80033c0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d108      	bne.n	8003334 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c
 8003332:	e014      	b.n	800335e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	d108      	bne.n	8003356 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0202 	orr.w	r2, r2, #2
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c
 8003354:	e003      	b.n	800335e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2203      	movs	r2, #3
 800335c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	430a      	orrs	r2, r1
 8003378:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	430a      	orrs	r2, r1
 8003396:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_FDCAN_ActivateNotification+0xec>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6553      	str	r3, [r2, #84]	; 0x54
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	0f9b      	lsrs	r3, r3, #30
 80033b6:	490b      	ldr	r1, [pc, #44]	; (80033e4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e008      	b.n	80033d2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	3fcfffff 	.word	0x3fcfffff
 80033e4:	4000a800 	.word	0x4000a800

080033e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80033fe:	4ba7      	ldr	r3, [pc, #668]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003400:	4013      	ands	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	0091      	lsls	r1, r2, #2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	430b      	orrs	r3, r1
 800340c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003418:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	041a      	lsls	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4413      	add	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800343e:	4b97      	ldr	r3, [pc, #604]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	0091      	lsls	r1, r2, #2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	430b      	orrs	r3, r1
 800344c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003480:	4b86      	ldr	r3, [pc, #536]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	0091      	lsls	r1, r2, #2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	430b      	orrs	r3, r1
 800348e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800349a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	041a      	lsls	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034c8:	4b74      	ldr	r3, [pc, #464]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	0091      	lsls	r1, r2, #2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	041a      	lsls	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4413      	add	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003510:	4b62      	ldr	r3, [pc, #392]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003512:	4013      	ands	r3, r2
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	0091      	lsls	r1, r2, #2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	430b      	orrs	r3, r1
 800351e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800353c:	4b57      	ldr	r3, [pc, #348]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800353e:	4013      	ands	r3, r2
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	0091      	lsls	r1, r2, #2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	430b      	orrs	r3, r1
 800354a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003556:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	041a      	lsls	r2, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4413      	add	r3, r2
 8003574:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	0091      	lsls	r1, r2, #2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003598:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035b4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	061a      	lsls	r2, r3, #24
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80035ce:	4413      	add	r3, r2
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	441a      	add	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d915      	bls.n	80036c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003698:	e006      	b.n	80036a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800369a:	bf00      	nop
 800369c:	ffff0003 	.word	0xffff0003
 80036a0:	10002b00 	.word	0x10002b00
 80036a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e010      	b.n	80036e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e005      	b.n	80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3304      	adds	r3, #4
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3f3      	bcc.n	80036cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop

080036f4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003712:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800371a:	4313      	orrs	r3, r2
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e00a      	b.n	8003736 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003728:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800372e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003734:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003740:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003746:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800374c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003762:	6839      	ldr	r1, [r7, #0]
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3304      	adds	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	3304      	adds	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e020      	b.n	80037ce <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3303      	adds	r3, #3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3302      	adds	r3, #2
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	440b      	add	r3, r1
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80037a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	440b      	add	r3, r1
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80037b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	440a      	add	r2, r1
 80037ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80037bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3304      	adds	r3, #4
 80037c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3304      	adds	r3, #4
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a06      	ldr	r2, [pc, #24]	; (80037ec <FDCAN_CopyMessageToRAM+0xf8>)
 80037d4:	5cd3      	ldrb	r3, [r2, r3]
 80037d6:	461a      	mov	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4293      	cmp	r3, r2
 80037dc:	d3d6      	bcc.n	800378c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	3724      	adds	r7, #36	; 0x24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	0800733c 	.word	0x0800733c

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_GPIO_Init+0x228>)
 8003800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003802:	e18c      	b.n	8003b1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 817e 	beq.w	8003b18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d005      	beq.n	8003834 <HAL_GPIO_Init+0x44>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d130      	bne.n	8003896 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800386a:	2201      	movs	r2, #1
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0201 	and.w	r2, r3, #1
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d017      	beq.n	80038d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d123      	bne.n	8003926 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	08da      	lsrs	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3208      	adds	r2, #8
 80038e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	220f      	movs	r2, #15
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80d8 	beq.w	8003b18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003968:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_GPIO_Init+0x22c>)
 800396a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800396e:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <HAL_GPIO_Init+0x22c>)
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_GPIO_Init+0x22c>)
 800397a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003986:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <HAL_GPIO_Init+0x230>)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	220f      	movs	r2, #15
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_GPIO_Init+0x234>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d04a      	beq.n	8003a48 <HAL_GPIO_Init+0x258>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_GPIO_Init+0x238>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02b      	beq.n	8003a12 <HAL_GPIO_Init+0x222>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_GPIO_Init+0x23c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d025      	beq.n	8003a0e <HAL_GPIO_Init+0x21e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_GPIO_Init+0x240>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01f      	beq.n	8003a0a <HAL_GPIO_Init+0x21a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_GPIO_Init+0x244>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d019      	beq.n	8003a06 <HAL_GPIO_Init+0x216>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_GPIO_Init+0x248>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_GPIO_Init+0x212>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_GPIO_Init+0x24c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00d      	beq.n	80039fe <HAL_GPIO_Init+0x20e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_GPIO_Init+0x250>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <HAL_GPIO_Init+0x20a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_GPIO_Init+0x254>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_GPIO_Init+0x206>
 80039f2:	2309      	movs	r3, #9
 80039f4:	e029      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 80039f6:	230a      	movs	r3, #10
 80039f8:	e027      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 80039fa:	2307      	movs	r3, #7
 80039fc:	e025      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 80039fe:	2306      	movs	r3, #6
 8003a00:	e023      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 8003a02:	2305      	movs	r3, #5
 8003a04:	e021      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 8003a06:	2304      	movs	r3, #4
 8003a08:	e01f      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e01d      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e01b      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e019      	b.n	8003a4a <HAL_GPIO_Init+0x25a>
 8003a16:	bf00      	nop
 8003a18:	58000080 	.word	0x58000080
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	58000400 	.word	0x58000400
 8003a24:	58020000 	.word	0x58020000
 8003a28:	58020400 	.word	0x58020400
 8003a2c:	58020800 	.word	0x58020800
 8003a30:	58020c00 	.word	0x58020c00
 8003a34:	58021000 	.word	0x58021000
 8003a38:	58021400 	.word	0x58021400
 8003a3c:	58021800 	.word	0x58021800
 8003a40:	58021c00 	.word	0x58021c00
 8003a44:	58022400 	.word	0x58022400
 8003a48:	2300      	movs	r3, #0
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	f002 0203 	and.w	r2, r2, #3
 8003a50:	0092      	lsls	r2, r2, #2
 8003a52:	4093      	lsls	r3, r2
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a5a:	4938      	ldr	r1, [pc, #224]	; (8003b3c <HAL_GPIO_Init+0x34c>)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f ae6b 	bne.w	8003804 <HAL_GPIO_Init+0x14>
  }
}
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
 8003b32:	3724      	adds	r7, #36	; 0x24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	58000400 	.word	0x58000400

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b5c:	e003      	b.n	8003b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	041a      	lsls	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	619a      	str	r2, [r3, #24]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d00a      	beq.n	8003b9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_PWREx_ConfigSupply+0x70>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01f      	b.n	8003bda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e01d      	b.n	8003bda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_PWREx_ConfigSupply+0x70>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	490f      	ldr	r1, [pc, #60]	; (8003be4 <HAL_PWREx_ConfigSupply+0x70>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bae:	f7fd f993 	bl	8000ed8 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bb4:	e009      	b.n	8003bca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bb6:	f7fd f98f 	bl	8000ed8 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc4:	d901      	bls.n	8003bca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_PWREx_ConfigSupply+0x70>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	58024800 	.word	0x58024800

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e3c8      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8087 	beq.w	8003d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c08:	4b88      	ldr	r3, [pc, #544]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c12:	4b86      	ldr	r3, [pc, #536]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d007      	beq.n	8003c2e <HAL_RCC_OscConfig+0x46>
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b18      	cmp	r3, #24
 8003c22:	d110      	bne.n	8003c46 <HAL_RCC_OscConfig+0x5e>
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d10b      	bne.n	8003c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d06c      	beq.n	8003d14 <HAL_RCC_OscConfig+0x12c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d168      	bne.n	8003d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e3a2      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x76>
 8003c50:	4b76      	ldr	r3, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a75      	ldr	r2, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	e02e      	b.n	8003cbc <HAL_RCC_OscConfig+0xd4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x98>
 8003c66:	4b71      	ldr	r3, [pc, #452]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6d      	ldr	r2, [pc, #436]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e01d      	b.n	8003cbc <HAL_RCC_OscConfig+0xd4>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0xbc>
 8003c8a:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a67      	ldr	r2, [pc, #412]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a64      	ldr	r2, [pc, #400]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0xd4>
 8003ca4:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a60      	ldr	r2, [pc, #384]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b5e      	ldr	r3, [pc, #376]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f908 	bl	8000ed8 <HAL_GetTick>
 8003cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fd f904 	bl	8000ed8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e356      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cde:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0xe4>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fd f8f4 	bl	8000ed8 <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fd f8f0 	bl	8000ed8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e342      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d06:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x10c>
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 808c 	beq.w	8003e3c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <HAL_RCC_OscConfig+0x162>
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2b18      	cmp	r3, #24
 8003d3e:	d137      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1c8>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d132      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4a:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e314      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d62:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 0219 	bic.w	r2, r3, #25
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	492f      	ldr	r1, [pc, #188]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd f8b0 	bl	8000ed8 <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7c:	f7fd f8ac 	bl	8000ed8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e2fe      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	061b      	lsls	r3, r3, #24
 8003da8:	4920      	ldr	r1, [pc, #128]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dae:	e045      	b.n	8003e3c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d026      	beq.n	8003e06 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003db8:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 0219 	bic.w	r2, r3, #25
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4919      	ldr	r1, [pc, #100]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd f885 	bl	8000ed8 <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fd f881 	bl	8000ed8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e2d3      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	490b      	ldr	r1, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	e01a      	b.n	8003e3c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd f861 	bl	8000ed8 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fd f85d 	bl	8000ed8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d903      	bls.n	8003e30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e2af      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
 8003e2c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e30:	4b96      	ldr	r3, [pc, #600]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d06a      	beq.n	8003f1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e48:	4b90      	ldr	r3, [pc, #576]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e50:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e52:	4b8e      	ldr	r3, [pc, #568]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d007      	beq.n	8003e6e <HAL_RCC_OscConfig+0x286>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b18      	cmp	r3, #24
 8003e62:	d11b      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2b4>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d116      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e6e:	4b87      	ldr	r3, [pc, #540]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x29e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	2b80      	cmp	r3, #128	; 0x80
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e282      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e86:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	497d      	ldr	r1, [pc, #500]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e9a:	e040      	b.n	8003f1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ea4:	4b79      	ldr	r3, [pc, #484]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a78      	ldr	r2, [pc, #480]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd f812 	bl	8000ed8 <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003eb8:	f7fd f80e 	bl	8000ed8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e260      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eca:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	4969      	ldr	r1, [pc, #420]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]
 8003eea:	e018      	b.n	8003f1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003eec:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a66      	ldr	r2, [pc, #408]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fc ffee 	bl	8000ed8 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f00:	f7fc ffea 	bl	8000ed8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e23c      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f12:	4b5e      	ldr	r3, [pc, #376]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d036      	beq.n	8003f98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d019      	beq.n	8003f66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	4b56      	ldr	r3, [pc, #344]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	4a55      	ldr	r2, [pc, #340]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fc ffcb 	bl	8000ed8 <HAL_GetTick>
 8003f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fc ffc7 	bl	8000ed8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e219      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x35e>
 8003f64:	e018      	b.n	8003f98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	4a48      	ldr	r2, [pc, #288]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fc ffb1 	bl	8000ed8 <HAL_GetTick>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7a:	f7fc ffad 	bl	8000ed8 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e1ff      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d036      	beq.n	8004012 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d019      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fac:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a36      	ldr	r2, [pc, #216]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fb8:	f7fc ff8e 	bl	8000ed8 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc0:	f7fc ff8a 	bl	8000ed8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1dc      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x3d8>
 8003fde:	e018      	b.n	8004012 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a29      	ldr	r2, [pc, #164]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8003fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fec:	f7fc ff74 	bl	8000ed8 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff4:	f7fc ff70 	bl	8000ed8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1c2      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8086 	beq.w	800412c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x4a8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_RCC_OscConfig+0x4a8>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800402c:	f7fc ff54 	bl	8000ed8 <HAL_GetTick>
 8004030:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004034:	f7fc ff50 	bl	8000ed8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1a2      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_OscConfig+0x4a8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x480>
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a0b      	ldr	r2, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6713      	str	r3, [r2, #112]	; 0x70
 8004066:	e032      	b.n	80040ce <HAL_RCC_OscConfig+0x4e6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <HAL_RCC_OscConfig+0x4ac>
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a05      	ldr	r2, [pc, #20]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	4b03      	ldr	r3, [pc, #12]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a02      	ldr	r2, [pc, #8]	; (800408c <HAL_RCC_OscConfig+0x4a4>)
 8004082:	f023 0304 	bic.w	r3, r3, #4
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
 8004088:	e021      	b.n	80040ce <HAL_RCC_OscConfig+0x4e6>
 800408a:	bf00      	nop
 800408c:	58024400 	.word	0x58024400
 8004090:	58024800 	.word	0x58024800
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b05      	cmp	r3, #5
 800409a:	d10c      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4ce>
 800409c:	4b83      	ldr	r3, [pc, #524]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a82      	ldr	r2, [pc, #520]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	4b80      	ldr	r3, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a7f      	ldr	r2, [pc, #508]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	e00b      	b.n	80040ce <HAL_RCC_OscConfig+0x4e6>
 80040b6:	4b7d      	ldr	r3, [pc, #500]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a7c      	ldr	r2, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	4b7a      	ldr	r3, [pc, #488]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a79      	ldr	r2, [pc, #484]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d015      	beq.n	8004102 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fc feff 	bl	8000ed8 <HAL_GetTick>
 80040da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fc fefb 	bl	8000ed8 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e14b      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f4:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ee      	beq.n	80040de <HAL_RCC_OscConfig+0x4f6>
 8004100:	e014      	b.n	800412c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fc fee9 	bl	8000ed8 <HAL_GetTick>
 8004106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fc fee5 	bl	8000ed8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e135      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004120:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ee      	bne.n	800410a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 812a 	beq.w	800438a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800413e:	2b18      	cmp	r3, #24
 8004140:	f000 80ba 	beq.w	80042b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b02      	cmp	r3, #2
 800414a:	f040 8095 	bne.w	8004278 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fc febd 	bl	8000ed8 <HAL_GetTick>
 800415e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004162:	f7fc feb9 	bl	8000ed8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e10b      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004174:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004180:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004184:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_RCC_OscConfig+0x6c8>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	430a      	orrs	r2, r1
 8004194:	4945      	ldr	r1, [pc, #276]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	628b      	str	r3, [r1, #40]	; 0x28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	3b01      	subs	r3, #1
 80041a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	3b01      	subs	r3, #1
 80041aa:	025b      	lsls	r3, r3, #9
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	3b01      	subs	r3, #1
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041ca:	4938      	ldr	r1, [pc, #224]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80041d0:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4a35      	ldr	r2, [pc, #212]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041dc:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_RCC_OscConfig+0x6cc>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041e8:	00d2      	lsls	r2, r2, #3
 80041ea:	4930      	ldr	r1, [pc, #192]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041f0:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	f023 020c 	bic.w	r2, r3, #12
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	492b      	ldr	r1, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004202:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f023 0202 	bic.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	4927      	ldr	r1, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004214:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	4a24      	ldr	r2, [pc, #144]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800421a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004220:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004238:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800424a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fc fe42 	bl	8000ed8 <HAL_GetTick>
 8004254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fc fe3e 	bl	8000ed8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e090      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x670>
 8004276:	e088      	b.n	800438a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 800427e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fc fe28 	bl	8000ed8 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fc fe24 	bl	8000ed8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e076      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800429e:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_OscConfig+0x6c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x6a4>
 80042aa:	e06e      	b.n	800438a <HAL_RCC_OscConfig+0x7a2>
 80042ac:	58024400 	.word	0x58024400
 80042b0:	fffffc0c 	.word	0xfffffc0c
 80042b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042b8:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042be:	4b35      	ldr	r3, [pc, #212]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d031      	beq.n	8004330 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 0203 	and.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d12a      	bne.n	8004330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d122      	bne.n	8004330 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d11a      	bne.n	8004330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0a5b      	lsrs	r3, r3, #9
 80042fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d111      	bne.n	8004330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d108      	bne.n	8004330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	0e1b      	lsrs	r3, r3, #24
 8004322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e02b      	b.n	800438c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004334:	4b17      	ldr	r3, [pc, #92]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	08db      	lsrs	r3, r3, #3
 800433a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800433e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	429a      	cmp	r2, r3
 8004348:	d01f      	beq.n	800438a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	4a11      	ldr	r2, [pc, #68]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004356:	f7fc fdbf 	bl	8000ed8 <HAL_GetTick>
 800435a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800435c:	bf00      	nop
 800435e:	f7fc fdbb 	bl	8000ed8 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	4293      	cmp	r3, r2
 8004368:	d0f9      	beq.n	800435e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 800436c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_OscConfig+0x7b0>)
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004376:	00d2      	lsls	r2, r2, #3
 8004378:	4906      	ldr	r1, [pc, #24]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 800437a:	4313      	orrs	r3, r2
 800437c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_RCC_OscConfig+0x7ac>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	58024400 	.word	0x58024400
 8004398:	ffff0007 	.word	0xffff0007

0800439c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e19c      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b0:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d910      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b87      	ldr	r3, [pc, #540]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 020f 	bic.w	r2, r3, #15
 80043c6:	4985      	ldr	r1, [pc, #532]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b83      	ldr	r3, [pc, #524]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e184      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	4b7b      	ldr	r3, [pc, #492]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d908      	bls.n	800440e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043fc:	4b78      	ldr	r3, [pc, #480]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	4975      	ldr	r1, [pc, #468]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800440a:	4313      	orrs	r3, r2
 800440c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	4b70      	ldr	r3, [pc, #448]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004426:	429a      	cmp	r2, r3
 8004428:	d908      	bls.n	800443c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	496a      	ldr	r1, [pc, #424]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004438:	4313      	orrs	r3, r2
 800443a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004454:	429a      	cmp	r2, r3
 8004456:	d908      	bls.n	800446a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004458:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	495e      	ldr	r1, [pc, #376]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004466:	4313      	orrs	r3, r2
 8004468:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	4b59      	ldr	r3, [pc, #356]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004482:	429a      	cmp	r2, r3
 8004484:	d908      	bls.n	8004498 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004486:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4953      	ldr	r1, [pc, #332]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004494:	4313      	orrs	r3, r2
 8004496:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	4b4d      	ldr	r3, [pc, #308]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d908      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b4a      	ldr	r3, [pc, #296]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f023 020f 	bic.w	r2, r3, #15
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4947      	ldr	r1, [pc, #284]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d055      	beq.n	800457e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044d2:	4b43      	ldr	r3, [pc, #268]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4940      	ldr	r1, [pc, #256]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ec:	4b3c      	ldr	r3, [pc, #240]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d121      	bne.n	800453c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0f6      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004504:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d115      	bne.n	800453c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0ea      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800451c:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0de      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800452c:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0d6      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800453c:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f023 0207 	bic.w	r2, r3, #7
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4925      	ldr	r1, [pc, #148]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800454a:	4313      	orrs	r3, r2
 800454c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454e:	f7fc fcc3 	bl	8000ed8 <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004554:	e00a      	b.n	800456c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004556:	f7fc fcbf 	bl	8000ed8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0be      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456c:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	429a      	cmp	r2, r3
 800457c:	d1eb      	bne.n	8004556 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	429a      	cmp	r2, r3
 8004598:	d208      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f023 020f 	bic.w	r2, r3, #15
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	490e      	ldr	r1, [pc, #56]	; (80045e0 <HAL_RCC_ClockConfig+0x244>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d214      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	4906      	ldr	r1, [pc, #24]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <HAL_RCC_ClockConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e086      	b.n	80046ea <HAL_RCC_ClockConfig+0x34e>
 80045dc:	52002000 	.word	0x52002000
 80045e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d208      	bcs.n	8004612 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004600:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	4939      	ldr	r1, [pc, #228]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 800460e:	4313      	orrs	r3, r2
 8004610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d010      	beq.n	8004640 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800462a:	429a      	cmp	r2, r3
 800462c:	d208      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	492e      	ldr	r1, [pc, #184]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 800463c:	4313      	orrs	r3, r2
 800463e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d010      	beq.n	800466e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004658:	429a      	cmp	r2, r3
 800465a:	d208      	bcs.n	800466e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	4922      	ldr	r1, [pc, #136]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 800466a:	4313      	orrs	r3, r2
 800466c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004686:	429a      	cmp	r2, r3
 8004688:	d208      	bcs.n	800469c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4917      	ldr	r1, [pc, #92]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 8004698:	4313      	orrs	r3, r2
 800469a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800469c:	f000 f834 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	4912      	ldr	r1, [pc, #72]	; (80046f8 <HAL_RCC_ClockConfig+0x35c>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x358>)
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <HAL_RCC_ClockConfig+0x35c>)
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <HAL_RCC_ClockConfig+0x360>)
 80046d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046d4:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x364>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x368>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fbb0 	bl	8000e44 <HAL_InitTick>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	58024400 	.word	0x58024400
 80046f8:	0800732c 	.word	0x0800732c
 80046fc:	24000004 	.word	0x24000004
 8004700:	24000000 	.word	0x24000000
 8004704:	24000008 	.word	0x24000008

08004708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800470e:	4bb3      	ldr	r3, [pc, #716]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004716:	2b18      	cmp	r3, #24
 8004718:	f200 8155 	bhi.w	80049c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <HAL_RCC_GetSysClockFreq+0x1c>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004789 	.word	0x08004789
 8004728:	080049c7 	.word	0x080049c7
 800472c:	080049c7 	.word	0x080049c7
 8004730:	080049c7 	.word	0x080049c7
 8004734:	080049c7 	.word	0x080049c7
 8004738:	080049c7 	.word	0x080049c7
 800473c:	080049c7 	.word	0x080049c7
 8004740:	080049c7 	.word	0x080049c7
 8004744:	080047af 	.word	0x080047af
 8004748:	080049c7 	.word	0x080049c7
 800474c:	080049c7 	.word	0x080049c7
 8004750:	080049c7 	.word	0x080049c7
 8004754:	080049c7 	.word	0x080049c7
 8004758:	080049c7 	.word	0x080049c7
 800475c:	080049c7 	.word	0x080049c7
 8004760:	080049c7 	.word	0x080049c7
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080049c7 	.word	0x080049c7
 800476c:	080049c7 	.word	0x080049c7
 8004770:	080049c7 	.word	0x080049c7
 8004774:	080049c7 	.word	0x080049c7
 8004778:	080049c7 	.word	0x080049c7
 800477c:	080049c7 	.word	0x080049c7
 8004780:	080049c7 	.word	0x080049c7
 8004784:	080047bb 	.word	0x080047bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004788:	4b94      	ldr	r3, [pc, #592]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004794:	4b91      	ldr	r3, [pc, #580]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	4a90      	ldr	r2, [pc, #576]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80047a6:	e111      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047a8:	4b8d      	ldr	r3, [pc, #564]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047aa:	61bb      	str	r3, [r7, #24]
      break;
 80047ac:	e10e      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80047ae:	4b8d      	ldr	r3, [pc, #564]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047b0:	61bb      	str	r3, [r7, #24]
      break;
 80047b2:	e10b      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80047b4:	4b8c      	ldr	r3, [pc, #560]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047b6:	61bb      	str	r3, [r7, #24]
      break;
 80047b8:	e108      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ba:	4b88      	ldr	r3, [pc, #544]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047c4:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047d0:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047da:	4b80      	ldr	r3, [pc, #512]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80e1 	beq.w	80049c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f000 8083 	beq.w	800490c <HAL_RCC_GetSysClockFreq+0x204>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b02      	cmp	r3, #2
 800480a:	f200 80a1 	bhi.w	8004950 <HAL_RCC_GetSysClockFreq+0x248>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x114>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d056      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800481a:	e099      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800481c:	4b6f      	ldr	r3, [pc, #444]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02d      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004828:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	08db      	lsrs	r3, r3, #3
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	4a6b      	ldr	r2, [pc, #428]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b62      	ldr	r3, [pc, #392]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a02 	vldr	s12, [r7, #8]
 8004866:	eddf 5a61 	vldr	s11, [pc, #388]	; 80049ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004882:	e087      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80049f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80049ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048c6:	e065      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80049ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800490a:	e043      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a38 	vldr	s13, [pc, #224]	; 80049f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004932:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80049ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800494e:	e021      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a02 	vldr	s12, [r7, #8]
 8004976:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80049ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004992:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	0a5b      	lsrs	r3, r3, #9
 800499a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499e:	3301      	adds	r3, #1
 80049a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b8:	ee17 3a90 	vmov	r3, s15
 80049bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80049be:	e005      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
      break;
 80049c4:	e002      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049c8:	61bb      	str	r3, [r7, #24]
      break;
 80049ca:	bf00      	nop
  }

  return sysclockfreq;
 80049cc:	69bb      	ldr	r3, [r7, #24]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	58024400 	.word	0x58024400
 80049e0:	03d09000 	.word	0x03d09000
 80049e4:	003d0900 	.word	0x003d0900
 80049e8:	017d7840 	.word	0x017d7840
 80049ec:	46000000 	.word	0x46000000
 80049f0:	4c742400 	.word	0x4c742400
 80049f4:	4a742400 	.word	0x4a742400
 80049f8:	4bbebc20 	.word	0x4bbebc20

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a02:	f7ff fe81 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 8004a06:	4602      	mov	r2, r0
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	490f      	ldr	r1, [pc, #60]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a14:	5ccb      	ldrb	r3, [r1, r3]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a2a:	5cd3      	ldrb	r3, [r2, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a3a:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	0800732c 	.word	0x0800732c
 8004a54:	24000004 	.word	0x24000004
 8004a58:	24000000 	.word	0x24000000

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a60:	f7ff ffcc 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4904      	ldr	r1, [pc, #16]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	58024400 	.word	0x58024400
 8004a84:	0800732c 	.word	0x0800732c

08004a88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b0c6      	sub	sp, #280	; 0x118
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004aac:	2500      	movs	r5, #0
 8004aae:	ea54 0305 	orrs.w	r3, r4, r5
 8004ab2:	d049      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004abe:	d02f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ac4:	d828      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aca:	d01a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad0:	d822      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ada:	d007      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004adc:	e01c      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ade:	4bab      	ldr	r3, [pc, #684]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4aaa      	ldr	r2, [pc, #680]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004aea:	e01a      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af0:	3308      	adds	r3, #8
 8004af2:	2102      	movs	r1, #2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f002 fa49 	bl	8006f8c <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	2102      	movs	r1, #2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f002 faf0 	bl	80070f0 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b2a:	4b98      	ldr	r3, [pc, #608]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b38:	4a94      	ldr	r2, [pc, #592]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6513      	str	r3, [r2, #80]	; 0x50
 8004b3e:	e003      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004b54:	f04f 0900 	mov.w	r9, #0
 8004b58:	ea58 0309 	orrs.w	r3, r8, r9
 8004b5c:	d047      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d82a      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b85 	.word	0x08004b85
 8004b74:	08004b93 	.word	0x08004b93
 8004b78:	08004ba9 	.word	0x08004ba9
 8004b7c:	08004bc7 	.word	0x08004bc7
 8004b80:	08004bc7 	.word	0x08004bc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b84:	4b81      	ldr	r3, [pc, #516]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a80      	ldr	r2, [pc, #512]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b90:	e01a      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b96:	3308      	adds	r3, #8
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f002 f9f6 	bl	8006f8c <RCCEx_PLL2_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ba6:	e00f      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bac:	3328      	adds	r3, #40	; 0x28
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 fa9d 	bl	80070f0 <RCCEx_PLL3_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e004      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bd0:	4b6e      	ldr	r3, [pc, #440]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	f023 0107 	bic.w	r1, r3, #7
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4a6b      	ldr	r2, [pc, #428]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6513      	str	r3, [r2, #80]	; 0x50
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004bfa:	f04f 0b00 	mov.w	fp, #0
 8004bfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c02:	d05b      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c0c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004c10:	d03b      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004c12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004c16:	d834      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c1c:	d037      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c22:	d82e      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c28:	d033      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c2e:	d828      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d01a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3a:	d822      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c44:	d007      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004c46:	e01c      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a4f      	ldr	r2, [pc, #316]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c54:	e01e      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 f994 	bl	8006f8c <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c6a:	e013      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c70:	3328      	adds	r3, #40	; 0x28
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 fa3b 	bl	80070f0 <RCCEx_PLL3_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c9c:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cac:	4a37      	ldr	r2, [pc, #220]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d05d      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ce4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ce8:	d03b      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004cea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004cee:	d834      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf4:	d037      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cfa:	d82e      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004cfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d00:	d033      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004d02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d06:	d828      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d0c:	d01a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d12:	d822      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d1c:	d007      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d1e:	e01c      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d2c:	e01e      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d32:	3308      	adds	r3, #8
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 f928 	bl	8006f8c <RCCEx_PLL2_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d42:	e013      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d48:	3328      	adds	r3, #40	; 0x28
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f002 f9cf 	bl	80070f0 <RCCEx_PLL3_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d58:	e008      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d60:	e004      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10d      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d84:	4a01      	ldr	r2, [pc, #4]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58
 8004d8a:	e005      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004da4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004dae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	d03a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dbe:	2b30      	cmp	r3, #48	; 0x30
 8004dc0:	d01f      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004dc2:	2b30      	cmp	r3, #48	; 0x30
 8004dc4:	d819      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d00c      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d815      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d019      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d111      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd6:	4baa      	ldr	r3, [pc, #680]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	4aa9      	ldr	r2, [pc, #676]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de8:	3308      	adds	r3, #8
 8004dea:	2102      	movs	r1, #2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f002 f8cd 	bl	8006f8c <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e10:	4b9b      	ldr	r3, [pc, #620]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	4a98      	ldr	r2, [pc, #608]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e20:	430b      	orrs	r3, r1
 8004e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e24:	e003      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d051      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e58:	d035      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e5e:	d82e      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e64:	d031      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004e66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e6a:	d828      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e70:	d01a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d822      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e80:	d007      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004e82:	e01c      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e84:	4b7e      	ldr	r3, [pc, #504]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a7d      	ldr	r2, [pc, #500]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e90:	e01c      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e96:	3308      	adds	r3, #8
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 f876 	bl	8006f8c <RCCEx_PLL2_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ea6:	e011      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eac:	3328      	adds	r3, #40	; 0x28
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f002 f91d 	bl	80070f0 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e006      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	4a67      	ldr	r2, [pc, #412]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6513      	str	r3, [r2, #80]	; 0x50
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	d053      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f1c:	d033      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f22:	d82c      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f28:	d02f      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004f2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f2e:	d826      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f34:	d02b      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004f36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f3a:	d820      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f40:	d012      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f46:	d81a      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d022      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d115      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f56:	3308      	adds	r3, #8
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 f816 	bl	8006f8c <RCCEx_PLL2_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f66:	e015      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6c:	3328      	adds	r3, #40	; 0x28
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4618      	mov	r0, r3
 8004f72:	f002 f8bd 	bl	80070f0 <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004f86:	bf00      	nop
 8004f88:	e004      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e002      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f9c:	4b38      	ldr	r3, [pc, #224]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004faa:	4a35      	ldr	r2, [pc, #212]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6513      	str	r3, [r2, #80]	; 0x50
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fd0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d058      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe6:	d033      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fec:	d82c      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d02f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff8:	d826      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004ffa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ffe:	d02b      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005004:	d820      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800500a:	d012      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800500c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005010:	d81a      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d022      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800501a:	d115      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005020:	3308      	adds	r3, #8
 8005022:	2101      	movs	r1, #1
 8005024:	4618      	mov	r0, r3
 8005026:	f001 ffb1 	bl	8006f8c <RCCEx_PLL2_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005030:	e015      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005036:	3328      	adds	r3, #40	; 0x28
 8005038:	2101      	movs	r1, #1
 800503a:	4618      	mov	r0, r3
 800503c:	f002 f858 	bl	80070f0 <RCCEx_PLL3_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005046:	e00a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800504e:	e006      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005050:	bf00      	nop
 8005052:	e004      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005054:	bf00      	nop
 8005056:	e002      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800505c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10e      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005076:	4a02      	ldr	r2, [pc, #8]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6593      	str	r3, [r2, #88]	; 0x58
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	d037      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050b6:	d00e      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80050b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050bc:	d816      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80050c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c6:	d111      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	4bc4      	ldr	r3, [pc, #784]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4ac3      	ldr	r2, [pc, #780]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80050d4:	e00f      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050da:	3308      	adds	r3, #8
 80050dc:	2101      	movs	r1, #1
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 ff54 	bl	8006f8c <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80050ea:	e004      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80050f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050fe:	4bb7      	ldr	r3, [pc, #732]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800510a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510c:	4ab3      	ldr	r2, [pc, #716]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800510e:	430b      	orrs	r3, r1
 8005110:	6513      	str	r3, [r2, #80]	; 0x50
 8005112:	e003      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005118:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800511c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800512c:	2300      	movs	r3, #0
 800512e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005136:	460b      	mov	r3, r1
 8005138:	4313      	orrs	r3, r2
 800513a:	d039      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005142:	2b03      	cmp	r3, #3
 8005144:	d81c      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005189 	.word	0x08005189
 8005150:	0800515d 	.word	0x0800515d
 8005154:	0800516b 	.word	0x0800516b
 8005158:	08005189 	.word	0x08005189
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4b9f      	ldr	r3, [pc, #636]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a9e      	ldr	r2, [pc, #632]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005168:	e00f      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516e:	3308      	adds	r3, #8
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 ff0a 	bl	8006f8c <RCCEx_PLL2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800517e:	e004      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005192:	4b92      	ldr	r3, [pc, #584]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	f023 0103 	bic.w	r1, r3, #3
 800519a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	4a8e      	ldr	r2, [pc, #568]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a2:	430b      	orrs	r3, r1
 80051a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051a6:	e003      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80051bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f000 8099 	beq.w	8005304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d2:	4b83      	ldr	r3, [pc, #524]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a82      	ldr	r2, [pc, #520]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051de:	f7fb fe7b 	bl	8000ed8 <HAL_GetTick>
 80051e2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e6:	e00b      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fb fe76 	bl	8000ed8 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b64      	cmp	r3, #100	; 0x64
 80051f6:	d903      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051fe:	e005      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005200:	4b77      	ldr	r3, [pc, #476]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0ed      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800520c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005210:	2b00      	cmp	r3, #0
 8005212:	d173      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005214:	4b71      	ldr	r3, [pc, #452]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005220:	4053      	eors	r3, r2
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d015      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800522a:	4b6c      	ldr	r3, [pc, #432]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005236:	4b69      	ldr	r3, [pc, #420]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	4a68      	ldr	r2, [pc, #416]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005242:	4b66      	ldr	r3, [pc, #408]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	4a65      	ldr	r2, [pc, #404]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800524e:	4a63      	ldr	r2, [pc, #396]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800525e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005262:	d118      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fb fe38 	bl	8000ed8 <HAL_GetTick>
 8005268:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800526c:	e00d      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fb fe33 	bl	8000ed8 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005278:	1ad2      	subs	r2, r2, r3
 800527a:	f241 3388 	movw	r3, #5000	; 0x1388
 800527e:	429a      	cmp	r2, r3
 8005280:	d903      	bls.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8005288:	e005      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800528a:	4b54      	ldr	r3, [pc, #336]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0eb      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800529a:	2b00      	cmp	r3, #0
 800529c:	d129      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	d10e      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80052b0:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c0:	091a      	lsrs	r2, r3, #4
 80052c2:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	4a45      	ldr	r2, [pc, #276]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6113      	str	r3, [r2, #16]
 80052cc:	e005      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80052ce:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	4a42      	ldr	r2, [pc, #264]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052d8:	6113      	str	r3, [r2, #16]
 80052da:	4b40      	ldr	r3, [pc, #256]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ea:	4a3c      	ldr	r2, [pc, #240]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6713      	str	r3, [r2, #112]	; 0x70
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80052fa:	e003      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005300:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f002 0301 	and.w	r3, r2, #1
 8005310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005314:	2300      	movs	r3, #0
 8005316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800531a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800531e:	460b      	mov	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	f000 808f 	beq.w	8005444 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532c:	2b28      	cmp	r3, #40	; 0x28
 800532e:	d871      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	0800541d 	.word	0x0800541d
 800533c:	08005415 	.word	0x08005415
 8005340:	08005415 	.word	0x08005415
 8005344:	08005415 	.word	0x08005415
 8005348:	08005415 	.word	0x08005415
 800534c:	08005415 	.word	0x08005415
 8005350:	08005415 	.word	0x08005415
 8005354:	08005415 	.word	0x08005415
 8005358:	080053e9 	.word	0x080053e9
 800535c:	08005415 	.word	0x08005415
 8005360:	08005415 	.word	0x08005415
 8005364:	08005415 	.word	0x08005415
 8005368:	08005415 	.word	0x08005415
 800536c:	08005415 	.word	0x08005415
 8005370:	08005415 	.word	0x08005415
 8005374:	08005415 	.word	0x08005415
 8005378:	080053ff 	.word	0x080053ff
 800537c:	08005415 	.word	0x08005415
 8005380:	08005415 	.word	0x08005415
 8005384:	08005415 	.word	0x08005415
 8005388:	08005415 	.word	0x08005415
 800538c:	08005415 	.word	0x08005415
 8005390:	08005415 	.word	0x08005415
 8005394:	08005415 	.word	0x08005415
 8005398:	0800541d 	.word	0x0800541d
 800539c:	08005415 	.word	0x08005415
 80053a0:	08005415 	.word	0x08005415
 80053a4:	08005415 	.word	0x08005415
 80053a8:	08005415 	.word	0x08005415
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005415 	.word	0x08005415
 80053b4:	08005415 	.word	0x08005415
 80053b8:	0800541d 	.word	0x0800541d
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005415 	.word	0x08005415
 80053cc:	08005415 	.word	0x08005415
 80053d0:	08005415 	.word	0x08005415
 80053d4:	08005415 	.word	0x08005415
 80053d8:	0800541d 	.word	0x0800541d
 80053dc:	58024400 	.word	0x58024400
 80053e0:	58024800 	.word	0x58024800
 80053e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ec:	3308      	adds	r3, #8
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f001 fdcb 	bl	8006f8c <RCCEx_PLL2_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053fc:	e00f      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005402:	3328      	adds	r3, #40	; 0x28
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fe72 	bl	80070f0 <RCCEx_PLL3_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800541c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005426:	4bbf      	ldr	r3, [pc, #764]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005434:	4abb      	ldr	r2, [pc, #748]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005436:	430b      	orrs	r3, r1
 8005438:	6553      	str	r3, [r2, #84]	; 0x54
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f002 0302 	and.w	r3, r2, #2
 8005450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800545a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d041      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546a:	2b05      	cmp	r3, #5
 800546c:	d824      	bhi.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	080054c1 	.word	0x080054c1
 8005478:	0800548d 	.word	0x0800548d
 800547c:	080054a3 	.word	0x080054a3
 8005480:	080054c1 	.word	0x080054c1
 8005484:	080054c1 	.word	0x080054c1
 8005488:	080054c1 	.word	0x080054c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005490:	3308      	adds	r3, #8
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f001 fd79 	bl	8006f8c <RCCEx_PLL2_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054a0:	e00f      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a6:	3328      	adds	r3, #40	; 0x28
 80054a8:	2101      	movs	r1, #1
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 fe20 	bl	80070f0 <RCCEx_PLL3_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054ca:	4b96      	ldr	r3, [pc, #600]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f023 0107 	bic.w	r1, r3, #7
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d8:	4a92      	ldr	r2, [pc, #584]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054da:	430b      	orrs	r3, r1
 80054dc:	6553      	str	r3, [r2, #84]	; 0x54
 80054de:	e003      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f002 0304 	and.w	r3, r2, #4
 80054f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005502:	460b      	mov	r3, r1
 8005504:	4313      	orrs	r3, r2
 8005506:	d044      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	2b05      	cmp	r3, #5
 8005512:	d825      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005569 	.word	0x08005569
 8005520:	08005535 	.word	0x08005535
 8005524:	0800554b 	.word	0x0800554b
 8005528:	08005569 	.word	0x08005569
 800552c:	08005569 	.word	0x08005569
 8005530:	08005569 	.word	0x08005569
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005538:	3308      	adds	r3, #8
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f001 fd25 	bl	8006f8c <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005548:	e00f      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554e:	3328      	adds	r3, #40	; 0x28
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fdcc 	bl	80070f0 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800555e:	e004      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005572:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	f023 0107 	bic.w	r1, r3, #7
 800557a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	4a68      	ldr	r2, [pc, #416]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005584:	430b      	orrs	r3, r1
 8005586:	6593      	str	r3, [r2, #88]	; 0x58
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800558e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f002 0320 	and.w	r3, r2, #32
 800559e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055a2:	2300      	movs	r3, #0
 80055a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d055      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055be:	d033      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80055c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c4:	d82c      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d02f      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d826      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80055d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d6:	d02b      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80055d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055dc:	d820      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80055de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e2:	d012      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d81a      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d022      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80055ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f2:	d115      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	3308      	adds	r3, #8
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fcc5 	bl	8006f8c <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005608:	e015      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560e:	3328      	adds	r3, #40	; 0x28
 8005610:	2102      	movs	r1, #2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fd6c 	bl	80070f0 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800561e:	e00a      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005626:	e006      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005628:	bf00      	nop
 800562a:	e004      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564e:	4a35      	ldr	r2, [pc, #212]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005650:	430b      	orrs	r3, r1
 8005652:	6553      	str	r3, [r2, #84]	; 0x54
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800565a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800565e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800566a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005674:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d058      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800568a:	d033      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800568c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005690:	d82c      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005696:	d02f      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d826      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800569e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a2:	d02b      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80056a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a8:	d820      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d012      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d81a      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d022      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d115      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c4:	3308      	adds	r3, #8
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fc5f 	bl	8006f8c <RCCEx_PLL2_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056d4:	e015      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056da:	3328      	adds	r3, #40	; 0x28
 80056dc:	2102      	movs	r1, #2
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fd06 	bl	80070f0 <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056ea:	e00a      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056f2:	e006      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80056f4:	bf00      	nop
 80056f6:	e004      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80056f8:	bf00      	nop
 80056fa:	e002      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10e      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800571a:	4a02      	ldr	r2, [pc, #8]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6593      	str	r3, [r2, #88]	; 0x58
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005722:	bf00      	nop
 8005724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800572c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800573c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005740:	2300      	movs	r3, #0
 8005742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005746:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d055      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005758:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800575c:	d033      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800575e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005762:	d82c      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005768:	d02f      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576e:	d826      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005770:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005774:	d02b      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005776:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800577a:	d820      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800577c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005780:	d012      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005786:	d81a      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d022      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800578c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005790:	d115      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005796:	3308      	adds	r3, #8
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fbf6 	bl	8006f8c <RCCEx_PLL2_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057a6:	e015      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ac:	3328      	adds	r3, #40	; 0x28
 80057ae:	2102      	movs	r1, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fc9d 	bl	80070f0 <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057bc:	e00a      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057c4:	e006      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80057c6:	bf00      	nop
 80057c8:	e004      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80057d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057dc:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80057e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ec:	4a9c      	ldr	r2, [pc, #624]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ee:	430b      	orrs	r3, r1
 80057f0:	6593      	str	r3, [r2, #88]	; 0x58
 80057f2:	e003      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 0308 	and.w	r3, r2, #8
 8005808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005812:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d01e      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582e:	3328      	adds	r3, #40	; 0x28
 8005830:	2102      	movs	r1, #2
 8005832:	4618      	mov	r0, r3
 8005834:	f001 fc5c 	bl	80070f0 <RCCEx_PLL3_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005844:	4b86      	ldr	r3, [pc, #536]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005854:	4a82      	ldr	r2, [pc, #520]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005856:	430b      	orrs	r3, r1
 8005858:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f002 0310 	and.w	r3, r2, #16
 8005866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800586a:	2300      	movs	r3, #0
 800586c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005870:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005874:	460b      	mov	r3, r1
 8005876:	4313      	orrs	r3, r2
 8005878:	d01e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005886:	d10c      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588c:	3328      	adds	r3, #40	; 0x28
 800588e:	2102      	movs	r1, #2
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fc2d 	bl	80070f0 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058a2:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b2:	4a6b      	ldr	r2, [pc, #428]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80058c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80058c6:	2300      	movs	r3, #0
 80058c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d03e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80058d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e0:	d022      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80058e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e6:	d81b      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d00b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80058f2:	e015      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f8:	3308      	adds	r3, #8
 80058fa:	2100      	movs	r1, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fb45 	bl	8006f8c <RCCEx_PLL2_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005908:	e00f      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590e:	3328      	adds	r3, #40	; 0x28
 8005910:	2102      	movs	r1, #2
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fbec 	bl	80070f0 <RCCEx_PLL3_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800591e:	e004      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005926:	e000      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005932:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005942:	4a47      	ldr	r2, [pc, #284]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005944:	430b      	orrs	r3, r1
 8005946:	6593      	str	r3, [r2, #88]	; 0x58
 8005948:	e003      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800594e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800595e:	673b      	str	r3, [r7, #112]	; 0x70
 8005960:	2300      	movs	r3, #0
 8005962:	677b      	str	r3, [r7, #116]	; 0x74
 8005964:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800597a:	d01f      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800597c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005980:	d818      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800598c:	d007      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800598e:	e011      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b33      	ldr	r3, [pc, #204]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a32      	ldr	r2, [pc, #200]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800599c:	e00f      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a2:	3328      	adds	r3, #40	; 0x28
 80059a4:	2101      	movs	r1, #1
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fba2 	bl	80070f0 <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80059b2:	e004      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059ba:	e000      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80059bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d6:	4a22      	ldr	r2, [pc, #136]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059d8:	430b      	orrs	r3, r1
 80059da:	6553      	str	r3, [r2, #84]	; 0x54
 80059dc:	e003      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80059f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059f4:	2300      	movs	r3, #0
 80059f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80059fc:	460b      	mov	r3, r1
 80059fe:	4313      	orrs	r3, r2
 8005a00:	d034      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	d007      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005a12:	e011      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a14:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4a11      	ldr	r2, [pc, #68]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a20:	e00e      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a26:	3308      	adds	r3, #8
 8005a28:	2102      	movs	r1, #2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 faae 	bl	8006f8c <RCCEx_PLL2_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a36:	e003      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10d      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a56:	4a02      	ldr	r2, [pc, #8]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a5c:	e006      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005a5e:	bf00      	nop
 8005a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005a78:	663b      	str	r3, [r7, #96]	; 0x60
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005a82:	460b      	mov	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	d00c      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8c:	3328      	adds	r3, #40	; 0x28
 8005a8e:	2102      	movs	r1, #2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fb2d 	bl	80070f0 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d036      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac8:	d018      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ace:	d811      	bhi.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad4:	d014      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ada:	d80b      	bhi.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae6:	4bb7      	ldr	r3, [pc, #732]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4ab6      	ldr	r2, [pc, #728]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b0e:	4bad      	ldr	r3, [pc, #692]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1c:	4aa9      	ldr	r2, [pc, #676]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	6553      	str	r3, [r2, #84]	; 0x54
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005b38:	653b      	str	r3, [r7, #80]	; 0x50
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005b42:	460b      	mov	r3, r1
 8005b44:	4313      	orrs	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b48:	4b9e      	ldr	r3, [pc, #632]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	4a9b      	ldr	r2, [pc, #620]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b78:	4b92      	ldr	r3, [pc, #584]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	4a8f      	ldr	r2, [pc, #572]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ba8:	4b86      	ldr	r3, [pc, #536]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	4a85      	ldr	r2, [pc, #532]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb2:	6113      	str	r3, [r2, #16]
 8005bb4:	4b83      	ldr	r3, [pc, #524]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bb6:	6919      	ldr	r1, [r3, #16]
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bc0:	4a80      	ldr	r2, [pc, #512]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005be2:	4b78      	ldr	r3, [pc, #480]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	4a74      	ldr	r2, [pc, #464]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005c02:	633b      	str	r3, [r7, #48]	; 0x30
 8005c04:	2300      	movs	r3, #0
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
 8005c08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	d00a      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c12:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	4a68      	ldr	r2, [pc, #416]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	2100      	movs	r1, #0
 8005c32:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d011      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c48:	3308      	adds	r3, #8
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 f99d 	bl	8006f8c <RCCEx_PLL2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	2100      	movs	r1, #0
 8005c72:	6239      	str	r1, [r7, #32]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	d011      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	3308      	adds	r3, #8
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f97d 	bl	8006f8c <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ca4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	61b9      	str	r1, [r7, #24]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d011      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc8:	3308      	adds	r3, #8
 8005cca:	2102      	movs	r1, #2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 f95d 	bl	8006f8c <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ce4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	6139      	str	r1, [r7, #16]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4313      	orrs	r3, r2
 8005d02:	d011      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d08:	3328      	adds	r3, #40	; 0x28
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 f9ef 	bl	80070f0 <RCCEx_PLL3_Config>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	2100      	movs	r1, #0
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d011      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d48:	3328      	adds	r3, #40	; 0x28
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 f9cf 	bl	80070f0 <RCCEx_PLL3_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	2100      	movs	r1, #0
 8005d72:	6039      	str	r1, [r7, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d011      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	3328      	adds	r3, #40	; 0x28
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f9af 	bl	80070f0 <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005d98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005da4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005da8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dc2:	bf00      	nop
 8005dc4:	58024400 	.word	0x58024400

08005dc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b090      	sub	sp, #64	; 0x40
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	f040 8094 	bne.w	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005de0:	4b9b      	ldr	r3, [pc, #620]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	f200 8087 	bhi.w	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e0d 	.word	0x08005e0d
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005ef9 	.word	0x08005ef9
 8005e08:	08005e85 	.word	0x08005e85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e0c:	4b90      	ldr	r3, [pc, #576]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e18:	d108      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 ff62 	bl	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e28:	f000 bc93 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e30:	f000 bc8f 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e34:	4b86      	ldr	r3, [pc, #536]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e40:	d108      	bne.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e42:	f107 0318 	add.w	r3, r7, #24
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fca6 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e50:	f000 bc7f 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e58:	f000 bc7b 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e5c:	4b7c      	ldr	r3, [pc, #496]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e68:	d108      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e6a:	f107 030c 	add.w	r3, r7, #12
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fde6 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e78:	f000 bc6b 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e80:	f000 bc67 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e84:	4b72      	ldr	r3, [pc, #456]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e8e:	4b70      	ldr	r3, [pc, #448]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea0:	4b6b      	ldr	r3, [pc, #428]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	4a6a      	ldr	r2, [pc, #424]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb2:	e01f      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eb4:	4b66      	ldr	r3, [pc, #408]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec0:	d106      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec8:	d102      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005eca:	4b63      	ldr	r3, [pc, #396]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ece:	e011      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ed0:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005edc:	d106      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee4:	d102      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ee6:	4b5d      	ldr	r3, [pc, #372]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eea:	e003      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005ef0:	f000 bc2f 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ef4:	f000 bc2d 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ef8:	4b59      	ldr	r3, [pc, #356]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005efc:	f000 bc29 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f04:	f000 bc25 	b.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005f10:	430b      	orrs	r3, r1
 8005f12:	f040 80a7 	bne.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f16:	4b4e      	ldr	r3, [pc, #312]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f26:	d054      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f2e:	f200 808b 	bhi.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f38:	f000 8083 	beq.w	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f42:	f200 8081 	bhi.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f4c:	d02f      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f54:	d878      	bhi.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f62:	d012      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005f64:	e070      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f66:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f72:	d107      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 feb5 	bl	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f82:	e3e6      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f88:	e3e3      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f98:	f107 0318 	add.w	r3, r7, #24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fbfb 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa6:	e3d4      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fac:	e3d1      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fae:	4b28      	ldr	r3, [pc, #160]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fba:	d107      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fd3d 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fca:	e3c2      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fd0:	e3bf      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d10c      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	4a16      	ldr	r2, [pc, #88]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006000:	e01e      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600e:	d106      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006016:	d102      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601c:	e010      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800601e:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800602a:	d106      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006032:	d102      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800603e:	e388      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006040:	e387      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006042:	4b07      	ldr	r3, [pc, #28]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006046:	e384      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800604c:	e381      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
 8006054:	03d09000 	.word	0x03d09000
 8006058:	003d0900 	.word	0x003d0900
 800605c:	017d7840 	.word	0x017d7840
 8006060:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006068:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800606c:	430b      	orrs	r3, r1
 800606e:	f040 809c 	bne.w	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006072:	4b9e      	ldr	r3, [pc, #632]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006076:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800607a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006082:	d054      	beq.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800608a:	f200 808b 	bhi.w	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006094:	f000 8083 	beq.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800609e:	f200 8081 	bhi.w	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060a8:	d02f      	beq.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060b0:	d878      	bhi.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060be:	d012      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80060c0:	e070      	b.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060c2:	4b8a      	ldr	r3, [pc, #552]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ce:	d107      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fe07 	bl	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060de:	e338      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e4:	e335      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060e6:	4b81      	ldr	r3, [pc, #516]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f2:	d107      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060f4:	f107 0318 	add.w	r3, r7, #24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fb4d 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006102:	e326      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006108:	e323      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800610a:	4b78      	ldr	r3, [pc, #480]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006116:	d107      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006118:	f107 030c 	add.w	r3, r7, #12
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fc8f 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006126:	e314      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800612c:	e311      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800612e:	4b6f      	ldr	r3, [pc, #444]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006136:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006138:	4b6c      	ldr	r3, [pc, #432]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b04      	cmp	r3, #4
 8006142:	d10c      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800614a:	4b68      	ldr	r3, [pc, #416]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	08db      	lsrs	r3, r3, #3
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	4a66      	ldr	r2, [pc, #408]	; (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615c:	e01e      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800615e:	4b63      	ldr	r3, [pc, #396]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616a:	d106      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006172:	d102      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006174:	4b5f      	ldr	r3, [pc, #380]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006178:	e010      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800617a:	4b5c      	ldr	r3, [pc, #368]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006186:	d106      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618e:	d102      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006190:	4b59      	ldr	r3, [pc, #356]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006194:	e002      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800619a:	e2da      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800619c:	e2d9      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800619e:	4b57      	ldr	r3, [pc, #348]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80061a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a2:	e2d6      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a8:	e2d3      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80061aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80061b2:	430b      	orrs	r3, r1
 80061b4:	f040 80a7 	bne.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80061b8:	4b4c      	ldr	r3, [pc, #304]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80061ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80061c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c8:	d055      	beq.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d0:	f200 8096 	bhi.w	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061da:	f000 8084 	beq.w	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061e4:	f200 808c 	bhi.w	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ee:	d030      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f6:	f200 8083 	bhi.w	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006206:	d012      	beq.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006208:	e07a      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800620a:	4b38      	ldr	r3, [pc, #224]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006216:	d107      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fd63 	bl	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006226:	e294      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800622c:	e291      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800622e:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623a:	d107      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623c:	f107 0318 	add.w	r3, r7, #24
 8006240:	4618      	mov	r0, r3
 8006242:	f000 faa9 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624a:	e282      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006250:	e27f      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800625a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625e:	d107      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fbeb 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800626e:	e270      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006274:	e26d      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800627e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006280:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b04      	cmp	r3, #4
 800628a:	d10c      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006292:	4b16      	ldr	r3, [pc, #88]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	f003 0303 	and.w	r3, r3, #3
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800629e:	fa22 f303 	lsr.w	r3, r2, r3
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a4:	e01e      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b2:	d106      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ba:	d102      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c0:	e010      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ce:	d106      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80062d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d6:	d102      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062d8:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062dc:	e002      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80062e2:	e236      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062e4:	e235      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ea:	e232      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062ec:	58024400 	.word	0x58024400
 80062f0:	03d09000 	.word	0x03d09000
 80062f4:	003d0900 	.word	0x003d0900
 80062f8:	017d7840 	.word	0x017d7840
 80062fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006304:	e225      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800630e:	430b      	orrs	r3, r1
 8006310:	f040 8085 	bne.w	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006314:	4b9c      	ldr	r3, [pc, #624]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006324:	d06b      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800632c:	d874      	bhi.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006334:	d056      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800633c:	d86c      	bhi.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006344:	d03b      	beq.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800634c:	d864      	bhi.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006354:	d021      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800635c:	d85c      	bhi.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636a:	d004      	beq.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800636c:	e054      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800636e:	f7fe fb75 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 8006372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006374:	e1ed      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006376:	4b84      	ldr	r3, [pc, #528]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800637e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006382:	d107      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006384:	f107 0318 	add.w	r3, r7, #24
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fa05 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006392:	e1de      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006398:	e1db      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800639a:	4b7b      	ldr	r3, [pc, #492]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a6:	d107      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fb47 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b6:	e1cc      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063bc:	e1c9      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063be:	4b72      	ldr	r3, [pc, #456]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d109      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063ca:	4b6f      	ldr	r3, [pc, #444]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	08db      	lsrs	r3, r3, #3
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	4a6d      	ldr	r2, [pc, #436]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80063d6:	fa22 f303 	lsr.w	r3, r2, r3
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063dc:	e1b9      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063e2:	e1b6      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80063e4:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f0:	d102      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80063f2:	4b67      	ldr	r3, [pc, #412]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f6:	e1ac      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fc:	e1a9      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063fe:	4b62      	ldr	r3, [pc, #392]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800640a:	d102      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800640c:	4b61      	ldr	r3, [pc, #388]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006410:	e19f      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006416:	e19c      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641c:	e199      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800641e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006422:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006426:	430b      	orrs	r3, r1
 8006428:	d173      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800642a:	4b57      	ldr	r3, [pc, #348]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006432:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800643a:	d02f      	beq.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006442:	d863      	bhi.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006450:	d012      	beq.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006452:	e05b      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006454:	4b4c      	ldr	r3, [pc, #304]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006460:	d107      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006462:	f107 0318 	add.w	r3, r7, #24
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f996 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006470:	e16f      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006476:	e16c      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006478:	4b43      	ldr	r3, [pc, #268]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006484:	d107      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006486:	f107 030c 	add.w	r3, r7, #12
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fad8 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006494:	e15d      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800649a:	e15a      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800649c:	4b3a      	ldr	r3, [pc, #232]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800649e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064a6:	4b38      	ldr	r3, [pc, #224]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d10c      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064b8:	4b33      	ldr	r3, [pc, #204]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	08db      	lsrs	r3, r3, #3
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	4a32      	ldr	r2, [pc, #200]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ca:	e01e      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064cc:	4b2e      	ldr	r3, [pc, #184]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d8:	d106      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e0:	d102      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064e2:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e6:	e010      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064e8:	4b27      	ldr	r3, [pc, #156]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f4:	d106      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fc:	d102      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064fe:	4b25      	ldr	r3, [pc, #148]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006502:	e002      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006508:	e123      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800650a:	e122      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006510:	e11f      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006516:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800651a:	430b      	orrs	r3, r1
 800651c:	d13c      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d012      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006536:	e023      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006544:	d107      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fbcc 	bl	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006554:	e0fd      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800655a:	e0fa      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006568:	d107      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800656a:	f107 0318 	add.w	r3, r7, #24
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f912 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006578:	e0eb      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800657e:	e0e8      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006584:	e0e5      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
 800658c:	03d09000 	.word	0x03d09000
 8006590:	003d0900 	.word	0x003d0900
 8006594:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80065a0:	430b      	orrs	r3, r1
 80065a2:	f040 8085 	bne.w	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80065a6:	4b6d      	ldr	r3, [pc, #436]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b6:	d06b      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065be:	d874      	bhi.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c6:	d056      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d86c      	bhi.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065d6:	d03b      	beq.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065de:	d864      	bhi.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e6:	d021      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ee:	d85c      	bhi.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065fc:	d004      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80065fe:	e054      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006600:	f000 f8b4 	bl	800676c <HAL_RCCEx_GetD3PCLK1Freq>
 8006604:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006606:	e0a4      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006608:	4b54      	ldr	r3, [pc, #336]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006614:	d107      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006616:	f107 0318 	add.w	r3, r7, #24
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f8bc 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006624:	e095      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800662a:	e092      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800662c:	4b4b      	ldr	r3, [pc, #300]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006638:	d107      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800663a:	f107 030c 	add.w	r3, r7, #12
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f9fe 	bl	8006a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006648:	e083      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664e:	e080      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006650:	4b42      	ldr	r3, [pc, #264]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b04      	cmp	r3, #4
 800665a:	d109      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800665c:	4b3f      	ldr	r3, [pc, #252]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	08db      	lsrs	r3, r3, #3
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	4a3e      	ldr	r2, [pc, #248]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800666e:	e070      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006674:	e06d      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006676:	4b39      	ldr	r3, [pc, #228]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006682:	d102      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006684:	4b37      	ldr	r3, [pc, #220]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006688:	e063      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800668e:	e060      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006690:	4b32      	ldr	r3, [pc, #200]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800669c:	d102      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800669e:	4b32      	ldr	r3, [pc, #200]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a2:	e056      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	e053      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ae:	e050      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80066b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80066b8:	430b      	orrs	r3, r1
 80066ba:	d148      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80066bc:	4b27      	ldr	r3, [pc, #156]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066cc:	d02a      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d838      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e2:	d00d      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80066e4:	e030      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066e6:	4b1d      	ldr	r3, [pc, #116]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f2:	d102      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066f8:	e02b      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fe:	e028      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006700:	4b16      	ldr	r3, [pc, #88]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800670c:	d107      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800670e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fae8 	bl	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671c:	e019      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006722:	e016      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006730:	d107      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006732:	f107 0318 	add.w	r3, r7, #24
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f82e 	bl	8006798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006740:	e007      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006746:	e004      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674c:	e001      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006754:	4618      	mov	r0, r3
 8006756:	3740      	adds	r7, #64	; 0x40
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	58024400 	.word	0x58024400
 8006760:	03d09000 	.word	0x03d09000
 8006764:	003d0900 	.word	0x003d0900
 8006768:	017d7840 	.word	0x017d7840

0800676c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006770:	f7fe f944 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8006774:	4602      	mov	r2, r0
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	4904      	ldr	r1, [pc, #16]	; (8006794 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006782:	5ccb      	ldrb	r3, [r1, r3]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800678c:	4618      	mov	r0, r3
 800678e:	bd80      	pop	{r7, pc}
 8006790:	58024400 	.word	0x58024400
 8006794:	0800732c 	.word	0x0800732c

08006798 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006798:	b480      	push	{r7}
 800679a:	b089      	sub	sp, #36	; 0x24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067a0:	4ba1      	ldr	r3, [pc, #644]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80067aa:	4b9f      	ldr	r3, [pc, #636]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	0b1b      	lsrs	r3, r3, #12
 80067b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067b6:	4b9c      	ldr	r3, [pc, #624]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067c2:	4b99      	ldr	r3, [pc, #612]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	fb02 f303 	mul.w	r3, r2, r3
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8111 	beq.w	8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	f000 8083 	beq.w	80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	f200 80a1 	bhi.w	8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d056      	beq.n	80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006802:	e099      	b.n	8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006804:	4b88      	ldr	r3, [pc, #544]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d02d      	beq.n	800686c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006810:	4b85      	ldr	r3, [pc, #532]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	4a84      	ldr	r2, [pc, #528]	; (8006a2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b7b      	ldr	r3, [pc, #492]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a03 	vldr	s12, [r7, #12]
 800684e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800686a:	e087      	b.n	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006892:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ae:	e065      	b.n	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c2:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068f2:	e043      	b.n	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006906:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006916:	ed97 6a03 	vldr	s12, [r7, #12]
 800691a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800691e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006936:	e021      	b.n	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694a:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695a:	ed97 6a03 	vldr	s12, [r7, #12]
 800695e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800696e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800697a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800697c:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	0a5b      	lsrs	r3, r3, #9
 8006982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006996:	edd7 6a07 	vldr	s13, [r7, #28]
 800699a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a2:	ee17 2a90 	vmov	r2, s15
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80069aa:	4b1f      	ldr	r3, [pc, #124]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	0c1b      	lsrs	r3, r3, #16
 80069b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d0:	ee17 2a90 	vmov	r2, s15
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069d8:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	0e1b      	lsrs	r3, r3, #24
 80069de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069fe:	ee17 2a90 	vmov	r2, s15
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a06:	e008      	b.n	8006a1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
}
 8006a1a:	bf00      	nop
 8006a1c:	3724      	adds	r7, #36	; 0x24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	58024400 	.word	0x58024400
 8006a2c:	03d09000 	.word	0x03d09000
 8006a30:	46000000 	.word	0x46000000
 8006a34:	4c742400 	.word	0x4c742400
 8006a38:	4a742400 	.word	0x4a742400
 8006a3c:	4bbebc20 	.word	0x4bbebc20

08006a40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a48:	4ba1      	ldr	r3, [pc, #644]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a52:	4b9f      	ldr	r3, [pc, #636]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	0d1b      	lsrs	r3, r3, #20
 8006a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a5e:	4b9c      	ldr	r3, [pc, #624]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a6a:	4b99      	ldr	r3, [pc, #612]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8111 	beq.w	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f000 8083 	beq.w	8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f200 80a1 	bhi.w	8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d056      	beq.n	8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006aaa:	e099      	b.n	8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b88      	ldr	r3, [pc, #544]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02d      	beq.n	8006b14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab8:	4b85      	ldr	r3, [pc, #532]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a84      	ldr	r2, [pc, #528]	; (8006cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	4b7b      	ldr	r3, [pc, #492]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b12:	e087      	b.n	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b6a      	ldr	r3, [pc, #424]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b56:	e065      	b.n	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b59      	ldr	r3, [pc, #356]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9a:	e043      	b.n	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b48      	ldr	r3, [pc, #288]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bde:	e021      	b.n	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b37      	ldr	r3, [pc, #220]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c24:	4b2a      	ldr	r3, [pc, #168]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4a:	ee17 2a90 	vmov	r2, s15
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c78:	ee17 2a90 	vmov	r2, s15
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c80:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	0e1b      	lsrs	r3, r3, #24
 8006c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca6:	ee17 2a90 	vmov	r2, s15
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cae:	e008      	b.n	8006cc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	609a      	str	r2, [r3, #8]
}
 8006cc2:	bf00      	nop
 8006cc4:	3724      	adds	r7, #36	; 0x24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	03d09000 	.word	0x03d09000
 8006cd8:	46000000 	.word	0x46000000
 8006cdc:	4c742400 	.word	0x4c742400
 8006ce0:	4a742400 	.word	0x4a742400
 8006ce4:	4bbebc20 	.word	0x4bbebc20

08006ce8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b089      	sub	sp, #36	; 0x24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cf0:	4ba0      	ldr	r3, [pc, #640]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006cfa:	4b9e      	ldr	r3, [pc, #632]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	091b      	lsrs	r3, r3, #4
 8006d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006d06:	4b9b      	ldr	r3, [pc, #620]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d10:	4b98      	ldr	r3, [pc, #608]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d14:	08db      	lsrs	r3, r3, #3
 8006d16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	fb02 f303 	mul.w	r3, r2, r3
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8111 	beq.w	8006f56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	f000 8083 	beq.w	8006e42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	f200 80a1 	bhi.w	8006e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d056      	beq.n	8006dfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006d50:	e099      	b.n	8006e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d52:	4b88      	ldr	r3, [pc, #544]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d02d      	beq.n	8006dba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d5e:	4b85      	ldr	r3, [pc, #532]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	4a83      	ldr	r2, [pc, #524]	; (8006f78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	ee07 3a90 	vmov	s15, r3
 8006d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d88:	4b7a      	ldr	r3, [pc, #488]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006db8:	e087      	b.n	8006eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006f80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dcc:	4b69      	ldr	r3, [pc, #420]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ddc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dfc:	e065      	b.n	8006eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006f84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e10:	4b58      	ldr	r3, [pc, #352]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e18:	ee07 3a90 	vmov	s15, r3
 8006e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e20:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e40:	e043      	b.n	8006eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e54:	4b47      	ldr	r3, [pc, #284]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e84:	e021      	b.n	8006eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006f80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e98:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006eca:	4b2a      	ldr	r3, [pc, #168]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	0a5b      	lsrs	r3, r3, #9
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef0:	ee17 2a90 	vmov	r2, s15
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1e:	ee17 2a90 	vmov	r2, s15
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006f26:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	0e1b      	lsrs	r3, r3, #24
 8006f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4c:	ee17 2a90 	vmov	r2, s15
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006f54:	e008      	b.n	8006f68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	609a      	str	r2, [r3, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	3724      	adds	r7, #36	; 0x24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	58024400 	.word	0x58024400
 8006f78:	03d09000 	.word	0x03d09000
 8006f7c:	46000000 	.word	0x46000000
 8006f80:	4c742400 	.word	0x4c742400
 8006f84:	4a742400 	.word	0x4a742400
 8006f88:	4bbebc20 	.word	0x4bbebc20

08006f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f9a:	4b53      	ldr	r3, [pc, #332]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d101      	bne.n	8006faa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e099      	b.n	80070de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006faa:	4b4f      	ldr	r3, [pc, #316]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a4e      	ldr	r2, [pc, #312]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb6:	f7f9 ff8f 	bl	8000ed8 <HAL_GetTick>
 8006fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fbc:	e008      	b.n	8006fd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fbe:	f7f9 ff8b 	bl	8000ed8 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e086      	b.n	80070de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fd0:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f0      	bne.n	8006fbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fdc:	4b42      	ldr	r3, [pc, #264]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	493f      	ldr	r1, [pc, #252]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	628b      	str	r3, [r1, #40]	; 0x28
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	025b      	lsls	r3, r3, #9
 8007002:	b29b      	uxth	r3, r3
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	3b01      	subs	r3, #1
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	3b01      	subs	r3, #1
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007020:	4931      	ldr	r1, [pc, #196]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007026:	4b30      	ldr	r3, [pc, #192]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	492d      	ldr	r1, [pc, #180]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007034:	4313      	orrs	r3, r2
 8007036:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007038:	4b2b      	ldr	r3, [pc, #172]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	f023 0220 	bic.w	r2, r3, #32
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	4928      	ldr	r1, [pc, #160]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007046:	4313      	orrs	r3, r2
 8007048:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800704a:	4b27      	ldr	r3, [pc, #156]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	4a26      	ldr	r2, [pc, #152]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007050:	f023 0310 	bic.w	r3, r3, #16
 8007054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007056:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800705a:	4b24      	ldr	r3, [pc, #144]	; (80070ec <RCCEx_PLL2_Config+0x160>)
 800705c:	4013      	ands	r3, r2
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	69d2      	ldr	r2, [r2, #28]
 8007062:	00d2      	lsls	r2, r2, #3
 8007064:	4920      	ldr	r1, [pc, #128]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007066:	4313      	orrs	r3, r2
 8007068:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007070:	f043 0310 	orr.w	r3, r3, #16
 8007074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800707c:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007088:	e00f      	b.n	80070aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d106      	bne.n	800709e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007090:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 8007096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800709a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800709c:	e005      	b.n	80070aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800709e:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a0e      	ldr	r2, [pc, #56]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 80070b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b6:	f7f9 ff0f 	bl	8000ed8 <HAL_GetTick>
 80070ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070bc:	e008      	b.n	80070d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070be:	f7f9 ff0b 	bl	8000ed8 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e006      	b.n	80070de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <RCCEx_PLL2_Config+0x15c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	ffff0007 	.word	0xffff0007

080070f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070fe:	4b53      	ldr	r3, [pc, #332]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d101      	bne.n	800710e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e099      	b.n	8007242 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800710e:	4b4f      	ldr	r3, [pc, #316]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a4e      	ldr	r2, [pc, #312]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711a:	f7f9 fedd 	bl	8000ed8 <HAL_GetTick>
 800711e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007120:	e008      	b.n	8007134 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007122:	f7f9 fed9 	bl	8000ed8 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e086      	b.n	8007242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007134:	4b45      	ldr	r3, [pc, #276]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f0      	bne.n	8007122 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007140:	4b42      	ldr	r3, [pc, #264]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	051b      	lsls	r3, r3, #20
 800714e:	493f      	ldr	r1, [pc, #252]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007150:	4313      	orrs	r3, r2
 8007152:	628b      	str	r3, [r1, #40]	; 0x28
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	3b01      	subs	r3, #1
 8007164:	025b      	lsls	r3, r3, #9
 8007166:	b29b      	uxth	r3, r3
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	3b01      	subs	r3, #1
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	3b01      	subs	r3, #1
 800717e:	061b      	lsls	r3, r3, #24
 8007180:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007184:	4931      	ldr	r1, [pc, #196]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007186:	4313      	orrs	r3, r2
 8007188:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800718a:	4b30      	ldr	r3, [pc, #192]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	492d      	ldr	r1, [pc, #180]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800719c:	4b2b      	ldr	r3, [pc, #172]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	4928      	ldr	r1, [pc, #160]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071ae:	4b27      	ldr	r3, [pc, #156]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	4a26      	ldr	r2, [pc, #152]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071be:	4b24      	ldr	r3, [pc, #144]	; (8007250 <RCCEx_PLL3_Config+0x160>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	69d2      	ldr	r2, [r2, #28]
 80071c6:	00d2      	lsls	r2, r2, #3
 80071c8:	4920      	ldr	r1, [pc, #128]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071ce:	4b1f      	ldr	r3, [pc, #124]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4a1e      	ldr	r2, [pc, #120]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071e0:	4b1a      	ldr	r3, [pc, #104]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a19      	ldr	r2, [pc, #100]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071ec:	e00f      	b.n	800720e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d106      	bne.n	8007202 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071f4:	4b15      	ldr	r3, [pc, #84]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	4a14      	ldr	r2, [pc, #80]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 80071fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007200:	e005      	b.n	800720e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007202:	4b12      	ldr	r3, [pc, #72]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	4a11      	ldr	r2, [pc, #68]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800720c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a0e      	ldr	r2, [pc, #56]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721a:	f7f9 fe5d 	bl	8000ed8 <HAL_GetTick>
 800721e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007220:	e008      	b.n	8007234 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007222:	f7f9 fe59 	bl	8000ed8 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e006      	b.n	8007242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <RCCEx_PLL3_Config+0x15c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	58024400 	.word	0x58024400
 8007250:	ffff0007 	.word	0xffff0007

08007254 <memset>:
 8007254:	4402      	add	r2, r0
 8007256:	4603      	mov	r3, r0
 8007258:	4293      	cmp	r3, r2
 800725a:	d100      	bne.n	800725e <memset+0xa>
 800725c:	4770      	bx	lr
 800725e:	f803 1b01 	strb.w	r1, [r3], #1
 8007262:	e7f9      	b.n	8007258 <memset+0x4>

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	; (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	; (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	; (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	; (80072a8 <__libc_init_array+0x44>)
 8007278:	f000 f826 	bl	80072c8 <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	0800734c 	.word	0x0800734c
 80072a0:	0800734c 	.word	0x0800734c
 80072a4:	0800734c 	.word	0x0800734c
 80072a8:	08007350 	.word	0x08007350

080072ac <memcpy>:
 80072ac:	440a      	add	r2, r1
 80072ae:	4291      	cmp	r1, r2
 80072b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b4:	d100      	bne.n	80072b8 <memcpy+0xc>
 80072b6:	4770      	bx	lr
 80072b8:	b510      	push	{r4, lr}
 80072ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c2:	4291      	cmp	r1, r2
 80072c4:	d1f9      	bne.n	80072ba <memcpy+0xe>
 80072c6:	bd10      	pop	{r4, pc}

080072c8 <_init>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr

080072d4 <_fini>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	bf00      	nop
 80072d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072da:	bc08      	pop	{r3}
 80072dc:	469e      	mov	lr, r3
 80072de:	4770      	bx	lr
