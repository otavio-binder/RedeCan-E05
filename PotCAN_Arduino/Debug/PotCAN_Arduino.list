
PotCAN_Arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08007050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  24000010  08007060  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000170  08007060  00020170  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011819  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e8f  00000000  00000000  0003189a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b53  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003382a  00000000  00000000  00035163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010609  00000000  00000000  0006898d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157d17  00000000  00000000  00078f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000407c  00000000  00000000  001d0cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001d4d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006fc4 	.word	0x08006fc4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08006fc4 	.word	0x08006fc4

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fbfd 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f873 	bl	8000400 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800031a:	f000 f8d7 	bl	80004cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 fa03 	bl	8000728 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000322:	f000 f905 	bl	8000530 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000326:	f000 f97d 	bl	8000624 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t valorPot = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	807b      	strh	r3, [r7, #2]

      if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 800032e:	482f      	ldr	r0, [pc, #188]	; (80003ec <main+0xe0>)
 8000330:	f002 fdd8 	bl	8002ee4 <HAL_FDCAN_Start>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <main+0x32>

    	  Error_Handler();
 800033a:	f000 fa67 	bl	800080c <Error_Handler>
      }

      if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK){
 800033e:	2200      	movs	r2, #0
 8000340:	2101      	movs	r1, #1
 8000342:	482a      	ldr	r0, [pc, #168]	; (80003ec <main+0xe0>)
 8000344:	f002 fe54 	bl	8002ff0 <HAL_FDCAN_ActivateNotification>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <main+0x46>
    	  Error_Handler();
 800034e:	f000 fa5d 	bl	800080c <Error_Handler>

      }


      // Configurando os parâmetros da mensagem
        TxHeader.Identifier = 0x14; // Identificador da mensagem
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <main+0xe4>)
 8000354:	2214      	movs	r2, #20
 8000356:	601a      	str	r2, [r3, #0]
        TxHeader.IdType = FDCAN_STANDARD_ID; // Tipo de identificador: Padrão
 8000358:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <main+0xe4>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
        TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Tipo de quadro: Quadro de dados
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <main+0xe4>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
        TxHeader.DataLength = FDCAN_DLC_BYTES_8; // Comprimento dos dados: 8 bytes
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <main+0xe4>)
 8000366:	2208      	movs	r2, #8
 8000368:	60da      	str	r2, [r3, #12]
        TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Indicador de estado de erro ativo
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <main+0xe4>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
        TxHeader.BitRateSwitch = FDCAN_BRS_OFF; // Troca de taxa de bits desativada
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <main+0xe4>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
        TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Formato CAN clasica
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <main+0xe4>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
        TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; // Sem controle de FIFO de evento de transmissão
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <main+0xe4>)
 800037e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000382:	61da      	str	r2, [r3, #28]
        TxHeader.MessageMarker = 0; // Marcador de mensagem
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <main+0xe4>)
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800038a:	481a      	ldr	r0, [pc, #104]	; (80003f4 <main+0xe8>)
 800038c:	f001 f8f6 	bl	800157c <HAL_ADC_Start>
		for(int i = 0; i<4; i = i+2){
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	e020      	b.n	80003d8 <main+0xcc>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800039a:	4816      	ldr	r0, [pc, #88]	; (80003f4 <main+0xe8>)
 800039c:	f001 f9b8 	bl	8001710 <HAL_ADC_PollForConversion>
		valorPot = HAL_ADC_GetValue(&hadc1);
 80003a0:	4814      	ldr	r0, [pc, #80]	; (80003f4 <main+0xe8>)
 80003a2:	f001 faa9 	bl	80018f8 <HAL_ADC_GetValue>
 80003a6:	4603      	mov	r3, r0
 80003a8:	807b      	strh	r3, [r7, #2]
		TxMailbox = valorPot;
 80003aa:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <main+0xec>)
 80003ac:	887b      	ldrh	r3, [r7, #2]
 80003ae:	8013      	strh	r3, [r2, #0]
		TxData[i] = TxMailbox & 0xFF;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <main+0xec>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	b2d9      	uxtb	r1, r3
 80003b6:	4a11      	ldr	r2, [pc, #68]	; (80003fc <main+0xf0>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	460a      	mov	r2, r1
 80003be:	701a      	strb	r2, [r3, #0]
		TxData[i+1] = (TxMailbox>>8) & 0xFF;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <main+0xec>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	0a1b      	lsrs	r3, r3, #8
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3301      	adds	r3, #1
 80003cc:	b2d1      	uxtb	r1, r2
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <main+0xf0>)
 80003d0:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i<4; i = i+2){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3302      	adds	r3, #2
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b03      	cmp	r3, #3
 80003dc:	dddb      	ble.n	8000396 <main+0x8a>
	  		}
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80003de:	4a07      	ldr	r2, [pc, #28]	; (80003fc <main+0xf0>)
 80003e0:	4903      	ldr	r1, [pc, #12]	; (80003f0 <main+0xe4>)
 80003e2:	4802      	ldr	r0, [pc, #8]	; (80003ec <main+0xe0>)
 80003e4:	f002 fda9 	bl	8002f3a <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_ADC_Start(&hadc1);
 80003e8:	e7cf      	b.n	800038a <main+0x7e>
 80003ea:	bf00      	nop
 80003ec:	2400009c 	.word	0x2400009c
 80003f0:	2400013c 	.word	0x2400013c
 80003f4:	2400002c 	.word	0x2400002c
 80003f8:	24000160 	.word	0x24000160
 80003fc:	24000164 	.word	0x24000164

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b09c      	sub	sp, #112	; 0x70
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040a:	224c      	movs	r2, #76	; 0x4c
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f006 fd9e 	bl	8006f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2220      	movs	r2, #32
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f006 fd98 	bl	8006f50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000420:	2002      	movs	r0, #2
 8000422:	f003 fa25 	bl	8003870 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <SystemClock_Config+0xc4>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000432:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <SystemClock_Config+0xc4>)
 8000434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <SystemClock_Config+0xc4>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000446:	bf00      	nop
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <SystemClock_Config+0xc4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000454:	d1f8      	bne.n	8000448 <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <SystemClock_Config+0xc8>)
 8000458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800045a:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <SystemClock_Config+0xc8>)
 800045c:	f023 0303 	bic.w	r3, r3, #3
 8000460:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000462:	2302      	movs	r3, #2
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000466:	2301      	movs	r3, #1
 8000468:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800046a:	2340      	movs	r3, #64	; 0x40
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800046e:	2300      	movs	r3, #0
 8000470:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	4618      	mov	r0, r3
 8000478:	f003 fa34 	bl	80038e4 <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000482:	f000 f9c3 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	233f      	movs	r3, #63	; 0x3f
 8000488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2101      	movs	r1, #1
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fdf4 	bl	8004098 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004b6:	f000 f9a9 	bl	800080c <Error_Handler>
  }
}
 80004ba:	bf00      	nop
 80004bc:	3770      	adds	r7, #112	; 0x70
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	58024800 	.word	0x58024800
 80004c8:	58024400 	.word	0x58024400

080004cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0ae      	sub	sp, #184	; 0xb8
 80004d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	22b8      	movs	r2, #184	; 0xb8
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f006 fd39 	bl	8006f50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 80004de:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 80004e2:	f04f 0300 	mov.w	r3, #0
 80004e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80004ee:	230c      	movs	r3, #12
 80004f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80004f2:	2305      	movs	r3, #5
 80004f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 24;
 80004f6:	2318      	movs	r3, #24
 80004f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80004fe:	23c0      	movs	r3, #192	; 0xc0
 8000500:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800050a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800050e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000510:	2300      	movs	r3, #0
 8000512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	4618      	mov	r0, r3
 800051a:	f004 f933 	bl	8004784 <HAL_RCCEx_PeriphCLKConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000524:	f000 f972 	bl	800080c <Error_Handler>
  }
}
 8000528:	bf00      	nop
 800052a:	37b8      	adds	r7, #184	; 0xb8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2224      	movs	r2, #36	; 0x24
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 fd01 	bl	8006f50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800054e:	4b32      	ldr	r3, [pc, #200]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000550:	4a32      	ldr	r2, [pc, #200]	; (800061c <MX_ADC1_Init+0xec>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000556:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <MX_ADC1_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <MX_ADC1_Init+0xe8>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000576:	2201      	movs	r2, #1
 8000578:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <MX_ADC1_Init+0xe8>)
 800057c:	2201      	movs	r2, #1
 800057e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b23      	ldr	r3, [pc, #140]	; (8000618 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_ADC1_Init+0xe8>)
 800059c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005b2:	f000 fddb 	bl	800116c <HAL_ADC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 f926 	bl	800080c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c8:	4619      	mov	r1, r3
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005cc:	f002 f870 	bl	80026b0 <HAL_ADCEx_MultiModeConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80005d6:	f000 f919 	bl	800080c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_ADC1_Init+0xf0>)
 80005dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005de:	2306      	movs	r3, #6
 80005e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ec:	2304      	movs	r3, #4
 80005ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000600:	f001 f988 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800060a:	f000 f8ff 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2400002c 	.word	0x2400002c
 800061c:	40022000 	.word	0x40022000
 8000620:	19200040 	.word	0x19200040

08000624 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800062a:	4b3d      	ldr	r3, [pc, #244]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800062c:	4a3d      	ldr	r2, [pc, #244]	; (8000724 <MX_FDCAN1_Init+0x100>)
 800062e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000630:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800063c:	4b38      	ldr	r3, [pc, #224]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800063e:	2201      	movs	r2, #1
 8000640:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000644:	2200      	movs	r2, #0
 8000646:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800064a:	2200      	movs	r2, #0
 800064c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000650:	2201      	movs	r2, #1
 8000652:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000654:	4b32      	ldr	r3, [pc, #200]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000656:	2202      	movs	r2, #2
 8000658:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800065c:	220d      	movs	r2, #13
 800065e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000662:	2202      	movs	r2, #2
 8000664:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000668:	2201      	movs	r2, #1
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800066e:	2203      	movs	r2, #3
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000674:	2204      	movs	r2, #4
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800067a:	2203      	movs	r2, #3
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000686:	2200      	movs	r2, #0
 8000688:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000692:	2201      	movs	r2, #1
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 8000698:	2204      	movs	r2, #4
 800069a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006cc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 80006d6:	f002 f9b1 	bl	8002a3c <HAL_FDCAN_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80006e0:	f000 f894 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

      sFilterConfig.IdType = FDCAN_STANDARD_ID; //Dados são tipos Standard
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
      sFilterConfig .FilterIndex = 0;    // �?ndice do filtro (0 a 127 para IdType padrão)
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterType = FDCAN_FILTER_MASK;   // Tipo de filtro: Máscara
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;  // Configuração do filtro para receber mensagens no FIFO0
 80006f0:	2301      	movs	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterID1 = 0x14;  // Identificador 1 do filtro (0 a 0x7FF para IdType padrão)
 80006f4:	2314      	movs	r3, #20
 80006f6:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterID2 = 0x14; // Identificador 2 do filtro (Ignorado para mensagens padrão)
 80006f8:	2314      	movs	r3, #20
 80006fa:	617b      	str	r3, [r7, #20]
      sFilterConfig.RxBufferIndex = 0;  // �?ndice do buffer de recepção (0 a 63)
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
      sFilterConfig.IsCalibrationMsg = 0;// Não é uma mensagem de calibração se for 1 é uma msg de calibração
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

      if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_FDCAN1_Init+0xfc>)
 800070a:	f002 fb75 	bl	8002df8 <HAL_FDCAN_ConfigFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_FDCAN1_Init+0xf4>
    	  Error_Handler();
 8000714:	f000 f87a 	bl	800080c <Error_Handler>
      }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2400009c 	.word	0x2400009c
 8000724:	4000a000 	.word	0x4000a000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0xdc>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <MX_GPIO_Init+0xdc>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0xdc>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0xdc>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	4a28      	ldr	r2, [pc, #160]	; (8000804 <MX_GPIO_Init+0xdc>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_GPIO_Init+0xdc>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_GPIO_Init+0xdc>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a20      	ldr	r2, [pc, #128]	; (8000804 <MX_GPIO_Init+0xdc>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_GPIO_Init+0xdc>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_GPIO_Init+0xdc>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <MX_GPIO_Init+0xdc>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_GPIO_Init+0xdc>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_GPIO_Init+0xdc>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	4a11      	ldr	r2, [pc, #68]	; (8000804 <MX_GPIO_Init+0xdc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_GPIO_Init+0xdc>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <MX_GPIO_Init+0xe0>)
 80007da:	f003 f82f 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xe0>)
 80007f6:	f002 fe79 	bl	80034ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58024400 	.word	0x58024400
 8000808:	58021800 	.word	0x58021800

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	4801      	ldr	r0, [pc, #4]	; (8000820 <Error_Handler+0x14>)
 800081a:	f003 f80f 	bl	800383c <HAL_GPIO_WritePin>
 800081e:	e7f9      	b.n	8000814 <Error_Handler+0x8>
 8000820:	58021800 	.word	0x58021800

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x30>)
 800082c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000830:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x30>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x30>)
 800083c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	58024400 	.word	0x58024400

08000858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_ADC_MspInit+0x80>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12a      	bne.n	80008d0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_ADC_MspInit+0x84>)
 800087c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000880:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_ADC_MspInit+0x84>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_ADC_MspInit+0x84>)
 800088c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_ADC_MspInit+0x84>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_ADC_MspInit+0x84>)
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_ADC_MspInit+0x84>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008bc:	2303      	movs	r3, #3
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_ADC_MspInit+0x88>)
 80008cc:	f002 fe0e 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40022000 	.word	0x40022000
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58021400 	.word	0x58021400

080008e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1a      	ldr	r2, [pc, #104]	; (800096c <HAL_FDCAN_MspInit+0x88>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12e      	bne.n	8000964 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <HAL_FDCAN_MspInit+0x8c>)
 8000908:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800090c:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_FDCAN_MspInit+0x8c>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_FDCAN_MspInit+0x8c>)
 8000918:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800091c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_FDCAN_MspInit+0x8c>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_FDCAN_MspInit+0x8c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_FDCAN_MspInit+0x8c>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000942:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000954:	2309      	movs	r3, #9
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_FDCAN_MspInit+0x90>)
 8000960:	f002 fdc4 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	4000a000 	.word	0x4000a000
 8000970:	58024400 	.word	0x58024400
 8000974:	58020000 	.word	0x58020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f916 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <SystemInit+0xd0>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <SystemInit+0xd0>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <SystemInit+0xd4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 030f 	and.w	r3, r3, #15
 80009e8:	2b06      	cmp	r3, #6
 80009ea:	d807      	bhi.n	80009fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <SystemInit+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f023 030f 	bic.w	r3, r3, #15
 80009f4:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <SystemInit+0xd4>)
 80009f6:	f043 0307 	orr.w	r3, r3, #7
 80009fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <SystemInit+0xd8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <SystemInit+0xd8>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <SystemInit+0xd8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <SystemInit+0xd8>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4924      	ldr	r1, [pc, #144]	; (8000aa4 <SystemInit+0xd8>)
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <SystemInit+0xdc>)
 8000a16:	4013      	ands	r3, r2
 8000a18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <SystemInit+0xd4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <SystemInit+0xd4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f023 030f 	bic.w	r3, r3, #15
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <SystemInit+0xd4>)
 8000a30:	f043 0307 	orr.w	r3, r3, #7
 8000a34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <SystemInit+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <SystemInit+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <SystemInit+0xd8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <SystemInit+0xd8>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	; (8000aac <SystemInit+0xe0>)
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SystemInit+0xd8>)
 8000a50:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <SystemInit+0xe4>)
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <SystemInit+0xd8>)
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <SystemInit+0xe8>)
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <SystemInit+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <SystemInit+0xd8>)
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <SystemInit+0xe8>)
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <SystemInit+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <SystemInit+0xd8>)
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <SystemInit+0xe8>)
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <SystemInit+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <SystemInit+0xd8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <SystemInit+0xd8>)
 8000a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <SystemInit+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <SystemInit+0xec>)
 8000a8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	52002000 	.word	0x52002000
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000aac:	02020200 	.word	0x02020200
 8000ab0:	01ff0000 	.word	0x01ff0000
 8000ab4:	01010280 	.word	0x01010280
 8000ab8:	52004000 	.word	0x52004000

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac0:	f7ff ff84 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f006 fa39 	bl	8006f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fc0d 	bl	800030c <main>
  bx  lr
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000af8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000afc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b00:	08007050 	.word	0x08007050
  ldr r2, =_sbss
 8000b04:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b08:	24000170 	.word	0x24000170

08000b0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC3_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f001 ff5e 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b1c:	f003 fc72 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_Init+0x68>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	f003 030f 	and.w	r3, r3, #15
 8000b2c:	4913      	ldr	r1, [pc, #76]	; (8000b7c <HAL_Init+0x6c>)
 8000b2e:	5ccb      	ldrb	r3, [r1, r3]
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	fa22 f303 	lsr.w	r3, r2, r3
 8000b38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_Init+0x68>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_Init+0x6c>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_Init+0x70>)
 8000b52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_Init+0x74>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f814 	bl	8000b88 <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e002      	b.n	8000b70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6a:	f7ff fe5b 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	08007028 	.word	0x08007028
 8000b80:	24000004 	.word	0x24000004
 8000b84:	24000000 	.word	0x24000000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_InitTick+0x60>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e021      	b.n	8000be0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_InitTick+0x64>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_InitTick+0x60>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 ff35 	bl	8002a22 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f001 ff0d 	bl	80029ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_InitTick+0x68>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2400000c 	.word	0x2400000c
 8000bec:	24000000 	.word	0x24000000
 8000bf0:	24000008 	.word	0x24000008

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2400000c 	.word	0x2400000c
 8000c18:	2400016c 	.word	0x2400016c

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2400016c 	.word	0x2400016c

08000c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3360      	adds	r3, #96	; 0x60
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <LL_ADC_SetOffset+0x60>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d10b      	bne.n	8000cd8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000cd6:	e00b      	b.n	8000cf0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	58026000 	.word	0x58026000

08000d00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3360      	adds	r3, #96	; 0x60
 8000d0e:	461a      	mov	r2, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	611a      	str	r2, [r3, #16]
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d00e      	beq.n	8000d92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3360      	adds	r3, #96	; 0x60
 8000d78:	461a      	mov	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]
  }
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	58026000 	.word	0x58026000

08000da4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <LL_ADC_SetOffsetSaturation+0x40>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d10e      	bne.n	8000dd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3360      	adds	r3, #96	; 0x60
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	371c      	adds	r7, #28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	58026000 	.word	0x58026000

08000de8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <LL_ADC_SetOffsetSign+0x40>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d10e      	bne.n	8000e1a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3360      	adds	r3, #96	; 0x60
 8000e00:	461a      	mov	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	58026000 	.word	0x58026000

08000e2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3360      	adds	r3, #96	; 0x60
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <LL_ADC_SetOffsetState+0x50>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d108      	bne.n	8000e60 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8000e5e:	e007      	b.n	8000e70 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58026000 	.word	0x58026000

08000e80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b087      	sub	sp, #28
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3330      	adds	r3, #48	; 0x30
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	211f      	movs	r1, #31
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	401a      	ands	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0e9b      	lsrs	r3, r3, #26
 8000ede:	f003 011f 	and.w	r1, r3, #31
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b087      	sub	sp, #28
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3314      	adds	r3, #20
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	0e5b      	lsrs	r3, r3, #25
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	0d1b      	lsrs	r3, r3, #20
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	2107      	movs	r1, #7
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	401a      	ands	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	0d1b      	lsrs	r3, r3, #20
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <LL_ADC_SetChannelSingleDiff+0x78>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d115      	bne.n	8000f94 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0318 	and.w	r3, r3, #24
 8000f7e:	4914      	ldr	r1, [pc, #80]	; (8000fd0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8000f80:	40d9      	lsrs	r1, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	400b      	ands	r3, r1
 8000f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000f92:	e014      	b.n	8000fbe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0318 	and.w	r3, r3, #24
 8000faa:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8000fac:	40d9      	lsrs	r1, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	58026000 	.word	0x58026000
 8000fd0:	000fffff 	.word	0x000fffff

08000fd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <LL_ADC_DisableDeepPowerDown+0x20>)
 800101a:	4013      	ands	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6093      	str	r3, [r2, #8]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	5fffffc0 	.word	0x5fffffc0

08001030 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001044:	d101      	bne.n	800104a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <LL_ADC_EnableInternalRegulator+0x24>)
 8001066:	4013      	ands	r3, r2
 8001068:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	6fffffc0 	.word	0x6fffffc0

08001080 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001094:	d101      	bne.n	800109a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LL_ADC_Enable+0x24>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	f043 0201 	orr.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	7fffffc0 	.word	0x7fffffc0

080010d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_IsEnabled+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_IsEnabled+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <LL_ADC_REG_StartConversion+0x24>)
 8001106:	4013      	ands	r3, r2
 8001108:	f043 0204 	orr.w	r2, r3, #4
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	7fffffc0 	.word	0x7fffffc0

08001120 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b04      	cmp	r3, #4
 8001132:	d101      	bne.n	8001138 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b08      	cmp	r3, #8
 8001158:	d101      	bne.n	800115e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e1ee      	b.n	8001564 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fb5f 	bl	8000858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff3f 	bl	8001030 <LL_ADC_IsDeepPowerDownEnabled>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff25 	bl	800100c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff5a 	bl	8001080 <LL_ADC_IsInternalRegulatorEnabled>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d114      	bne.n	80011fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff3e 	bl	8001058 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011dc:	4b8e      	ldr	r3, [pc, #568]	; (8001418 <HAL_ADC_Init+0x2ac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	4a8e      	ldr	r2, [pc, #568]	; (800141c <HAL_ADC_Init+0x2b0>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	3301      	adds	r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011ee:	e002      	b.n	80011f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f9      	bne.n	80011f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff3d 	bl	8001080 <LL_ADC_IsInternalRegulatorEnabled>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10d      	bne.n	8001228 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f043 0210 	orr.w	r2, r3, #16
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff77 	bl	8001120 <LL_ADC_REG_IsConversionOngoing>
 8001232:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8188 	bne.w	8001552 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 8184 	bne.w	8001552 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001252:	f043 0202 	orr.w	r2, r3, #2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff36 	bl	80010d0 <LL_ADC_IsEnabled>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d136      	bne.n	80012d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_ADC_Init+0x2b4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d004      	beq.n	800127e <HAL_ADC_Init+0x112>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a6a      	ldr	r2, [pc, #424]	; (8001424 <HAL_ADC_Init+0x2b8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10e      	bne.n	800129c <HAL_ADC_Init+0x130>
 800127e:	4868      	ldr	r0, [pc, #416]	; (8001420 <HAL_ADC_Init+0x2b4>)
 8001280:	f7ff ff26 	bl	80010d0 <LL_ADC_IsEnabled>
 8001284:	4604      	mov	r4, r0
 8001286:	4867      	ldr	r0, [pc, #412]	; (8001424 <HAL_ADC_Init+0x2b8>)
 8001288:	f7ff ff22 	bl	80010d0 <LL_ADC_IsEnabled>
 800128c:	4603      	mov	r3, r0
 800128e:	4323      	orrs	r3, r4
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e008      	b.n	80012ae <HAL_ADC_Init+0x142>
 800129c:	4862      	ldr	r0, [pc, #392]	; (8001428 <HAL_ADC_Init+0x2bc>)
 800129e:	f7ff ff17 	bl	80010d0 <LL_ADC_IsEnabled>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d012      	beq.n	80012d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <HAL_ADC_Init+0x2b4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d004      	beq.n	80012c6 <HAL_ADC_Init+0x15a>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a58      	ldr	r2, [pc, #352]	; (8001424 <HAL_ADC_Init+0x2b8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x15e>
 80012c6:	4a59      	ldr	r2, [pc, #356]	; (800142c <HAL_ADC_Init+0x2c0>)
 80012c8:	e000      	b.n	80012cc <HAL_ADC_Init+0x160>
 80012ca:	4a59      	ldr	r2, [pc, #356]	; (8001430 <HAL_ADC_Init+0x2c4>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4610      	mov	r0, r2
 80012d4:	f7ff fcae 	bl	8000c34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_ADC_Init+0x2bc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d129      	bne.n	8001336 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7e5b      	ldrb	r3, [r3, #25]
 80012e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80012ec:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80012f2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d013      	beq.n	8001324 <HAL_ADC_Init+0x1b8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d00d      	beq.n	8001320 <HAL_ADC_Init+0x1b4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b1c      	cmp	r3, #28
 800130a:	d007      	beq.n	800131c <HAL_ADC_Init+0x1b0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b18      	cmp	r3, #24
 8001312:	d101      	bne.n	8001318 <HAL_ADC_Init+0x1ac>
 8001314:	2318      	movs	r3, #24
 8001316:	e006      	b.n	8001326 <HAL_ADC_Init+0x1ba>
 8001318:	2300      	movs	r3, #0
 800131a:	e004      	b.n	8001326 <HAL_ADC_Init+0x1ba>
 800131c:	2310      	movs	r3, #16
 800131e:	e002      	b.n	8001326 <HAL_ADC_Init+0x1ba>
 8001320:	2308      	movs	r3, #8
 8001322:	e000      	b.n	8001326 <HAL_ADC_Init+0x1ba>
 8001324:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001326:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	e00e      	b.n	8001354 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7e5b      	ldrb	r3, [r3, #25]
 800133a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001340:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001346:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	3b01      	subs	r3, #1
 8001364:	045b      	lsls	r3, r3, #17
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <HAL_ADC_Init+0x2bc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d115      	bne.n	80013be <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_ADC_Init+0x2c8>)
 800139a:	4013      	ands	r3, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	69b9      	ldr	r1, [r7, #24]
 80013a2:	430b      	orrs	r3, r1
 80013a4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	e009      	b.n	80013d2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_ADC_Init+0x2cc>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	430b      	orrs	r3, r1
 80013d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fea2 	bl	8001120 <LL_ADC_REG_IsConversionOngoing>
 80013dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff feaf 	bl	8001146 <LL_ADC_INJ_IsConversionOngoing>
 80013e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 808e 	bne.w	800150e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f040 808a 	bne.w	800150e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_ADC_Init+0x2bc>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d11b      	bne.n	800143c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001410:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	e018      	b.n	800144a <HAL_ADC_Init+0x2de>
 8001418:	24000000 	.word	0x24000000
 800141c:	053e2d63 	.word	0x053e2d63
 8001420:	40022000 	.word	0x40022000
 8001424:	40022100 	.word	0x40022100
 8001428:	58026000 	.word	0x58026000
 800142c:	40022300 	.word	0x40022300
 8001430:	58026300 	.word	0x58026300
 8001434:	fff04007 	.word	0xfff04007
 8001438:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_ADC_Init+0x400>)
 8001452:	4013      	ands	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	69b9      	ldr	r1, [r7, #24]
 800145a:	430b      	orrs	r3, r1
 800145c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001464:	2b01      	cmp	r3, #1
 8001466:	d137      	bne.n	80014d8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <HAL_ADC_Init+0x404>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d116      	bne.n	80014a6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_ADC_Init+0x408>)
 8001480:	4013      	ands	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800148a:	4311      	orrs	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001490:	4311      	orrs	r1, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001496:	430a      	orrs	r2, r1
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	e020      	b.n	80014e8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	4b32      	ldr	r3, [pc, #200]	; (8001578 <HAL_ADC_Init+0x40c>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014b4:	3a01      	subs	r2, #1
 80014b6:	0411      	lsls	r1, r2, #16
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80014c8:	430a      	orrs	r2, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	e007      	b.n	80014e8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_ADC_Init+0x404>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d002      	beq.n	800150e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 ffbd 	bl	8002488 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10c      	bne.n	8001530 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f023 010f 	bic.w	r1, r3, #15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
 800152e:	e007      	b.n	8001540 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020f 	bic.w	r2, r2, #15
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	f023 0303 	bic.w	r3, r3, #3
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	661a      	str	r2, [r3, #96]	; 0x60
 8001550:	e007      	b.n	8001562 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	f043 0210 	orr.w	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001562:	7ffb      	ldrb	r3, [r7, #31]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	ffffbffc 	.word	0xffffbffc
 8001570:	58026000 	.word	0x58026000
 8001574:	fc00f81f 	.word	0xfc00f81f
 8001578:	fc00f81e 	.word	0xfc00f81e

0800157c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_ADC_Start+0x180>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d004      	beq.n	8001598 <HAL_ADC_Start+0x1c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <HAL_ADC_Start+0x184>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_ADC_Start+0x20>
 8001598:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_ADC_Start+0x188>)
 800159a:	e000      	b.n	800159e <HAL_ADC_Start+0x22>
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_ADC_Start+0x18c>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd18 	bl	8000fd4 <LL_ADC_GetMultimode>
 80015a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fdb8 	bl	8001120 <LL_ADC_REG_IsConversionOngoing>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 809a 	bne.w	80016ec <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Start+0x4a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e095      	b.n	80016f2 <HAL_ADC_Start+0x176>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fed0 	bl	8002374 <ADC_Enable>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8081 	bne.w	80016e2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <HAL_ADC_Start+0x190>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a42      	ldr	r2, [pc, #264]	; (8001700 <HAL_ADC_Start+0x184>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d002      	beq.n	8001600 <HAL_ADC_Start+0x84>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	e000      	b.n	8001602 <HAL_ADC_Start+0x86>
 8001600:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_ADC_Start+0x180>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	4293      	cmp	r3, r2
 8001608:	d002      	beq.n	8001610 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001628:	d106      	bne.n	8001638 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800162e:	f023 0206 	bic.w	r2, r3, #6
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	665a      	str	r2, [r3, #100]	; 0x64
 8001636:	e002      	b.n	800163e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	221c      	movs	r2, #28
 8001644:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_ADC_Start+0x184>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d002      	beq.n	800165e <HAL_ADC_Start+0xe2>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	e000      	b.n	8001660 <HAL_ADC_Start+0xe4>
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_ADC_Start+0x180>)
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4293      	cmp	r3, r2
 8001666:	d008      	beq.n	800167a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d002      	beq.n	800167a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b09      	cmp	r3, #9
 8001678:	d114      	bne.n	80016a4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001690:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd2b 	bl	80010f8 <LL_ADC_REG_StartConversion>
 80016a2:	e025      	b.n	80016f0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_ADC_Start+0x184>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d002      	beq.n	80016c0 <HAL_ADC_Start+0x144>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	e000      	b.n	80016c2 <HAL_ADC_Start+0x146>
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_ADC_Start+0x180>)
 80016c2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00f      	beq.n	80016f0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	661a      	str	r2, [r3, #96]	; 0x60
 80016e0:	e006      	b.n	80016f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80016ea:	e001      	b.n	80016f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ec:	2302      	movs	r3, #2
 80016ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000
 8001700:	40022100 	.word	0x40022100
 8001704:	40022300 	.word	0x40022300
 8001708:	58026300 	.word	0x58026300
 800170c:	fffff0fe 	.word	0xfffff0fe

08001710 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <HAL_ADC_PollForConversion+0x1d8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d004      	beq.n	800172e <HAL_ADC_PollForConversion+0x1e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a70      	ldr	r2, [pc, #448]	; (80018ec <HAL_ADC_PollForConversion+0x1dc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_ADC_PollForConversion+0x22>
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_ADC_PollForConversion+0x1e0>)
 8001730:	e000      	b.n	8001734 <HAL_ADC_PollForConversion+0x24>
 8001732:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_ADC_PollForConversion+0x1e4>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc4d 	bl	8000fd4 <LL_ADC_GetMultimode>
 800173a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d102      	bne.n	800174a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001744:	2308      	movs	r3, #8
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	e037      	b.n	80017ba <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d002      	beq.n	800175c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b09      	cmp	r3, #9
 800175a:	d111      	bne.n	8001780 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f043 0220 	orr.w	r2, r3, #32
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0b1      	b.n	80018de <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800177a:	2304      	movs	r3, #4
 800177c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800177e:	e01c      	b.n	80017ba <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_ADC_PollForConversion+0x1d8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_ADC_PollForConversion+0x84>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_ADC_PollForConversion+0x1dc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_ADC_PollForConversion+0x88>
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_ADC_PollForConversion+0x1e0>)
 8001796:	e000      	b.n	800179a <HAL_ADC_PollForConversion+0x8a>
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_ADC_PollForConversion+0x1e4>)
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fc28 	bl	8000ff0 <LL_ADC_GetMultiDMATransfer>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017aa:	f043 0220 	orr.w	r2, r3, #32
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e093      	b.n	80018de <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017ba:	f7ff fa2f 	bl	8000c1c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017c0:	e021      	b.n	8001806 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d01d      	beq.n	8001806 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017ca:	f7ff fa27 	bl	8000c1c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d302      	bcc.n	80017e0 <HAL_ADC_PollForConversion+0xd0>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d112      	bne.n	8001806 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10b      	bne.n	8001806 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	f043 0204 	orr.w	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e06b      	b.n	80018de <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0d6      	beq.n	80017c2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fb2b 	bl	8000e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01c      	beq.n	800186a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7e5b      	ldrb	r3, [r3, #25]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b08      	cmp	r3, #8
 8001844:	d111      	bne.n	800186a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_ADC_PollForConversion+0x1dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d002      	beq.n	800187a <HAL_ADC_PollForConversion+0x16a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e000      	b.n	800187c <HAL_ADC_PollForConversion+0x16c>
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_ADC_PollForConversion+0x1d8>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4293      	cmp	r3, r2
 8001882:	d008      	beq.n	8001896 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d002      	beq.n	8001896 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b09      	cmp	r3, #9
 8001894:	d104      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e00c      	b.n	80018ba <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_ADC_PollForConversion+0x1dc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d002      	beq.n	80018b0 <HAL_ADC_PollForConversion+0x1a0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e000      	b.n	80018b2 <HAL_ADC_PollForConversion+0x1a2>
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_ADC_PollForConversion+0x1d8>)
 80018b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d104      	bne.n	80018ca <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e008      	b.n	80018dc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	220c      	movs	r2, #12
 80018da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40022100 	.word	0x40022100
 80018f0:	40022300 	.word	0x40022300
 80018f4:	58026300 	.word	0x58026300

080018f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b0b9      	sub	sp, #228	; 0xe4
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800192e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4aab      	ldr	r2, [pc, #684]	; (8001be4 <HAL_ADC_ConfigChannel+0x2d0>)
 8001936:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x34>
 8001942:	2302      	movs	r3, #2
 8001944:	f000 bcfe 	b.w	8002344 <HAL_ADC_ConfigChannel+0xa30>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fbe3 	bl	8001120 <LL_ADC_REG_IsConversionOngoing>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 84e2 	bne.w	8002326 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db38      	blt.n	80019dc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a9e      	ldr	r2, [pc, #632]	; (8001be8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d033      	beq.n	80019dc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x7e>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	2201      	movs	r2, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	e01d      	b.n	80019ce <HAL_ADC_ConfigChannel+0xba>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e004      	b.n	80019c4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80019ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2201      	movs	r2, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	69d1      	ldr	r1, [r2, #28]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	f7ff fa5c 	bl	8000ea6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fb94 	bl	8001120 <LL_ADC_REG_IsConversionOngoing>
 80019f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fba0 	bl	8001146 <LL_ADC_INJ_IsConversionOngoing>
 8001a06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 8270 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 826b 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f7ff fa67 	bl	8000efe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6c      	ldr	r2, [pc, #432]	; (8001be8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10d      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001a54:	e032      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a56:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_ADC_ConfigChannel+0x2d8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a62:	d10b      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x168>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	e01d      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1a4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x18e>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	e00a      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1a4>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d048      	beq.n	8001b56 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6919      	ldr	r1, [r3, #16]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ad4:	f7ff f8e2 	bl	8000c9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d119      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff f97a 	bl	8000de8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6919      	ldr	r1, [r3, #16]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d102      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1f8>
 8001b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0a:	e000      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x1fa>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f7ff f948 	bl	8000da4 <LL_ADC_SetOffsetSaturation>
 8001b14:	e1ee      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x21a>
 8001b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x21c>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	461a      	mov	r2, r3
 8001b32:	f7ff f915 	bl	8000d60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	7e1b      	ldrb	r3, [r3, #24]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x238>
 8001b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x23a>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7ff f8ec 	bl	8000d2c <LL_ADC_SetDataRightShift>
 8001b54:	e1ce      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <HAL_ADC_ConfigChannel+0x2d4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	f040 8181 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f8c9 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x27a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8be 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	0e9b      	lsrs	r3, r3, #26
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	e01e      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x2b8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f8b3 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8001bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8001bb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e004      	b.n	8001bca <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8001bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2dc>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	e01e      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x30e>
 8001be4:	47ff0000 	.word	0x47ff0000
 8001be8:	58026000 	.word	0x58026000
 8001bec:	5c001000 	.word	0x5c001000
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e004      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f8fc 	bl	8000e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f860 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x34c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f855 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	f003 021f 	and.w	r2, r3, #31
 8001c5e:	e01e      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x38a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f84a 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8001c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x3a2>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	e018      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x3d4>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e004      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8001cde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f899 	bl	8000e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fffd 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x412>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2102      	movs	r1, #2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fff2 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	e01e      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x450>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ffe7 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8001d54:	2320      	movs	r3, #32
 8001d56:	e004      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8001d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x468>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	e014      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x492>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f83a 	bl	8000e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ff9e 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x4d0>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff93 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 021f 	and.w	r2, r3, #31
 8001de2:	e017      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x500>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2103      	movs	r1, #3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff88 	bl	8000d00 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8001e06:	2320      	movs	r3, #32
 8001e08:	e003      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8001e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x518>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	e011      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x53c>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e3c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8001e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d14f      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe ffe5 	bl	8000e2c <LL_ADC_SetOffsetState>
 8001e62:	e047      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	069b      	lsls	r3, r3, #26
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d107      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e86:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eaa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ece:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ef2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f8e9 	bl	80010d0 <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f040 8219 	bne.w	8002338 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff f81e 	bl	8000f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4aa1      	ldr	r2, [pc, #644]	; (80021a4 <HAL_ADC_ConfigChannel+0x890>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	f040 812e 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10b      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x638>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e019      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x66c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	bf94      	ite	ls
 8001f7a:	2301      	movls	r3, #1
 8001f7c:	2300      	movhi	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d079      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x68c>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	3301      	adds	r3, #1
 8001f98:	069b      	lsls	r3, r3, #26
 8001f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9e:	e015      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x6b8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e003      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8001fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x6d8>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	e017      	b.n	800201c <HAL_ADC_ConfigChannel+0x708>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	ea42 0103 	orr.w	r1, r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x72e>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	3301      	adds	r3, #1
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	051b      	lsls	r3, r3, #20
 8002040:	e018      	b.n	8002074 <HAL_ADC_ConfigChannel+0x760>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e003      	b.n	8002066 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002074:	430b      	orrs	r3, r1
 8002076:	e07e      	b.n	8002176 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x780>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	3301      	adds	r3, #1
 800208c:	069b      	lsls	r3, r3, #26
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	e015      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x7ac>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x7cc>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	3301      	adds	r3, #1
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	e017      	b.n	8002110 <HAL_ADC_ConfigChannel+0x7fc>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	61bb      	str	r3, [r7, #24]
  return result;
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e003      	b.n	8002104 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_ADC_ConfigChannel+0x828>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	3301      	adds	r3, #1
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	3b1e      	subs	r3, #30
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213a:	e01b      	b.n	8002174 <HAL_ADC_ConfigChannel+0x860>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	60fb      	str	r3, [r7, #12]
  return result;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	430b      	orrs	r3, r1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe febf 	bl	8000efe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f280 80d7 	bge.w	8002338 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <HAL_ADC_ConfigChannel+0x894>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_ADC_ConfigChannel+0x88a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_ADC_ConfigChannel+0x898>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x8a0>
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_ADC_ConfigChannel+0x89c>)
 80021a0:	e009      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x8a2>
 80021a2:	bf00      	nop
 80021a4:	47ff0000 	.word	0x47ff0000
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40022100 	.word	0x40022100
 80021b0:	40022300 	.word	0x40022300
 80021b4:	4b65      	ldr	r3, [pc, #404]	; (800234c <HAL_ADC_ConfigChannel+0xa38>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fd62 	bl	8000c80 <LL_ADC_GetCommonPathInternalCh>
 80021bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a62      	ldr	r2, [pc, #392]	; (8002350 <HAL_ADC_ConfigChannel+0xa3c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x8c0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HAL_ADC_ConfigChannel+0xa40>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10e      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x8de>
 80021d4:	485e      	ldr	r0, [pc, #376]	; (8002350 <HAL_ADC_ConfigChannel+0xa3c>)
 80021d6:	f7fe ff7b 	bl	80010d0 <LL_ADC_IsEnabled>
 80021da:	4604      	mov	r4, r0
 80021dc:	485d      	ldr	r0, [pc, #372]	; (8002354 <HAL_ADC_ConfigChannel+0xa40>)
 80021de:	f7fe ff77 	bl	80010d0 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4323      	orrs	r3, r4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e008      	b.n	8002204 <HAL_ADC_ConfigChannel+0x8f0>
 80021f2:	4859      	ldr	r0, [pc, #356]	; (8002358 <HAL_ADC_ConfigChannel+0xa44>)
 80021f4:	f7fe ff6c 	bl	80010d0 <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8084 	beq.w	8002312 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <HAL_ADC_ConfigChannel+0xa48>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d132      	bne.n	800227a <HAL_ADC_ConfigChannel+0x966>
 8002214:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d12c      	bne.n	800227a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_ADC_ConfigChannel+0xa44>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 8086 	bne.w	8002338 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_ADC_ConfigChannel+0xa3c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_ADC_ConfigChannel+0x92c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a46      	ldr	r2, [pc, #280]	; (8002354 <HAL_ADC_ConfigChannel+0xa40>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x930>
 8002240:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_ADC_ConfigChannel+0xa4c>)
 8002242:	e000      	b.n	8002246 <HAL_ADC_ConfigChannel+0x932>
 8002244:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_ADC_ConfigChannel+0xa38>)
 8002246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800224a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe fd02 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002256:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_ADC_ConfigChannel+0xa50>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <HAL_ADC_ConfigChannel+0xa54>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	3301      	adds	r3, #1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800226a:	e002      	b.n	8002272 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3b01      	subs	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f9      	bne.n	800226c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002278:	e05e      	b.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_ADC_ConfigChannel+0xa58>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d120      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x9b2>
 8002284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11a      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a30      	ldr	r2, [pc, #192]	; (8002358 <HAL_ADC_ConfigChannel+0xa44>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d14e      	bne.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_ADC_ConfigChannel+0xa3c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x99a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_ADC_ConfigChannel+0xa40>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x99e>
 80022ae:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <HAL_ADC_ConfigChannel+0xa4c>)
 80022b0:	e000      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x9a0>
 80022b2:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_ADC_ConfigChannel+0xa38>)
 80022b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f7fe fccb 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c4:	e038      	b.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_ADC_ConfigChannel+0xa5c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d133      	bne.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
 80022d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d12d      	bne.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_ADC_ConfigChannel+0xa44>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d128      	bne.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_ADC_ConfigChannel+0xa3c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x9e6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_ADC_ConfigChannel+0xa40>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x9ea>
 80022fa:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_ADC_ConfigChannel+0xa4c>)
 80022fc:	e000      	b.n	8002300 <HAL_ADC_ConfigChannel+0x9ec>
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_ADC_ConfigChannel+0xa38>)
 8002300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f7fe fca5 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
 8002310:	e012      	b.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002324:	e008      	b.n	8002338 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002340:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002344:	4618      	mov	r0, r3
 8002346:	37e4      	adds	r7, #228	; 0xe4
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}
 800234c:	58026300 	.word	0x58026300
 8002350:	40022000 	.word	0x40022000
 8002354:	40022100 	.word	0x40022100
 8002358:	58026000 	.word	0x58026000
 800235c:	c7520000 	.word	0xc7520000
 8002360:	40022300 	.word	0x40022300
 8002364:	24000000 	.word	0x24000000
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	c3210000 	.word	0xc3210000
 8002370:	cb840000 	.word	0xcb840000

08002374 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fea5 	bl	80010d0 <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d16e      	bne.n	800246a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <ADC_Enable+0x100>)
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	f043 0210 	orr.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e05a      	b.n	800246c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fe74 	bl	80010a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023c0:	f7fe fc2c 	bl	8000c1c <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <ADC_Enable+0x104>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d004      	beq.n	80023da <ADC_Enable+0x66>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a29      	ldr	r2, [pc, #164]	; (800247c <ADC_Enable+0x108>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <ADC_Enable+0x6a>
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <ADC_Enable+0x10c>)
 80023dc:	e000      	b.n	80023e0 <ADC_Enable+0x6c>
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <ADC_Enable+0x110>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fdf7 	bl	8000fd4 <LL_ADC_GetMultimode>
 80023e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <ADC_Enable+0x108>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d002      	beq.n	80023f8 <ADC_Enable+0x84>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e000      	b.n	80023fa <ADC_Enable+0x86>
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <ADC_Enable+0x104>)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02c      	beq.n	800245c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d130      	bne.n	800246a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002408:	e028      	b.n	800245c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fe5e 	bl	80010d0 <LL_ADC_IsEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d104      	bne.n	8002424 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fe42 	bl	80010a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002424:	f7fe fbfa 	bl	8000c1c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d914      	bls.n	800245c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d00d      	beq.n	800245c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002444:	f043 0210 	orr.w	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d1cf      	bne.n	800240a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	8000003f 	.word	0x8000003f
 8002478:	40022000 	.word	0x40022000
 800247c:	40022100 	.word	0x40022100
 8002480:	40022300 	.word	0x40022300
 8002484:	58026300 	.word	0x58026300

08002488 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <ADC_ConfigureBoostMode+0x1c0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <ADC_ConfigureBoostMode+0x1c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6b      	ldr	r2, [pc, #428]	; (800264c <ADC_ConfigureBoostMode+0x1c4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d109      	bne.n	80024b8 <ADC_ConfigureBoostMode+0x30>
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <ADC_ConfigureBoostMode+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e008      	b.n	80024ca <ADC_ConfigureBoostMode+0x42>
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <ADC_ConfigureBoostMode+0x1cc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01c      	beq.n	8002508 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024ce:	f002 f913 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 80024d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024dc:	d010      	beq.n	8002500 <ADC_ConfigureBoostMode+0x78>
 80024de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024e2:	d873      	bhi.n	80025cc <ADC_ConfigureBoostMode+0x144>
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d002      	beq.n	80024f0 <ADC_ConfigureBoostMode+0x68>
 80024ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ee:	d16d      	bne.n	80025cc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	60fb      	str	r3, [r7, #12]
        break;
 80024fe:	e068      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	60fb      	str	r3, [r7, #12]
        break;
 8002506:	e064      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002508:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	f003 fad8 	bl	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002514:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800251e:	d051      	beq.n	80025c4 <ADC_ConfigureBoostMode+0x13c>
 8002520:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002524:	d854      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 8002526:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800252a:	d047      	beq.n	80025bc <ADC_ConfigureBoostMode+0x134>
 800252c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002530:	d84e      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 8002532:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002536:	d03d      	beq.n	80025b4 <ADC_ConfigureBoostMode+0x12c>
 8002538:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800253c:	d848      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 800253e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002542:	d033      	beq.n	80025ac <ADC_ConfigureBoostMode+0x124>
 8002544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002548:	d842      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 800254a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800254e:	d029      	beq.n	80025a4 <ADC_ConfigureBoostMode+0x11c>
 8002550:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002554:	d83c      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 8002556:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800255a:	d01a      	beq.n	8002592 <ADC_ConfigureBoostMode+0x10a>
 800255c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002560:	d836      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 8002562:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002566:	d014      	beq.n	8002592 <ADC_ConfigureBoostMode+0x10a>
 8002568:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800256c:	d830      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d00e      	beq.n	8002592 <ADC_ConfigureBoostMode+0x10a>
 8002574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002578:	d82a      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 800257a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800257e:	d008      	beq.n	8002592 <ADC_ConfigureBoostMode+0x10a>
 8002580:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002584:	d824      	bhi.n	80025d0 <ADC_ConfigureBoostMode+0x148>
 8002586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800258a:	d002      	beq.n	8002592 <ADC_ConfigureBoostMode+0x10a>
 800258c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002590:	d11e      	bne.n	80025d0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0c9b      	lsrs	r3, r3, #18
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	60fb      	str	r3, [r7, #12]
        break;
 80025a2:	e016      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e012      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	60fb      	str	r3, [r7, #12]
        break;
 80025b2:	e00e      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	60fb      	str	r3, [r7, #12]
        break;
 80025ba:	e00a      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	09db      	lsrs	r3, r3, #7
 80025c0:	60fb      	str	r3, [r7, #12]
        break;
 80025c2:	e006      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	60fb      	str	r3, [r7, #12]
        break;
 80025ca:	e002      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80025d0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <ADC_ConfigureBoostMode+0x1d0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d808      	bhi.n	80025f2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025f0:	e025      	b.n	800263e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <ADC_ConfigureBoostMode+0x1d4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d80a      	bhi.n	8002610 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	609a      	str	r2, [r3, #8]
}
 800260e:	e016      	b.n	800263e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <ADC_ConfigureBoostMode+0x1d8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d80a      	bhi.n	800262e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	e007      	b.n	800263e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800263c:	609a      	str	r2, [r3, #8]
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000
 800264c:	40022100 	.word	0x40022100
 8002650:	40022300 	.word	0x40022300
 8002654:	58026300 	.word	0x58026300
 8002658:	005f5e10 	.word	0x005f5e10
 800265c:	00bebc20 	.word	0x00bebc20
 8002660:	017d7840 	.word	0x017d7840

08002664 <LL_ADC_IsEnabled>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <LL_ADC_IsEnabled+0x18>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_ADC_IsEnabled+0x1a>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_REG_IsConversionOngoing>:
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d101      	bne.n	80026a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b0a3      	sub	sp, #140	; 0x8c
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0c1      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5e      	ldr	r2, [pc, #376]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026e8:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	e001      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0a0      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ffb9 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8002718:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ffb2 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 8081 	bne.w	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800272e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d17c      	bne.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a48      	ldr	r2, [pc, #288]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a46      	ldr	r2, [pc, #280]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800274c:	e000      	b.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800274e:	4b46      	ldr	r3, [pc, #280]	; (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002750:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d039      	beq.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800275a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	431a      	orrs	r2, r3
 8002768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800276a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3a      	ldr	r2, [pc, #232]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a39      	ldr	r2, [pc, #228]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10e      	bne.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002780:	4836      	ldr	r0, [pc, #216]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002782:	f7ff ff6f 	bl	8002664 <LL_ADC_IsEnabled>
 8002786:	4604      	mov	r4, r0
 8002788:	4835      	ldr	r0, [pc, #212]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800278a:	f7ff ff6b 	bl	8002664 <LL_ADC_IsEnabled>
 800278e:	4603      	mov	r3, r0
 8002790:	4323      	orrs	r3, r4
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	e008      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800279e:	4833      	ldr	r0, [pc, #204]	; (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80027a0:	f7ff ff60 	bl	8002664 <LL_ADC_IsEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d047      	beq.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	6811      	ldr	r1, [r2, #0]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027cc:	e03a      	b.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80027ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10e      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80027ee:	481b      	ldr	r0, [pc, #108]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80027f0:	f7ff ff38 	bl	8002664 <LL_ADC_IsEnabled>
 80027f4:	4604      	mov	r4, r0
 80027f6:	481a      	ldr	r0, [pc, #104]	; (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80027f8:	f7ff ff34 	bl	8002664 <LL_ADC_IsEnabled>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4323      	orrs	r3, r4
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e008      	b.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800280c:	4817      	ldr	r0, [pc, #92]	; (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800280e:	f7ff ff29 	bl	8002664 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002828:	4013      	ands	r3, r2
 800282a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800282c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800282e:	e009      	b.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002842:	e000      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002844:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800284e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002852:	4618      	mov	r0, r3
 8002854:	378c      	adds	r7, #140	; 0x8c
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000
 8002860:	40022100 	.word	0x40022100
 8002864:	40022300 	.word	0x40022300
 8002868:	58026300 	.word	0x58026300
 800286c:	58026000 	.word	0x58026000
 8002870:	fffff0e0 	.word	0xfffff0e0

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x40>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00
 80028b8:	05fa0000 	.word	0x05fa0000

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	; (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	; (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a4:	d301      	bcc.n	80029aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00f      	b.n	80029ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <SysTick_Config+0x40>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b2:	210f      	movs	r1, #15
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f7ff ff8e 	bl	80028d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SysTick_Config+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <SysTick_Config+0x40>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff47 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029fc:	f7ff ff5e 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff90 	bl	800292c <NVIC_EncodePriority>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff5f 	bl	80028d8 <__NVIC_SetPriority>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffb2 	bl	8002994 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b098      	sub	sp, #96	; 0x60
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002a44:	4a84      	ldr	r2, [pc, #528]	; (8002c58 <HAL_FDCAN_Init+0x21c>)
 8002a46:	f107 030c 	add.w	r3, r7, #12
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	224c      	movs	r2, #76	; 0x4c
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 faaa 	bl	8006fa8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e1c6      	b.n	8002dec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_FDCAN_Init+0x220>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d106      	bne.n	8002a76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fd ff2a 	bl	80008e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0210 	bic.w	r2, r2, #16
 8002a9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa0:	f7fe f8bc 	bl	8000c1c <HAL_GetTick>
 8002aa4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aa6:	e014      	b.n	8002ad2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002aa8:	f7fe f8b8 	bl	8000c1c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b0a      	cmp	r3, #10
 8002ab4:	d90d      	bls.n	8002ad2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e18c      	b.n	8002dec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d0e3      	beq.n	8002aa8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af0:	f7fe f894 	bl	8000c1c <HAL_GetTick>
 8002af4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002af6:	e014      	b.n	8002b22 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002af8:	f7fe f890 	bl	8000c1c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b0a      	cmp	r3, #10
 8002b04:	d90d      	bls.n	8002b22 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e164      	b.n	8002dec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0e3      	beq.n	8002af8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0202 	orr.w	r2, r2, #2
 8002b3e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7c1b      	ldrb	r3, [r3, #16]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b56:	619a      	str	r2, [r3, #24]
 8002b58:	e007      	b.n	8002b6a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7c5b      	ldrb	r3, [r3, #17]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b80:	619a      	str	r2, [r3, #24]
 8002b82:	e007      	b.n	8002b94 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7c9b      	ldrb	r3, [r3, #18]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002baa:	619a      	str	r2, [r3, #24]
 8002bac:	e007      	b.n	8002bbe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bbc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002be2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0210 	bic.w	r2, r2, #16
 8002bf2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d108      	bne.n	8002c0e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0204 	orr.w	r2, r2, #4
 8002c0a:	619a      	str	r2, [r3, #24]
 8002c0c:	e030      	b.n	8002c70 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d02c      	beq.n	8002c70 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d020      	beq.n	8002c60 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0210 	orr.w	r2, r2, #16
 8002c3c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d114      	bne.n	8002c70 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	619a      	str	r2, [r3, #24]
 8002c56:	e00b      	b.n	8002c70 <HAL_FDCAN_Init+0x234>
 8002c58:	08006fdc 	.word	0x08006fdc
 8002c5c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c80:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c88:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c98:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c9a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca4:	d115      	bne.n	8002cd2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cb4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cbe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cd0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	4413      	add	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d011      	beq.n	8002d22 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d06:	f023 0107 	bic.w	r1, r3, #7
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	443b      	add	r3, r7
 8002d14:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d32:	f023 0107 	bic.w	r1, r3, #7
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	3360      	adds	r3, #96	; 0x60
 8002d3e:	443b      	add	r3, r7
 8002d40:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d012      	beq.n	8002d7c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d5e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3360      	adds	r3, #96	; 0x60
 8002d6a:	443b      	add	r3, r7
 8002d6c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d70:	011a      	lsls	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d8c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3360      	adds	r3, #96	; 0x60
 8002d98:	443b      	add	r3, r7
 8002d9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d9e:	021a      	lsls	r2, r3, #8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_FDCAN_Init+0x3b8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d107      	bne.n	8002dc4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f022 0203 	bic.w	r2, r2, #3
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f981 	bl	80030e4 <FDCAN_CalcultateRamBlockAddresses>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002de8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3760      	adds	r7, #96	; 0x60
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	4000a000 	.word	0x4000a000

08002df8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e08:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d002      	beq.n	8002e16 <HAL_FDCAN_ConfigFilter+0x1e>
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d157      	bne.n	8002ec6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12b      	bne.n	8002e76 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d10d      	bne.n	8002e42 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002e32:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002e38:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002e3a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e00e      	b.n	8002e60 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e4e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8002e56:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e025      	b.n	8002ec2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	075a      	lsls	r2, r3, #29
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b07      	cmp	r3, #7
 8002e8a:	d103      	bne.n	8002e94 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e006      	b.n	8002ea2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	079a      	lsls	r2, r3, #30
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e008      	b.n	8002ed8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ecc:	f043 0202 	orr.w	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d111      	bne.n	8002f1c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e008      	b.n	8002f2e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f22:	f043 0204 	orr.w	r2, r3, #4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d141      	bne.n	8002fd6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f5a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e038      	b.n	8002fe8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e026      	b.n	8002fe8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fa1d 	bl	80033f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e008      	b.n	8002fe8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fdc:	f043 0208 	orr.w	r2, r3, #8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003002:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d002      	beq.n	8003010 <HAL_FDCAN_ActivateNotification+0x20>
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d155      	bne.n	80030bc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	65da      	str	r2, [r3, #92]	; 0x5c
 800302e:	e014      	b.n	800305a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d108      	bne.n	8003052 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0202 	orr.w	r2, r2, #2
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003050:	e003      	b.n	800305a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2203      	movs	r2, #3
 8003058:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	430a      	orrs	r2, r1
 8003074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	430a      	orrs	r2, r1
 8003092:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_FDCAN_ActivateNotification+0xec>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	430b      	orrs	r3, r1
 80030a8:	6553      	str	r3, [r2, #84]	; 0x54
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0f9b      	lsrs	r3, r3, #30
 80030b2:	490b      	ldr	r1, [pc, #44]	; (80030e0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e008      	b.n	80030ce <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	3fcfffff 	.word	0x3fcfffff
 80030e0:	4000a800 	.word	0x4000a800

080030e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80030fa:	4ba7      	ldr	r3, [pc, #668]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	0091      	lsls	r1, r2, #2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	430b      	orrs	r3, r1
 8003108:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003114:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4413      	add	r3, r2
 8003130:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800313a:	4b97      	ldr	r3, [pc, #604]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800313c:	4013      	ands	r3, r2
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	0091      	lsls	r1, r2, #2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	430b      	orrs	r3, r1
 8003148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800317c:	4b86      	ldr	r3, [pc, #536]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	0091      	lsls	r1, r2, #2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003196:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4413      	add	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031c4:	4b74      	ldr	r3, [pc, #464]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	0091      	lsls	r1, r2, #2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031de:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4413      	add	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800320c:	4b62      	ldr	r3, [pc, #392]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800320e:	4013      	ands	r3, r2
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	0091      	lsls	r1, r2, #2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4413      	add	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003238:	4b57      	ldr	r3, [pc, #348]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800323a:	4013      	ands	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	0091      	lsls	r1, r2, #2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	430b      	orrs	r3, r1
 8003246:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003252:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	041a      	lsls	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4413      	add	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800327c:	4013      	ands	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	0091      	lsls	r1, r2, #2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	430b      	orrs	r3, r1
 8003288:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003294:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032b0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	061a      	lsls	r2, r3, #24
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c8:	4b34      	ldr	r3, [pc, #208]	; (800339c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80032ca:	4413      	add	r3, r2
 80032cc:	009a      	lsls	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d915      	bls.n	80033c0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003394:	e006      	b.n	80033a4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003396:	bf00      	nop
 8003398:	ffff0003 	.word	0xffff0003
 800339c:	10002b00 	.word	0x10002b00
 80033a0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2203      	movs	r2, #3
 80033b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e010      	b.n	80033e2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e005      	b.n	80033d4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3304      	adds	r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3f3      	bcc.n	80033c8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop

080033f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800340e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003416:	4313      	orrs	r3, r2
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e00a      	b.n	8003432 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003424:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800342a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800342c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003430:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800343c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003442:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003448:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	3304      	adds	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	3304      	adds	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e020      	b.n	80034ca <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3303      	adds	r3, #3
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3302      	adds	r3, #2
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	440b      	add	r3, r1
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80034a0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3301      	adds	r3, #1
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	440b      	add	r3, r1
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80034ae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	440a      	add	r2, r1
 80034b6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80034b8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3304      	adds	r3, #4
 80034c2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	4a06      	ldr	r2, [pc, #24]	; (80034e8 <FDCAN_CopyMessageToRAM+0xf8>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	461a      	mov	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d3d6      	bcc.n	8003488 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3724      	adds	r7, #36	; 0x24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	08007038 	.word	0x08007038

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034fa:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_GPIO_Init+0x228>)
 80034fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034fe:	e18c      	b.n	800381a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 817e 	beq.w	8003814 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d005      	beq.n	8003530 <HAL_GPIO_Init+0x44>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d130      	bne.n	8003592 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003566:	2201      	movs	r2, #1
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 0201 	and.w	r2, r3, #1
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b03      	cmp	r3, #3
 800359c:	d017      	beq.n	80035ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d123      	bne.n	8003622 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	220f      	movs	r2, #15
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80d8 	beq.w	8003814 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_GPIO_Init+0x22c>)
 8003666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800366a:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <HAL_GPIO_Init+0x22c>)
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_GPIO_Init+0x22c>)
 8003676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003682:	4a26      	ldr	r2, [pc, #152]	; (800371c <HAL_GPIO_Init+0x230>)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_GPIO_Init+0x234>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d04a      	beq.n	8003744 <HAL_GPIO_Init+0x258>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_GPIO_Init+0x238>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02b      	beq.n	800370e <HAL_GPIO_Init+0x222>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_GPIO_Init+0x23c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d025      	beq.n	800370a <HAL_GPIO_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_GPIO_Init+0x240>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01f      	beq.n	8003706 <HAL_GPIO_Init+0x21a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_GPIO_Init+0x244>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d019      	beq.n	8003702 <HAL_GPIO_Init+0x216>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_GPIO_Init+0x248>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x212>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_GPIO_Init+0x24c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x20e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <HAL_GPIO_Init+0x250>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x20a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <HAL_GPIO_Init+0x254>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x206>
 80036ee:	2309      	movs	r3, #9
 80036f0:	e029      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 80036f2:	230a      	movs	r3, #10
 80036f4:	e027      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 80036f6:	2307      	movs	r3, #7
 80036f8:	e025      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 80036fa:	2306      	movs	r3, #6
 80036fc:	e023      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 80036fe:	2305      	movs	r3, #5
 8003700:	e021      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 8003702:	2304      	movs	r3, #4
 8003704:	e01f      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 8003706:	2303      	movs	r3, #3
 8003708:	e01d      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 800370a:	2302      	movs	r3, #2
 800370c:	e01b      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 800370e:	2301      	movs	r3, #1
 8003710:	e019      	b.n	8003746 <HAL_GPIO_Init+0x25a>
 8003712:	bf00      	nop
 8003714:	58000080 	.word	0x58000080
 8003718:	58024400 	.word	0x58024400
 800371c:	58000400 	.word	0x58000400
 8003720:	58020000 	.word	0x58020000
 8003724:	58020400 	.word	0x58020400
 8003728:	58020800 	.word	0x58020800
 800372c:	58020c00 	.word	0x58020c00
 8003730:	58021000 	.word	0x58021000
 8003734:	58021400 	.word	0x58021400
 8003738:	58021800 	.word	0x58021800
 800373c:	58021c00 	.word	0x58021c00
 8003740:	58022400 	.word	0x58022400
 8003744:	2300      	movs	r3, #0
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	f002 0203 	and.w	r2, r2, #3
 800374c:	0092      	lsls	r2, r2, #2
 800374e:	4093      	lsls	r3, r2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003756:	4938      	ldr	r1, [pc, #224]	; (8003838 <HAL_GPIO_Init+0x34c>)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800378a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	f47f ae6b 	bne.w	8003500 <HAL_GPIO_Init+0x14>
  }
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	3724      	adds	r7, #36	; 0x24
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	58000400 	.word	0x58000400

0800383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
 8003848:	4613      	mov	r3, r2
 800384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800384c:	787b      	ldrb	r3, [r7, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003858:	e003      	b.n	8003862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	041a      	lsls	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	619a      	str	r2, [r3, #24]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_PWREx_ConfigSupply+0x70>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d00a      	beq.n	800389a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_PWREx_ConfigSupply+0x70>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e01f      	b.n	80038d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e01d      	b.n	80038d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_PWREx_ConfigSupply+0x70>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	490f      	ldr	r1, [pc, #60]	; (80038e0 <HAL_PWREx_ConfigSupply+0x70>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038aa:	f7fd f9b7 	bl	8000c1c <HAL_GetTick>
 80038ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038b0:	e009      	b.n	80038c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038b2:	f7fd f9b3 	bl	8000c1c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c0:	d901      	bls.n	80038c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_PWREx_ConfigSupply+0x70>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d2:	d1ee      	bne.n	80038b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	58024800 	.word	0x58024800

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	; 0x30
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e3c8      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8087 	beq.w	8003a12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003904:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800390e:	4b86      	ldr	r3, [pc, #536]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	2b10      	cmp	r3, #16
 8003918:	d007      	beq.n	800392a <HAL_RCC_OscConfig+0x46>
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	2b18      	cmp	r3, #24
 800391e:	d110      	bne.n	8003942 <HAL_RCC_OscConfig+0x5e>
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d10b      	bne.n	8003942 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d06c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x12c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d168      	bne.n	8003a10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e3a2      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x76>
 800394c:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a75      	ldr	r2, [pc, #468]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e02e      	b.n	80039b8 <HAL_RCC_OscConfig+0xd4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x98>
 8003962:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a70      	ldr	r2, [pc, #448]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6d      	ldr	r2, [pc, #436]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xd4>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0xbc>
 8003986:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a64      	ldr	r2, [pc, #400]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xd4>
 80039a0:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a60      	ldr	r2, [pc, #384]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd f92c 	bl	8000c1c <HAL_GetTick>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd f928 	bl	8000c1c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e356      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xe4>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd f918 	bl	8000c1c <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd f914 	bl	8000c1c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e342      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a02:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x10c>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 808c 	beq.w	8003b38 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a20:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_RCC_OscConfig+0x162>
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	2b18      	cmp	r3, #24
 8003a3a:	d137      	bne.n	8003aac <HAL_RCC_OscConfig+0x1c8>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d132      	bne.n	8003aac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a46:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x17a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e314      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a5e:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0219 	bic.w	r2, r3, #25
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	492f      	ldr	r1, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd f8d4 	bl	8000c1c <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a78:	f7fd f8d0 	bl	8000c1c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e2fe      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a8a:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	4920      	ldr	r1, [pc, #128]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aaa:	e045      	b.n	8003b38 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d026      	beq.n	8003b02 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 0219 	bic.w	r2, r3, #25
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4919      	ldr	r1, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd f8a9 	bl	8000c1c <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fd f8a5 	bl	8000c1c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e2d3      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	490b      	ldr	r1, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e01a      	b.n	8003b38 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <HAL_RCC_OscConfig+0x244>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd f885 	bl	8000c1c <HAL_GetTick>
 8003b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fd f881 	bl	8000c1c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d903      	bls.n	8003b2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e2af      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
 8003b28:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b2c:	4b96      	ldr	r3, [pc, #600]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ee      	bne.n	8003b16 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d06a      	beq.n	8003c1a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b44:	4b90      	ldr	r3, [pc, #576]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b4e:	4b8e      	ldr	r3, [pc, #568]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d007      	beq.n	8003b6a <HAL_RCC_OscConfig+0x286>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b18      	cmp	r3, #24
 8003b5e:	d11b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2b4>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d116      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b6a:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x29e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e282      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b82:	4b81      	ldr	r3, [pc, #516]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	061b      	lsls	r3, r3, #24
 8003b90:	497d      	ldr	r1, [pc, #500]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b96:	e040      	b.n	8003c1a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d023      	beq.n	8003be8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ba0:	4b79      	ldr	r3, [pc, #484]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a78      	ldr	r2, [pc, #480]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd f836 	bl	8000c1c <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bb4:	f7fd f832 	bl	8000c1c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e260      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc6:	4b70      	ldr	r3, [pc, #448]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	4969      	ldr	r1, [pc, #420]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]
 8003be6:	e018      	b.n	8003c1a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003be8:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a66      	ldr	r2, [pc, #408]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f812 	bl	8000c1c <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bfc:	f7fd f80e 	bl	8000c1c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e23c      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c0e:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d036      	beq.n	8003c94 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d019      	beq.n	8003c62 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	4a55      	ldr	r2, [pc, #340]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fc ffef 	bl	8000c1c <HAL_GetTick>
 8003c3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c42:	f7fc ffeb 	bl	8000c1c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e219      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x35e>
 8003c60:	e018      	b.n	8003c94 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c62:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	4a48      	ldr	r2, [pc, #288]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fc ffd5 	bl	8000c1c <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fc ffd1 	bl	8000c1c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1ff      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c88:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f0      	bne.n	8003c76 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d036      	beq.n	8003d0e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d019      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca8:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a36      	ldr	r2, [pc, #216]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003cae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cb4:	f7fc ffb2 	bl	8000c1c <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cbc:	f7fc ffae 	bl	8000c1c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1dc      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x3d8>
 8003cda:	e018      	b.n	8003d0e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ce8:	f7fc ff98 	bl	8000c1c <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf0:	f7fc ff94 	bl	8000c1c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1c2      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8086 	beq.w	8003e28 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x4a8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_RCC_OscConfig+0x4a8>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d28:	f7fc ff78 	bl	8000c1c <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fc ff74 	bl	8000c1c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1a2      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <HAL_RCC_OscConfig+0x4a8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x480>
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	e032      	b.n	8003dca <HAL_RCC_OscConfig+0x4e6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4ac>
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	4a02      	ldr	r2, [pc, #8]	; (8003d88 <HAL_RCC_OscConfig+0x4a4>)
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70
 8003d84:	e021      	b.n	8003dca <HAL_RCC_OscConfig+0x4e6>
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	58024800 	.word	0x58024800
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4ce>
 8003d98:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a82      	ldr	r2, [pc, #520]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a7f      	ldr	r2, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	e00b      	b.n	8003dca <HAL_RCC_OscConfig+0x4e6>
 8003db2:	4b7d      	ldr	r3, [pc, #500]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a7c      	ldr	r2, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a79      	ldr	r2, [pc, #484]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d015      	beq.n	8003dfe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fc ff23 	bl	8000c1c <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fc ff1f 	bl	8000c1c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e14b      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df0:	4b6d      	ldr	r3, [pc, #436]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ee      	beq.n	8003dda <HAL_RCC_OscConfig+0x4f6>
 8003dfc:	e014      	b.n	8003e28 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fc ff0d 	bl	8000c1c <HAL_GetTick>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fc ff09 	bl	8000c1c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e135      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e1c:	4b62      	ldr	r3, [pc, #392]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ee      	bne.n	8003e06 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 812a 	beq.w	8004086 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3a:	2b18      	cmp	r3, #24
 8003e3c:	f000 80ba 	beq.w	8003fb4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 8095 	bne.w	8003f74 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b57      	ldr	r3, [pc, #348]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a56      	ldr	r2, [pc, #344]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fc fee1 	bl	8000c1c <HAL_GetTick>
 8003e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fc fedd 	bl	8000c1c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e10b      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e70:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7c:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e80:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_OscConfig+0x6c8>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	4945      	ldr	r1, [pc, #276]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	628b      	str	r3, [r1, #40]	; 0x28
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ec6:	4938      	ldr	r1, [pc, #224]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	4a35      	ldr	r2, [pc, #212]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003edc:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_OscConfig+0x6cc>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ee4:	00d2      	lsls	r2, r2, #3
 8003ee6:	4930      	ldr	r1, [pc, #192]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003eec:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f023 020c 	bic.w	r2, r3, #12
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	492b      	ldr	r1, [pc, #172]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f023 0202 	bic.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4927      	ldr	r1, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1c:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fc fe66 	bl	8000c1c <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fc fe62 	bl	8000c1c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e090      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x670>
 8003f72:	e088      	b.n	8004086 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fc fe4c 	bl	8000c1c <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fc fe48 	bl	8000c1c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e076      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f9a:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_OscConfig+0x6c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x6a4>
 8003fa6:	e06e      	b.n	8004086 <HAL_RCC_OscConfig+0x7a2>
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	fffffc0c 	.word	0xfffffc0c
 8003fb0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d031      	beq.n	800402c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f003 0203 	and.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d12a      	bne.n	800402c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d122      	bne.n	800402c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d11a      	bne.n	800402c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0a5b      	lsrs	r3, r3, #9
 8003ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d111      	bne.n	800402c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d108      	bne.n	800402c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0e1b      	lsrs	r3, r3, #24
 800401e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e02b      	b.n	8004088 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800403a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d01f      	beq.n	8004086 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	4a11      	ldr	r2, [pc, #68]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004052:	f7fc fde3 	bl	8000c1c <HAL_GetTick>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004058:	bf00      	nop
 800405a:	f7fc fddf 	bl	8000c1c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	4293      	cmp	r3, r2
 8004064:	d0f9      	beq.n	800405a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8004068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_RCC_OscConfig+0x7b0>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	4906      	ldr	r1, [pc, #24]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_RCC_OscConfig+0x7ac>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3730      	adds	r7, #48	; 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	58024400 	.word	0x58024400
 8004094:	ffff0007 	.word	0xffff0007

08004098 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e19c      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ac:	4b8a      	ldr	r3, [pc, #552]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d910      	bls.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b87      	ldr	r3, [pc, #540]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4985      	ldr	r1, [pc, #532]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b83      	ldr	r3, [pc, #524]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e184      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	4b7b      	ldr	r3, [pc, #492]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d908      	bls.n	800410a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f8:	4b78      	ldr	r3, [pc, #480]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	4975      	ldr	r1, [pc, #468]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004106:	4313      	orrs	r3, r2
 8004108:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	4b70      	ldr	r3, [pc, #448]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004122:	429a      	cmp	r2, r3
 8004124:	d908      	bls.n	8004138 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004126:	4b6d      	ldr	r3, [pc, #436]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	496a      	ldr	r1, [pc, #424]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004134:	4313      	orrs	r3, r2
 8004136:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	4b64      	ldr	r3, [pc, #400]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004150:	429a      	cmp	r2, r3
 8004152:	d908      	bls.n	8004166 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004154:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	495e      	ldr	r1, [pc, #376]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004162:	4313      	orrs	r3, r2
 8004164:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800417e:	429a      	cmp	r2, r3
 8004180:	d908      	bls.n	8004194 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004182:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4953      	ldr	r1, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004190:	4313      	orrs	r3, r2
 8004192:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d908      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f023 020f 	bic.w	r2, r3, #15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4947      	ldr	r1, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d055      	beq.n	800427a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	4940      	ldr	r1, [pc, #256]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e8:	4b3c      	ldr	r3, [pc, #240]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d121      	bne.n	8004238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0f6      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d115      	bne.n	8004238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0ea      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d107      	bne.n	8004228 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004218:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0de      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0d6      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f023 0207 	bic.w	r2, r3, #7
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4925      	ldr	r1, [pc, #148]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424a:	f7fc fce7 	bl	8000c1c <HAL_GetTick>
 800424e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004250:	e00a      	b.n	8004268 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004252:	f7fc fce3 	bl	8000c1c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e0be      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	429a      	cmp	r2, r3
 8004278:	d1eb      	bne.n	8004252 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	429a      	cmp	r2, r3
 8004294:	d208      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f023 020f 	bic.w	r2, r3, #15
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x244>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d214      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	4906      	ldr	r1, [pc, #24]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_ClockConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e086      	b.n	80043e6 <HAL_RCC_ClockConfig+0x34e>
 80042d8:	52002000 	.word	0x52002000
 80042dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d208      	bcs.n	800430e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042fc:	4b3c      	ldr	r3, [pc, #240]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	4939      	ldr	r1, [pc, #228]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 800430a:	4313      	orrs	r3, r2
 800430c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004326:	429a      	cmp	r2, r3
 8004328:	d208      	bcs.n	800433c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800432a:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	492e      	ldr	r1, [pc, #184]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 8004338:	4313      	orrs	r3, r2
 800433a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004354:	429a      	cmp	r2, r3
 8004356:	d208      	bcs.n	800436a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	4922      	ldr	r1, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 8004366:	4313      	orrs	r3, r2
 8004368:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004382:	429a      	cmp	r2, r3
 8004384:	d208      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4917      	ldr	r1, [pc, #92]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 8004394:	4313      	orrs	r3, r2
 8004396:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004398:	f000 f834 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	4912      	ldr	r1, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x35c>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <HAL_RCC_ClockConfig+0x35c>)
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x360>)
 80043ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <HAL_RCC_ClockConfig+0x364>)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_ClockConfig+0x368>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc fbd4 	bl	8000b88 <HAL_InitTick>
 80043e0:	4603      	mov	r3, r0
 80043e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	08007028 	.word	0x08007028
 80043f8:	24000004 	.word	0x24000004
 80043fc:	24000000 	.word	0x24000000
 8004400:	24000008 	.word	0x24000008

08004404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440a:	4bb3      	ldr	r3, [pc, #716]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004412:	2b18      	cmp	r3, #24
 8004414:	f200 8155 	bhi.w	80046c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <HAL_RCC_GetSysClockFreq+0x1c>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004485 	.word	0x08004485
 8004424:	080046c3 	.word	0x080046c3
 8004428:	080046c3 	.word	0x080046c3
 800442c:	080046c3 	.word	0x080046c3
 8004430:	080046c3 	.word	0x080046c3
 8004434:	080046c3 	.word	0x080046c3
 8004438:	080046c3 	.word	0x080046c3
 800443c:	080046c3 	.word	0x080046c3
 8004440:	080044ab 	.word	0x080044ab
 8004444:	080046c3 	.word	0x080046c3
 8004448:	080046c3 	.word	0x080046c3
 800444c:	080046c3 	.word	0x080046c3
 8004450:	080046c3 	.word	0x080046c3
 8004454:	080046c3 	.word	0x080046c3
 8004458:	080046c3 	.word	0x080046c3
 800445c:	080046c3 	.word	0x080046c3
 8004460:	080044b1 	.word	0x080044b1
 8004464:	080046c3 	.word	0x080046c3
 8004468:	080046c3 	.word	0x080046c3
 800446c:	080046c3 	.word	0x080046c3
 8004470:	080046c3 	.word	0x080046c3
 8004474:	080046c3 	.word	0x080046c3
 8004478:	080046c3 	.word	0x080046c3
 800447c:	080046c3 	.word	0x080046c3
 8004480:	080044b7 	.word	0x080044b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004484:	4b94      	ldr	r3, [pc, #592]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004490:	4b91      	ldr	r3, [pc, #580]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	08db      	lsrs	r3, r3, #3
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	4a90      	ldr	r2, [pc, #576]	; (80046dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
 80044a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044a2:	e111      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044a4:	4b8d      	ldr	r3, [pc, #564]	; (80046dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044a6:	61bb      	str	r3, [r7, #24]
      break;
 80044a8:	e10e      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044ac:	61bb      	str	r3, [r7, #24]
      break;
 80044ae:	e10b      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044b0:	4b8c      	ldr	r3, [pc, #560]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044b2:	61bb      	str	r3, [r7, #24]
      break;
 80044b4:	e108      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044c0:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044cc:	4b82      	ldr	r3, [pc, #520]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044d6:	4b80      	ldr	r3, [pc, #512]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	08db      	lsrs	r3, r3, #3
 80044dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80e1 	beq.w	80046bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f000 8083 	beq.w	8004608 <HAL_RCC_GetSysClockFreq+0x204>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b02      	cmp	r3, #2
 8004506:	f200 80a1 	bhi.w	800464c <HAL_RCC_GetSysClockFreq+0x248>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x114>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d056      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004516:	e099      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004518:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d02d      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004524:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	08db      	lsrs	r3, r3, #3
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	4a6b      	ldr	r2, [pc, #428]	; (80046dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004562:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800457e:	e087      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b51      	ldr	r3, [pc, #324]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045c2:	e065      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004606:	e043      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800464a:	e021      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004672:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800468e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	0a5b      	lsrs	r3, r3, #9
 8004696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800469a:	3301      	adds	r3, #1
 800469c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b4:	ee17 3a90 	vmov	r3, s15
 80046b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046ba:	e005      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
      break;
 80046c0:	e002      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046c4:	61bb      	str	r3, [r7, #24]
      break;
 80046c6:	bf00      	nop
  }

  return sysclockfreq;
 80046c8:	69bb      	ldr	r3, [r7, #24]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3724      	adds	r7, #36	; 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	58024400 	.word	0x58024400
 80046dc:	03d09000 	.word	0x03d09000
 80046e0:	003d0900 	.word	0x003d0900
 80046e4:	017d7840 	.word	0x017d7840
 80046e8:	46000000 	.word	0x46000000
 80046ec:	4c742400 	.word	0x4c742400
 80046f0:	4a742400 	.word	0x4a742400
 80046f4:	4bbebc20 	.word	0x4bbebc20

080046f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046fe:	f7ff fe81 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 8004702:	4602      	mov	r2, r0
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCC_GetHCLKFreq+0x50>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	490f      	ldr	r1, [pc, #60]	; (800474c <HAL_RCC_GetHCLKFreq+0x54>)
 8004710:	5ccb      	ldrb	r3, [r1, r3]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	fa22 f303 	lsr.w	r3, r2, r3
 800471a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_RCC_GetHCLKFreq+0x50>)
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_GetHCLKFreq+0x54>)
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <HAL_RCC_GetHCLKFreq+0x58>)
 8004734:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004736:	4a07      	ldr	r2, [pc, #28]	; (8004754 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <HAL_RCC_GetHCLKFreq+0x58>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	58024400 	.word	0x58024400
 800474c:	08007028 	.word	0x08007028
 8004750:	24000004 	.word	0x24000004
 8004754:	24000000 	.word	0x24000000

08004758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800475c:	f7ff ffcc 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4904      	ldr	r1, [pc, #16]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	58024400 	.word	0x58024400
 8004780:	08007028 	.word	0x08007028

08004784 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004788:	b0c6      	sub	sp, #280	; 0x118
 800478a:	af00      	add	r7, sp, #0
 800478c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004796:	2300      	movs	r3, #0
 8004798:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800479c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80047a8:	2500      	movs	r5, #0
 80047aa:	ea54 0305 	orrs.w	r3, r4, r5
 80047ae:	d049      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047ba:	d02f      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047c0:	d828      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c6:	d01a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047cc:	d822      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d6:	d007      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047d8:	e01c      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047da:	4bab      	ldr	r3, [pc, #684]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	4aaa      	ldr	r2, [pc, #680]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047e6:	e01a      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ec:	3308      	adds	r3, #8
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f002 fa49 	bl	8006c88 <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047fc:	e00f      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004802:	3328      	adds	r3, #40	; 0x28
 8004804:	2102      	movs	r1, #2
 8004806:	4618      	mov	r0, r3
 8004808:	f002 faf0 	bl	8006dec <RCCEx_PLL3_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004812:	e004      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800481a:	e000      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800481c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004826:	4b98      	ldr	r3, [pc, #608]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800482e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004834:	4a94      	ldr	r2, [pc, #592]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6513      	str	r3, [r2, #80]	; 0x50
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004850:	f04f 0900 	mov.w	r9, #0
 8004854:	ea58 0309 	orrs.w	r3, r8, r9
 8004858:	d047      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800485a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	2b04      	cmp	r3, #4
 8004862:	d82a      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004881 	.word	0x08004881
 8004870:	0800488f 	.word	0x0800488f
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048c3 	.word	0x080048c3
 800487c:	080048c3 	.word	0x080048c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004880:	4b81      	ldr	r3, [pc, #516]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4a80      	ldr	r2, [pc, #512]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800488c:	e01a      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800488e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004892:	3308      	adds	r3, #8
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f002 f9f6 	bl	8006c88 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a2:	e00f      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a8:	3328      	adds	r3, #40	; 0x28
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f002 fa9d 	bl	8006dec <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048b8:	e004      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048c0:	e000      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048cc:	4b6e      	ldr	r3, [pc, #440]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	f023 0107 	bic.w	r1, r3, #7
 80048d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a6b      	ldr	r2, [pc, #428]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	6513      	str	r3, [r2, #80]	; 0x50
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80048f6:	f04f 0b00 	mov.w	fp, #0
 80048fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80048fe:	d05b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004908:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800490c:	d03b      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800490e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004912:	d834      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004918:	d037      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800491a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491e:	d82e      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004924:	d033      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004926:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800492a:	d828      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d01a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004936:	d822      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800493c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004940:	d007      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004942:	e01c      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4b50      	ldr	r3, [pc, #320]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a4f      	ldr	r2, [pc, #316]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004950:	e01e      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004956:	3308      	adds	r3, #8
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f002 f994 	bl	8006c88 <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004966:	e013      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800496c:	3328      	adds	r3, #40	; 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fa3b 	bl	8006dec <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497c:	e008      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80049a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049a8:	4a37      	ldr	r2, [pc, #220]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	6593      	str	r3, [r2, #88]	; 0x58
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80049c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d05d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80049d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049e4:	d03b      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049ea:	d834      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f0:	d037      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80049f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f6:	d82e      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049fc:	d033      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80049fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a02:	d828      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a08:	d01a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a0e:	d822      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a18:	d007      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a1a:	e01c      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a28:	e01e      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2e:	3308      	adds	r3, #8
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f002 f928 	bl	8006c88 <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a3e:	e013      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a44:	3328      	adds	r3, #40	; 0x28
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f002 f9cf 	bl	8006dec <RCCEx_PLL3_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a80:	4a01      	ldr	r2, [pc, #4]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
 8004a86:	e005      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004aa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004aaa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d03a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	2b30      	cmp	r3, #48	; 0x30
 8004abc:	d01f      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004abe:	2b30      	cmp	r3, #48	; 0x30
 8004ac0:	d819      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d815      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d019      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d111      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad2:	4baa      	ldr	r3, [pc, #680]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4aa9      	ldr	r2, [pc, #676]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ade:	e011      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 f8cd 	bl	8006c88 <RCCEx_PLL2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004af4:	e006      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004afc:	e002      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	4a98      	ldr	r2, [pc, #608]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004b36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d051      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b54:	d035      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b5a:	d82e      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b60:	d031      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b66:	d828      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6c:	d01a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	d822      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d007      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004b7e:	e01c      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b80:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4a7d      	ldr	r2, [pc, #500]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b8c:	e01c      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b92:	3308      	adds	r3, #8
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f002 f876 	bl	8006c88 <RCCEx_PLL2_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ba2:	e011      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba8:	3328      	adds	r3, #40	; 0x28
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f002 f91d 	bl	8006dec <RCCEx_PLL3_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bd0:	4b6a      	ldr	r3, [pc, #424]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	4a67      	ldr	r2, [pc, #412]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6513      	str	r3, [r2, #80]	; 0x50
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d053      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c18:	d033      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1e:	d82c      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c24:	d02f      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c2a:	d826      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c30:	d02b      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c36:	d820      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3c:	d012      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c42:	d81a      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d022      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d115      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c52:	3308      	adds	r3, #8
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f002 f816 	bl	8006c88 <RCCEx_PLL2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c62:	e015      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c68:	3328      	adds	r3, #40	; 0x28
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f002 f8bd 	bl	8006dec <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c78:	e00a      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c82:	bf00      	nop
 8004c84:	e004      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c98:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6513      	str	r3, [r2, #80]	; 0x50
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ccc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d058      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce2:	d033      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce8:	d82c      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d02f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d826      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cfa:	d02b      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004cfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d00:	d820      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d06:	d012      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0c:	d81a      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d022      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d16:	d115      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 ffb1 	bl	8006c88 <RCCEx_PLL2_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d2c:	e015      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d32:	3328      	adds	r3, #40	; 0x28
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 f858 	bl	8006dec <RCCEx_PLL3_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d42:	e00a      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d4a:	e006      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d4c:	bf00      	nop
 8004d4e:	e004      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d50:	bf00      	nop
 8004d52:	e002      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10e      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d72:	4a02      	ldr	r2, [pc, #8]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6593      	str	r3, [r2, #88]	; 0x58
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d037      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db2:	d00e      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db8:	d816      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc2:	d111      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc4:	4bc4      	ldr	r3, [pc, #784]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4ac3      	ldr	r2, [pc, #780]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004dd0:	e00f      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 ff54 	bl	8006c88 <RCCEx_PLL2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004de6:	e004      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004dee:	e000      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dfa:	4bb7      	ldr	r3, [pc, #732]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e08:	4ab3      	ldr	r2, [pc, #716]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8004e0e:	e003      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d039      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d81c      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e85 	.word	0x08004e85
 8004e4c:	08004e59 	.word	0x08004e59
 8004e50:	08004e67 	.word	0x08004e67
 8004e54:	08004e85 	.word	0x08004e85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e58:	4b9f      	ldr	r3, [pc, #636]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	4a9e      	ldr	r2, [pc, #632]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e64:	e00f      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 ff0a 	bl	8006c88 <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e7a:	e004      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e8e:	4b92      	ldr	r3, [pc, #584]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e92:	f023 0103 	bic.w	r1, r3, #3
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	4a8e      	ldr	r2, [pc, #568]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea2:	e003      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ea8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ec2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f000 8099 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ece:	4b83      	ldr	r3, [pc, #524]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a82      	ldr	r2, [pc, #520]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eda:	f7fb fe9f 	bl	8000c1c <HAL_GetTick>
 8004ede:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee2:	e00b      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee4:	f7fb fe9a 	bl	8000c1c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b64      	cmp	r3, #100	; 0x64
 8004ef2:	d903      	bls.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004efa:	e005      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004efc:	4b77      	ldr	r3, [pc, #476]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ed      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d173      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f10:	4b71      	ldr	r3, [pc, #452]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f1c:	4053      	eors	r3, r2
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d015      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f26:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f32:	4b69      	ldr	r3, [pc, #420]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	4a68      	ldr	r2, [pc, #416]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3e:	4b66      	ldr	r3, [pc, #408]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	4a65      	ldr	r2, [pc, #404]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f4a:	4a63      	ldr	r2, [pc, #396]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	d118      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fb fe5c 	bl	8000c1c <HAL_GetTick>
 8004f64:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f68:	e00d      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6a:	f7fb fe57 	bl	8000c1c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f74:	1ad2      	subs	r2, r2, r3
 8004f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d903      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004f84:	e005      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f86:	4b54      	ldr	r3, [pc, #336]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0eb      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004f92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d129      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004faa:	d10e      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004fac:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fbc:	091a      	lsrs	r2, r3, #4
 8004fbe:	4b48      	ldr	r3, [pc, #288]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6113      	str	r3, [r2, #16]
 8004fc8:	e005      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004fca:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	4a42      	ldr	r2, [pc, #264]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fd4:	6113      	str	r3, [r2, #16]
 8004fd6:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6713      	str	r3, [r2, #112]	; 0x70
 8004fec:	e008      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004ff6:	e003      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f002 0301 	and.w	r3, r2, #1
 800500c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005016:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	f000 808f 	beq.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005028:	2b28      	cmp	r3, #40	; 0x28
 800502a:	d871      	bhi.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005119 	.word	0x08005119
 8005038:	08005111 	.word	0x08005111
 800503c:	08005111 	.word	0x08005111
 8005040:	08005111 	.word	0x08005111
 8005044:	08005111 	.word	0x08005111
 8005048:	08005111 	.word	0x08005111
 800504c:	08005111 	.word	0x08005111
 8005050:	08005111 	.word	0x08005111
 8005054:	080050e5 	.word	0x080050e5
 8005058:	08005111 	.word	0x08005111
 800505c:	08005111 	.word	0x08005111
 8005060:	08005111 	.word	0x08005111
 8005064:	08005111 	.word	0x08005111
 8005068:	08005111 	.word	0x08005111
 800506c:	08005111 	.word	0x08005111
 8005070:	08005111 	.word	0x08005111
 8005074:	080050fb 	.word	0x080050fb
 8005078:	08005111 	.word	0x08005111
 800507c:	08005111 	.word	0x08005111
 8005080:	08005111 	.word	0x08005111
 8005084:	08005111 	.word	0x08005111
 8005088:	08005111 	.word	0x08005111
 800508c:	08005111 	.word	0x08005111
 8005090:	08005111 	.word	0x08005111
 8005094:	08005119 	.word	0x08005119
 8005098:	08005111 	.word	0x08005111
 800509c:	08005111 	.word	0x08005111
 80050a0:	08005111 	.word	0x08005111
 80050a4:	08005111 	.word	0x08005111
 80050a8:	08005111 	.word	0x08005111
 80050ac:	08005111 	.word	0x08005111
 80050b0:	08005111 	.word	0x08005111
 80050b4:	08005119 	.word	0x08005119
 80050b8:	08005111 	.word	0x08005111
 80050bc:	08005111 	.word	0x08005111
 80050c0:	08005111 	.word	0x08005111
 80050c4:	08005111 	.word	0x08005111
 80050c8:	08005111 	.word	0x08005111
 80050cc:	08005111 	.word	0x08005111
 80050d0:	08005111 	.word	0x08005111
 80050d4:	08005119 	.word	0x08005119
 80050d8:	58024400 	.word	0x58024400
 80050dc:	58024800 	.word	0x58024800
 80050e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e8:	3308      	adds	r3, #8
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fdcb 	bl	8006c88 <RCCEx_PLL2_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050f8:	e00f      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	3328      	adds	r3, #40	; 0x28
 8005100:	2101      	movs	r1, #1
 8005102:	4618      	mov	r0, r3
 8005104:	f001 fe72 	bl	8006dec <RCCEx_PLL3_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005122:	4bbf      	ldr	r3, [pc, #764]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005130:	4abb      	ldr	r2, [pc, #748]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005132:	430b      	orrs	r3, r1
 8005134:	6553      	str	r3, [r2, #84]	; 0x54
 8005136:	e003      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800513c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f002 0302 	and.w	r3, r2, #2
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005156:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800515a:	460b      	mov	r3, r1
 800515c:	4313      	orrs	r3, r2
 800515e:	d041      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	2b05      	cmp	r3, #5
 8005168:	d824      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	080051bd 	.word	0x080051bd
 8005174:	08005189 	.word	0x08005189
 8005178:	0800519f 	.word	0x0800519f
 800517c:	080051bd 	.word	0x080051bd
 8005180:	080051bd 	.word	0x080051bd
 8005184:	080051bd 	.word	0x080051bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518c:	3308      	adds	r3, #8
 800518e:	2101      	movs	r1, #1
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fd79 	bl	8006c88 <RCCEx_PLL2_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800519c:	e00f      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800519e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a2:	3328      	adds	r3, #40	; 0x28
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 fe20 	bl	8006dec <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051b2:	e004      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051ba:	e000      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80051bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051c6:	4b96      	ldr	r3, [pc, #600]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	f023 0107 	bic.w	r1, r3, #7
 80051ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d4:	4a92      	ldr	r2, [pc, #584]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051d6:	430b      	orrs	r3, r1
 80051d8:	6553      	str	r3, [r2, #84]	; 0x54
 80051da:	e003      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f002 0304 	and.w	r3, r2, #4
 80051f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051fe:	460b      	mov	r3, r1
 8005200:	4313      	orrs	r3, r2
 8005202:	d044      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520c:	2b05      	cmp	r3, #5
 800520e:	d825      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005265 	.word	0x08005265
 800521c:	08005231 	.word	0x08005231
 8005220:	08005247 	.word	0x08005247
 8005224:	08005265 	.word	0x08005265
 8005228:	08005265 	.word	0x08005265
 800522c:	08005265 	.word	0x08005265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005234:	3308      	adds	r3, #8
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fd25 	bl	8006c88 <RCCEx_PLL2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005244:	e00f      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524a:	3328      	adds	r3, #40	; 0x28
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f001 fdcc 	bl	8006dec <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800525a:	e004      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005262:	e000      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800526e:	4b6c      	ldr	r3, [pc, #432]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f023 0107 	bic.w	r1, r3, #7
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	4a68      	ldr	r2, [pc, #416]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005280:	430b      	orrs	r3, r1
 8005282:	6593      	str	r3, [r2, #88]	; 0x58
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800528a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f002 0320 	and.w	r3, r2, #32
 800529a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d055      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ba:	d033      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80052bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c0:	d82c      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d02f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d826      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052d2:	d02b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80052d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052d8:	d820      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052de:	d012      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80052e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e4:	d81a      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d022      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80052ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ee:	d115      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	3308      	adds	r3, #8
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 fcc5 	bl	8006c88 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005304:	e015      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	3328      	adds	r3, #40	; 0x28
 800530c:	2102      	movs	r1, #2
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fd6c 	bl	8006dec <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800531a:	e00a      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005322:	e006      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005324:	bf00      	nop
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800533a:	4b39      	ldr	r3, [pc, #228]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534a:	4a35      	ldr	r2, [pc, #212]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6553      	str	r3, [r2, #84]	; 0x54
 8005350:	e003      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800536a:	2300      	movs	r3, #0
 800536c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005370:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005374:	460b      	mov	r3, r1
 8005376:	4313      	orrs	r3, r2
 8005378:	d058      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005386:	d033      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800538c:	d82c      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d02f      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d826      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800539a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800539e:	d02b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80053a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053a4:	d820      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053aa:	d012      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b0:	d81a      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d022      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ba:	d115      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	3308      	adds	r3, #8
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fc5f 	bl	8006c88 <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053d0:	e015      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d6:	3328      	adds	r3, #40	; 0x28
 80053d8:	2102      	movs	r1, #2
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fd06 	bl	8006dec <RCCEx_PLL3_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053e6:	e00a      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053ee:	e006      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053f0:	bf00      	nop
 80053f2:	e004      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053f4:	bf00      	nop
 80053f6:	e002      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053f8:	bf00      	nop
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005416:	4a02      	ldr	r2, [pc, #8]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005418:	430b      	orrs	r3, r1
 800541a:	6593      	str	r3, [r2, #88]	; 0x58
 800541c:	e006      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800541e:	bf00      	nop
 8005420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005428:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	d055      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005458:	d033      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800545a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800545e:	d82c      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005464:	d02f      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546a:	d826      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800546c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005470:	d02b      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005476:	d820      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547c:	d012      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800547e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005482:	d81a      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d022      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548c:	d115      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005492:	3308      	adds	r3, #8
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f001 fbf6 	bl	8006c88 <RCCEx_PLL2_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054a2:	e015      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a8:	3328      	adds	r3, #40	; 0x28
 80054aa:	2102      	movs	r1, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fc9d 	bl	8006dec <RCCEx_PLL3_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054b8:	e00a      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054c0:	e006      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054c2:	bf00      	nop
 80054c4:	e004      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054d8:	4ba0      	ldr	r3, [pc, #640]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e8:	4a9c      	ldr	r2, [pc, #624]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054ea:	430b      	orrs	r3, r1
 80054ec:	6593      	str	r3, [r2, #88]	; 0x58
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f002 0308 	and.w	r3, r2, #8
 8005504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800550e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	d01e      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d10c      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552a:	3328      	adds	r3, #40	; 0x28
 800552c:	2102      	movs	r1, #2
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fc5c 	bl	8006dec <RCCEx_PLL3_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005540:	4b86      	ldr	r3, [pc, #536]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	4a82      	ldr	r2, [pc, #520]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005552:	430b      	orrs	r3, r1
 8005554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f002 0310 	and.w	r3, r2, #16
 8005562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800556c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d01e      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005582:	d10c      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005588:	3328      	adds	r3, #40	; 0x28
 800558a:	2102      	movs	r1, #2
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fc2d 	bl	8006dec <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800559e:	4b6f      	ldr	r3, [pc, #444]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ae:	4a6b      	ldr	r2, [pc, #428]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80055c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055c2:	2300      	movs	r3, #0
 80055c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d03e      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055dc:	d022      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e2:	d81b      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d00b      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80055ee:	e015      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f4:	3308      	adds	r3, #8
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 fb45 	bl	8006c88 <RCCEx_PLL2_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005604:	e00f      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560a:	3328      	adds	r3, #40	; 0x28
 800560c:	2102      	movs	r1, #2
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fbec 	bl	8006dec <RCCEx_PLL3_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800561a:	e004      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005622:	e000      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005626:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10b      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800562e:	4b4b      	ldr	r3, [pc, #300]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800563e:	4a47      	ldr	r2, [pc, #284]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005640:	430b      	orrs	r3, r1
 8005642:	6593      	str	r3, [r2, #88]	; 0x58
 8005644:	e003      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800564a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800565a:	673b      	str	r3, [r7, #112]	; 0x70
 800565c:	2300      	movs	r3, #0
 800565e:	677b      	str	r3, [r7, #116]	; 0x74
 8005660:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005664:	460b      	mov	r3, r1
 8005666:	4313      	orrs	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005676:	d01f      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800567c:	d818      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800567e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005682:	d003      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005688:	d007      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800568a:	e011      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568c:	4b33      	ldr	r3, [pc, #204]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a32      	ldr	r2, [pc, #200]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005698:	e00f      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569e:	3328      	adds	r3, #40	; 0x28
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 fba2 	bl	8006dec <RCCEx_PLL3_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80056b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c2:	4b26      	ldr	r3, [pc, #152]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d2:	4a22      	ldr	r2, [pc, #136]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6553      	str	r3, [r2, #84]	; 0x54
 80056d8:	e003      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80056ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f0:	2300      	movs	r3, #0
 80056f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d034      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d007      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800570e:	e011      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a11      	ldr	r2, [pc, #68]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800571c:	e00e      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005722:	3308      	adds	r3, #8
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f001 faae 	bl	8006c88 <RCCEx_PLL2_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005732:	e003      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800573a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800574c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005752:	4a02      	ldr	r2, [pc, #8]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005754:	430b      	orrs	r3, r1
 8005756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005764:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
 8005776:	2300      	movs	r3, #0
 8005778:	667b      	str	r3, [r7, #100]	; 0x64
 800577a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d00c      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005788:	3328      	adds	r3, #40	; 0x28
 800578a:	2102      	movs	r1, #2
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fb2d 	bl	8006dec <RCCEx_PLL3_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800579e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80057aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ac:	2300      	movs	r3, #0
 80057ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80057b4:	460b      	mov	r3, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	d036      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c4:	d018      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80057c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ca:	d811      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d0:	d014      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d6:	d80b      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d011      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80057dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e0:	d106      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e2:	4bb7      	ldr	r3, [pc, #732]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	4ab6      	ldr	r2, [pc, #728]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057f6:	e004      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057f8:	bf00      	nop
 80057fa:	e002      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005802:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800580a:	4bad      	ldr	r3, [pc, #692]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005818:	4aa9      	ldr	r2, [pc, #676]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800581a:	430b      	orrs	r3, r1
 800581c:	6553      	str	r3, [r2, #84]	; 0x54
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005834:	653b      	str	r3, [r7, #80]	; 0x50
 8005836:	2300      	movs	r3, #0
 8005838:	657b      	str	r3, [r7, #84]	; 0x54
 800583a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005844:	4b9e      	ldr	r3, [pc, #632]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a9b      	ldr	r2, [pc, #620]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005854:	430b      	orrs	r3, r1
 8005856:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005864:	64bb      	str	r3, [r7, #72]	; 0x48
 8005866:	2300      	movs	r3, #0
 8005868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005874:	4b92      	ldr	r3, [pc, #584]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005882:	4a8f      	ldr	r2, [pc, #572]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005884:	430b      	orrs	r3, r1
 8005886:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005894:	643b      	str	r3, [r7, #64]	; 0x40
 8005896:	2300      	movs	r3, #0
 8005898:	647b      	str	r3, [r7, #68]	; 0x44
 800589a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800589e:	460b      	mov	r3, r1
 80058a0:	4313      	orrs	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058a4:	4b86      	ldr	r3, [pc, #536]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	4a85      	ldr	r2, [pc, #532]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ae:	6113      	str	r3, [r2, #16]
 80058b0:	4b83      	ldr	r3, [pc, #524]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058b2:	6919      	ldr	r1, [r3, #16]
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058bc:	4a80      	ldr	r2, [pc, #512]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058be:	430b      	orrs	r3, r1
 80058c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058de:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	4a74      	ldr	r2, [pc, #464]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ee:	430b      	orrs	r3, r1
 80058f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80058fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005900:	2300      	movs	r3, #0
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
 8005904:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800590e:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	4a68      	ldr	r2, [pc, #416]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005920:	430b      	orrs	r3, r1
 8005922:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	2100      	movs	r1, #0
 800592e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005936:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d011      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005944:	3308      	adds	r3, #8
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f99d 	bl	8006c88 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	2100      	movs	r1, #0
 800596e:	6239      	str	r1, [r7, #32]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
 8005976:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800597a:	460b      	mov	r3, r1
 800597c:	4313      	orrs	r3, r2
 800597e:	d011      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005984:	3308      	adds	r3, #8
 8005986:	2101      	movs	r1, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f97d 	bl	8006c88 <RCCEx_PLL2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	2100      	movs	r1, #0
 80059ae:	61b9      	str	r1, [r7, #24]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d011      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	3308      	adds	r3, #8
 80059c6:	2102      	movs	r1, #2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f95d 	bl	8006c88 <RCCEx_PLL2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80059d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	2100      	movs	r1, #0
 80059ee:	6139      	str	r1, [r7, #16]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d011      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a04:	3328      	adds	r3, #40	; 0x28
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f9ef 	bl	8006dec <RCCEx_PLL3_Config>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005a14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	d011      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	3328      	adds	r3, #40	; 0x28
 8005a46:	2101      	movs	r1, #1
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 f9cf 	bl	8006dec <RCCEx_PLL3_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005a54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6039      	str	r1, [r7, #0]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d011      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a84:	3328      	adds	r3, #40	; 0x28
 8005a86:	2102      	movs	r1, #2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 f9af 	bl	8006dec <RCCEx_PLL3_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005a94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005aa4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e000      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400

08005ac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b090      	sub	sp, #64	; 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	f040 8094 	bne.w	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005adc:	4b9b      	ldr	r3, [pc, #620]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	f200 8087 	bhi.w	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b09 	.word	0x08005b09
 8005af8:	08005b31 	.word	0x08005b31
 8005afc:	08005b59 	.word	0x08005b59
 8005b00:	08005bf5 	.word	0x08005bf5
 8005b04:	08005b81 	.word	0x08005b81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b08:	4b90      	ldr	r3, [pc, #576]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b14:	d108      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 ff62 	bl	80069e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b24:	f000 bc93 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b2c:	f000 bc8f 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b30:	4b86      	ldr	r3, [pc, #536]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3c:	d108      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3e:	f107 0318 	add.w	r3, r7, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fca6 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b4c:	f000 bc7f 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b54:	f000 bc7b 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b58:	4b7c      	ldr	r3, [pc, #496]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b64:	d108      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fde6 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b74:	f000 bc6b 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b7c:	f000 bc67 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b80:	4b72      	ldr	r3, [pc, #456]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b8a:	4b70      	ldr	r3, [pc, #448]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d10c      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b9c:	4b6b      	ldr	r3, [pc, #428]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	08db      	lsrs	r3, r3, #3
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	4a6a      	ldr	r2, [pc, #424]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bae:	e01f      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bb0:	4b66      	ldr	r3, [pc, #408]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc4:	d102      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bc6:	4b63      	ldr	r3, [pc, #396]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bcc:	4b5f      	ldr	r3, [pc, #380]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005be2:	4b5d      	ldr	r3, [pc, #372]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be6:	e003      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005bec:	f000 bc2f 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bf0:	f000 bc2d 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bf4:	4b59      	ldr	r3, [pc, #356]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf8:	f000 bc29 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c00:	f000 bc25 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	f040 80a7 	bne.w	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005c12:	4b4e      	ldr	r3, [pc, #312]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c22:	d054      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c2a:	f200 808b 	bhi.w	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c34:	f000 8083 	beq.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c3e:	f200 8081 	bhi.w	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c48:	d02f      	beq.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c50:	d878      	bhi.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c5e:	d012      	beq.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8005c60:	e070      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c62:	4b3a      	ldr	r3, [pc, #232]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6e:	d107      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 feb5 	bl	80069e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c7e:	e3e6      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c84:	e3e3      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c86:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c94:	f107 0318 	add.w	r3, r7, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fbfb 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ca2:	e3d4      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca8:	e3d1      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005caa:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fd3d 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cc6:	e3c2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ccc:	e3bf      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cce:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cd8:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	08db      	lsrs	r3, r3, #3
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfc:	e01e      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d12:	d102      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d18:	e010      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d26:	d106      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2e:	d102      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d34:	e002      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005d3a:	e388      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d3c:	e387      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d42:	e384      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d48:	e381      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d4a:	bf00      	nop
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	03d09000 	.word	0x03d09000
 8005d54:	003d0900 	.word	0x003d0900
 8005d58:	017d7840 	.word	0x017d7840
 8005d5c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d64:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	f040 809c 	bne.w	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005d6e:	4b9e      	ldr	r3, [pc, #632]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d7e:	d054      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d86:	f200 808b 	bhi.w	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d90:	f000 8083 	beq.w	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d9a:	f200 8081 	bhi.w	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005da4:	d02f      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dac:	d878      	bhi.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dba:	d012      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005dbc:	e070      	b.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dbe:	4b8a      	ldr	r3, [pc, #552]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dca:	d107      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fe07 	bl	80069e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dda:	e338      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005de0:	e335      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de2:	4b81      	ldr	r3, [pc, #516]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dee:	d107      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005df0:	f107 0318 	add.w	r3, r7, #24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fb4d 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dfe:	e326      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e04:	e323      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e06:	4b78      	ldr	r3, [pc, #480]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e12:	d107      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fc8f 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e22:	e314      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e28:	e311      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e2a:	4b6f      	ldr	r3, [pc, #444]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e34:	4b6c      	ldr	r3, [pc, #432]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d10c      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e46:	4b68      	ldr	r3, [pc, #416]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a66      	ldr	r2, [pc, #408]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e58:	e01e      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e5a:	4b63      	ldr	r3, [pc, #396]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	d106      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6e:	d102      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e70:	4b5f      	ldr	r3, [pc, #380]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	e010      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e76:	4b5c      	ldr	r3, [pc, #368]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e82:	d106      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8005e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8a:	d102      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e8c:	4b59      	ldr	r3, [pc, #356]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005e96:	e2da      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e98:	e2d9      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e9a:	4b57      	ldr	r3, [pc, #348]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e9e:	e2d6      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ea4:	e2d3      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eaa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	f040 80a7 	bne.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005eb4:	4b4c      	ldr	r3, [pc, #304]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005ebc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec4:	d055      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ecc:	f200 8096 	bhi.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ed6:	f000 8084 	beq.w	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee0:	f200 808c 	bhi.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	d030      	beq.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef2:	f200 8083 	bhi.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f04:	e07a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f06:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f12:	d107      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fd63 	bl	80069e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f22:	e294      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f28:	e291      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f36:	d107      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f38:	f107 0318 	add.w	r3, r7, #24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 faa9 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f46:	e282      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f4c:	e27f      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5a:	d107      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fbeb 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6a:	e270      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f70:	e26d      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa0:	e01e      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d106      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb6:	d102      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fbc:	e010      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fca:	d106      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd2:	d102      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005fde:	e236      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005fe0:	e235      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fe6:	e232      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	03d09000 	.word	0x03d09000
 8005ff0:	003d0900 	.word	0x003d0900
 8005ff4:	017d7840 	.word	0x017d7840
 8005ff8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006000:	e225      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006006:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800600a:	430b      	orrs	r3, r1
 800600c:	f040 8085 	bne.w	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006010:	4b9c      	ldr	r3, [pc, #624]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006014:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006020:	d06b      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006028:	d874      	bhi.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006030:	d056      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006038:	d86c      	bhi.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006040:	d03b      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006048:	d864      	bhi.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006050:	d021      	beq.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006058:	d85c      	bhi.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d004      	beq.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006068:	e054      	b.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800606a:	f7fe fb75 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 800606e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006070:	e1ed      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006072:	4b84      	ldr	r3, [pc, #528]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800607a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800607e:	d107      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006080:	f107 0318 	add.w	r3, r7, #24
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fa05 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800608e:	e1de      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006094:	e1db      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006096:	4b7b      	ldr	r3, [pc, #492]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a2:	d107      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060a4:	f107 030c 	add.w	r3, r7, #12
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fb47 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b2:	e1cc      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b8:	e1c9      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060ba:	4b72      	ldr	r3, [pc, #456]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d109      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060c6:	4b6f      	ldr	r3, [pc, #444]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	08db      	lsrs	r3, r3, #3
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	4a6d      	ldr	r2, [pc, #436]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d8:	e1b9      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060de:	e1b6      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060e0:	4b68      	ldr	r3, [pc, #416]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ec:	d102      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80060ee:	4b67      	ldr	r3, [pc, #412]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80060f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f2:	e1ac      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f8:	e1a9      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060fa:	4b62      	ldr	r3, [pc, #392]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006106:	d102      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006108:	4b61      	ldr	r3, [pc, #388]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800610c:	e19f      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006112:	e19c      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006118:	e199      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800611a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006122:	430b      	orrs	r3, r1
 8006124:	d173      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006126:	4b57      	ldr	r3, [pc, #348]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006136:	d02f      	beq.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613e:	d863      	bhi.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d012      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800614e:	e05b      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006150:	4b4c      	ldr	r3, [pc, #304]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615c:	d107      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615e:	f107 0318 	add.w	r3, r7, #24
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f996 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800616c:	e16f      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006172:	e16c      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006174:	4b43      	ldr	r3, [pc, #268]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800617c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006180:	d107      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006182:	f107 030c 	add.w	r3, r7, #12
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fad8 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006190:	e15d      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006196:	e15a      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006198:	4b3a      	ldr	r3, [pc, #232]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800619a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061a2:	4b38      	ldr	r3, [pc, #224]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d10c      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061b4:	4b33      	ldr	r3, [pc, #204]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	4a32      	ldr	r2, [pc, #200]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c6:	e01e      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061c8:	4b2e      	ldr	r3, [pc, #184]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	d106      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80061d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061dc:	d102      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80061de:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e2:	e010      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061e4:	4b27      	ldr	r3, [pc, #156]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f0:	d106      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f8:	d102      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061fa:	4b25      	ldr	r3, [pc, #148]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fe:	e002      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006204:	e123      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006206:	e122      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800620c:	e11f      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800620e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006212:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006216:	430b      	orrs	r3, r1
 8006218:	d13c      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006222:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d012      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006232:	e023      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006240:	d107      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fbcc 	bl	80069e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006250:	e0fd      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006256:	e0fa      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006258:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006264:	d107      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006266:	f107 0318 	add.w	r3, r7, #24
 800626a:	4618      	mov	r0, r3
 800626c:	f000 f912 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006274:	e0eb      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800627a:	e0e8      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006280:	e0e5      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	03d09000 	.word	0x03d09000
 800628c:	003d0900 	.word	0x003d0900
 8006290:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006298:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800629c:	430b      	orrs	r3, r1
 800629e:	f040 8085 	bne.w	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80062a2:	4b6d      	ldr	r3, [pc, #436]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80062aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062b2:	d06b      	beq.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ba:	d874      	bhi.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d056      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d86c      	bhi.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062d2:	d03b      	beq.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062da:	d864      	bhi.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e2:	d021      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ea:	d85c      	bhi.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062f8:	d004      	beq.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80062fa:	e054      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80062fc:	f000 f8b4 	bl	8006468 <HAL_RCCEx_GetD3PCLK1Freq>
 8006300:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006302:	e0a4      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006304:	4b54      	ldr	r3, [pc, #336]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800630c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006310:	d107      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006312:	f107 0318 	add.w	r3, r7, #24
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f8bc 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006320:	e095      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006326:	e092      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006328:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006334:	d107      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006336:	f107 030c 	add.w	r3, r7, #12
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f9fe 	bl	800673c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006344:	e083      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800634a:	e080      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800634c:	4b42      	ldr	r3, [pc, #264]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b04      	cmp	r3, #4
 8006356:	d109      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006358:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	08db      	lsrs	r3, r3, #3
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	4a3e      	ldr	r2, [pc, #248]	; (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006364:	fa22 f303 	lsr.w	r3, r2, r3
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800636a:	e070      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006370:	e06d      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006372:	4b39      	ldr	r3, [pc, #228]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637e:	d102      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006380:	4b37      	ldr	r3, [pc, #220]	; (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006384:	e063      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800638a:	e060      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800638c:	4b32      	ldr	r3, [pc, #200]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006398:	d102      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800639a:	4b32      	ldr	r3, [pc, #200]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800639e:	e056      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063a4:	e053      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063aa:	e050      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80063ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80063b4:	430b      	orrs	r3, r1
 80063b6:	d148      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80063b8:	4b27      	ldr	r3, [pc, #156]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c8:	d02a      	beq.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d0:	d838      	bhi.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063de:	d00d      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80063e0:	e030      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ee:	d102      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80063f0:	4b1c      	ldr	r3, [pc, #112]	; (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f4:	e02b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fa:	e028      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063fc:	4b16      	ldr	r3, [pc, #88]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d107      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fae8 	bl	80069e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006418:	e019      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641e:	e016      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642c:	d107      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800642e:	f107 0318 	add.w	r3, r7, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f82e 	bl	8006494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800643c:	e007      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006442:	e004      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006448:	e001      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006450:	4618      	mov	r0, r3
 8006452:	3740      	adds	r7, #64	; 0x40
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	58024400 	.word	0x58024400
 800645c:	03d09000 	.word	0x03d09000
 8006460:	003d0900 	.word	0x003d0900
 8006464:	017d7840 	.word	0x017d7840

08006468 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800646c:	f7fe f944 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4904      	ldr	r1, [pc, #16]	; (8006490 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	58024400 	.word	0x58024400
 8006490:	08007028 	.word	0x08007028

08006494 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006494:	b480      	push	{r7}
 8006496:	b089      	sub	sp, #36	; 0x24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800649c:	4ba1      	ldr	r3, [pc, #644]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80064a6:	4b9f      	ldr	r3, [pc, #636]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	0b1b      	lsrs	r3, r3, #12
 80064ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80064b2:	4b9c      	ldr	r3, [pc, #624]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	091b      	lsrs	r3, r3, #4
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80064be:	4b99      	ldr	r3, [pc, #612]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	08db      	lsrs	r3, r3, #3
 80064c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8111 	beq.w	8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f000 8083 	beq.w	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	f200 80a1 	bhi.w	8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d056      	beq.n	80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80064fe:	e099      	b.n	8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006500:	4b88      	ldr	r3, [pc, #544]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d02d      	beq.n	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800650c:	4b85      	ldr	r3, [pc, #532]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	08db      	lsrs	r3, r3, #3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	4a84      	ldr	r2, [pc, #528]	; (8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	4b7b      	ldr	r3, [pc, #492]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006546:	ed97 6a03 	vldr	s12, [r7, #12]
 800654a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006566:	e087      	b.n	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657a:	4b6a      	ldr	r3, [pc, #424]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658a:	ed97 6a03 	vldr	s12, [r7, #12]
 800658e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065aa:	e065      	b.n	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065be:	4b59      	ldr	r3, [pc, #356]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ee:	e043      	b.n	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006602:	4b48      	ldr	r3, [pc, #288]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006612:	ed97 6a03 	vldr	s12, [r7, #12]
 8006616:	eddf 5a45 	vldr	s11, [pc, #276]	; 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800661a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006632:	e021      	b.n	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006646:	4b37      	ldr	r3, [pc, #220]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006656:	ed97 6a03 	vldr	s12, [r7, #12]
 800665a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800665e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006676:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006678:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	0a5b      	lsrs	r3, r3, #9
 800667e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800668e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006692:	edd7 6a07 	vldr	s13, [r7, #28]
 8006696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669e:	ee17 2a90 	vmov	r2, s15
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80066a6:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066cc:	ee17 2a90 	vmov	r2, s15
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80066d4:	4b13      	ldr	r3, [pc, #76]	; (8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fa:	ee17 2a90 	vmov	r2, s15
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006702:	e008      	b.n	8006716 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	609a      	str	r2, [r3, #8]
}
 8006716:	bf00      	nop
 8006718:	3724      	adds	r7, #36	; 0x24
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	58024400 	.word	0x58024400
 8006728:	03d09000 	.word	0x03d09000
 800672c:	46000000 	.word	0x46000000
 8006730:	4c742400 	.word	0x4c742400
 8006734:	4a742400 	.word	0x4a742400
 8006738:	4bbebc20 	.word	0x4bbebc20

0800673c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800673c:	b480      	push	{r7}
 800673e:	b089      	sub	sp, #36	; 0x24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006744:	4ba1      	ldr	r3, [pc, #644]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800674e:	4b9f      	ldr	r3, [pc, #636]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	0d1b      	lsrs	r3, r3, #20
 8006754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006758:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800675a:	4b9c      	ldr	r3, [pc, #624]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006766:	4b99      	ldr	r3, [pc, #612]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8111 	beq.w	80069ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b02      	cmp	r3, #2
 800678e:	f000 8083 	beq.w	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b02      	cmp	r3, #2
 8006796:	f200 80a1 	bhi.w	80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d056      	beq.n	8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80067a6:	e099      	b.n	80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a8:	4b88      	ldr	r3, [pc, #544]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02d      	beq.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b4:	4b85      	ldr	r3, [pc, #532]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	4a84      	ldr	r2, [pc, #528]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067de:	4b7b      	ldr	r3, [pc, #492]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800680e:	e087      	b.n	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	4b6a      	ldr	r3, [pc, #424]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	ed97 6a03 	vldr	s12, [r7, #12]
 8006836:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800683a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006852:	e065      	b.n	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a03 	vldr	s12, [r7, #12]
 800687a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006896:	e043      	b.n	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b48      	ldr	r3, [pc, #288]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80068be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068da:	e021      	b.n	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006902:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006920:	4b2a      	ldr	r3, [pc, #168]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	0a5b      	lsrs	r3, r3, #9
 8006926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693a:	edd7 6a07 	vldr	s13, [r7, #28]
 800693e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006946:	ee17 2a90 	vmov	r2, s15
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800694e:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006964:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006968:	edd7 6a07 	vldr	s13, [r7, #28]
 800696c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006974:	ee17 2a90 	vmov	r2, s15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800697c:	4b13      	ldr	r3, [pc, #76]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	0e1b      	lsrs	r3, r3, #24
 8006982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006996:	edd7 6a07 	vldr	s13, [r7, #28]
 800699a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a2:	ee17 2a90 	vmov	r2, s15
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80069aa:	e008      	b.n	80069be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	609a      	str	r2, [r3, #8]
}
 80069be:	bf00      	nop
 80069c0:	3724      	adds	r7, #36	; 0x24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	58024400 	.word	0x58024400
 80069d0:	03d09000 	.word	0x03d09000
 80069d4:	46000000 	.word	0x46000000
 80069d8:	4c742400 	.word	0x4c742400
 80069dc:	4a742400 	.word	0x4a742400
 80069e0:	4bbebc20 	.word	0x4bbebc20

080069e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b089      	sub	sp, #36	; 0x24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ec:	4ba0      	ldr	r3, [pc, #640]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80069f6:	4b9e      	ldr	r3, [pc, #632]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	091b      	lsrs	r3, r3, #4
 80069fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006a02:	4b9b      	ldr	r3, [pc, #620]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a0c:	4b98      	ldr	r3, [pc, #608]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	08db      	lsrs	r3, r3, #3
 8006a12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	fb02 f303 	mul.w	r3, r2, r3
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8111 	beq.w	8006c52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	f000 8083 	beq.w	8006b3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	f200 80a1 	bhi.w	8006b82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d056      	beq.n	8006afa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006a4c:	e099      	b.n	8006b82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a4e:	4b88      	ldr	r3, [pc, #544]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d02d      	beq.n	8006ab6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a5a:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	08db      	lsrs	r3, r3, #3
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	4a83      	ldr	r2, [pc, #524]	; (8006c74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a84:	4b7a      	ldr	r3, [pc, #488]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a94:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ab4:	e087      	b.n	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006c7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac8:	4b69      	ldr	r3, [pc, #420]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad0:	ee07 3a90 	vmov	s15, r3
 8006ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006adc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af8:	e065      	b.n	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006c80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006b08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0c:	4b58      	ldr	r3, [pc, #352]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b20:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b3c:	e043      	b.n	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b50:	4b47      	ldr	r3, [pc, #284]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b60:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b64:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b80:	e021      	b.n	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	ee07 3a90 	vmov	s15, r3
 8006b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006c7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b94:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006bc6:	4b2a      	ldr	r3, [pc, #168]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	0a5b      	lsrs	r3, r3, #9
 8006bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bec:	ee17 2a90 	vmov	r2, s15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1a:	ee17 2a90 	vmov	r2, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006c22:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	0e1b      	lsrs	r3, r3, #24
 8006c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 2a90 	vmov	r2, s15
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c50:	e008      	b.n	8006c64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	3724      	adds	r7, #36	; 0x24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	58024400 	.word	0x58024400
 8006c74:	03d09000 	.word	0x03d09000
 8006c78:	46000000 	.word	0x46000000
 8006c7c:	4c742400 	.word	0x4c742400
 8006c80:	4a742400 	.word	0x4a742400
 8006c84:	4bbebc20 	.word	0x4bbebc20

08006c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c96:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d101      	bne.n	8006ca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e099      	b.n	8006dda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ca6:	4b4f      	ldr	r3, [pc, #316]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a4e      	ldr	r2, [pc, #312]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb2:	f7f9 ffb3 	bl	8000c1c <HAL_GetTick>
 8006cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cb8:	e008      	b.n	8006ccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cba:	f7f9 ffaf 	bl	8000c1c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e086      	b.n	8006dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cd8:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	031b      	lsls	r3, r3, #12
 8006ce6:	493f      	ldr	r1, [pc, #252]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	628b      	str	r3, [r1, #40]	; 0x28
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	025b      	lsls	r3, r3, #9
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	061b      	lsls	r3, r3, #24
 8006d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d1c:	4931      	ldr	r1, [pc, #196]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d22:	4b30      	ldr	r3, [pc, #192]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	492d      	ldr	r1, [pc, #180]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d34:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f023 0220 	bic.w	r2, r3, #32
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	4928      	ldr	r1, [pc, #160]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d46:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	f023 0310 	bic.w	r3, r3, #16
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d56:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <RCCEx_PLL2_Config+0x160>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	69d2      	ldr	r2, [r2, #28]
 8006d5e:	00d2      	lsls	r2, r2, #3
 8006d60:	4920      	ldr	r1, [pc, #128]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d66:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	f043 0310 	orr.w	r3, r3, #16
 8006d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d84:	e00f      	b.n	8006da6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d98:	e005      	b.n	8006da6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db2:	f7f9 ff33 	bl	8000c1c <HAL_GetTick>
 8006db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006db8:	e008      	b.n	8006dcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dba:	f7f9 ff2f 	bl	8000c1c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e006      	b.n	8006dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
 8006de8:	ffff0007 	.word	0xffff0007

08006dec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dfa:	4b53      	ldr	r3, [pc, #332]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d101      	bne.n	8006e0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e099      	b.n	8006f3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e0a:	4b4f      	ldr	r3, [pc, #316]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a4e      	ldr	r2, [pc, #312]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e16:	f7f9 ff01 	bl	8000c1c <HAL_GetTick>
 8006e1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e1c:	e008      	b.n	8006e30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e1e:	f7f9 fefd 	bl	8000c1c <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e086      	b.n	8006f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e30:	4b45      	ldr	r3, [pc, #276]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e3c:	4b42      	ldr	r3, [pc, #264]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	051b      	lsls	r3, r3, #20
 8006e4a:	493f      	ldr	r1, [pc, #252]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	025b      	lsls	r3, r3, #9
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e80:	4931      	ldr	r1, [pc, #196]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e86:	4b30      	ldr	r3, [pc, #192]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	492d      	ldr	r1, [pc, #180]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e98:	4b2b      	ldr	r3, [pc, #172]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	4928      	ldr	r1, [pc, #160]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eaa:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a26      	ldr	r2, [pc, #152]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eb6:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eba:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <RCCEx_PLL3_Config+0x160>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	69d2      	ldr	r2, [r2, #28]
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	4920      	ldr	r1, [pc, #128]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006eca:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006edc:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ee8:	e00f      	b.n	8006f0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d106      	bne.n	8006efe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ef0:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006efc:	e005      	b.n	8006f0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a0e      	ldr	r2, [pc, #56]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f16:	f7f9 fe81 	bl	8000c1c <HAL_GetTick>
 8006f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f1c:	e008      	b.n	8006f30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f1e:	f7f9 fe7d 	bl	8000c1c <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <RCCEx_PLL3_Config+0x15c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	ffff0007 	.word	0xffff0007

08006f50 <memset>:
 8006f50:	4402      	add	r2, r0
 8006f52:	4603      	mov	r3, r0
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d100      	bne.n	8006f5a <memset+0xa>
 8006f58:	4770      	bx	lr
 8006f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5e:	e7f9      	b.n	8006f54 <memset+0x4>

08006f60 <__libc_init_array>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	4d0d      	ldr	r5, [pc, #52]	; (8006f98 <__libc_init_array+0x38>)
 8006f64:	4c0d      	ldr	r4, [pc, #52]	; (8006f9c <__libc_init_array+0x3c>)
 8006f66:	1b64      	subs	r4, r4, r5
 8006f68:	10a4      	asrs	r4, r4, #2
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	d109      	bne.n	8006f84 <__libc_init_array+0x24>
 8006f70:	4d0b      	ldr	r5, [pc, #44]	; (8006fa0 <__libc_init_array+0x40>)
 8006f72:	4c0c      	ldr	r4, [pc, #48]	; (8006fa4 <__libc_init_array+0x44>)
 8006f74:	f000 f826 	bl	8006fc4 <_init>
 8006f78:	1b64      	subs	r4, r4, r5
 8006f7a:	10a4      	asrs	r4, r4, #2
 8006f7c:	2600      	movs	r6, #0
 8006f7e:	42a6      	cmp	r6, r4
 8006f80:	d105      	bne.n	8006f8e <__libc_init_array+0x2e>
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f88:	4798      	blx	r3
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7ee      	b.n	8006f6c <__libc_init_array+0xc>
 8006f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f92:	4798      	blx	r3
 8006f94:	3601      	adds	r6, #1
 8006f96:	e7f2      	b.n	8006f7e <__libc_init_array+0x1e>
 8006f98:	08007048 	.word	0x08007048
 8006f9c:	08007048 	.word	0x08007048
 8006fa0:	08007048 	.word	0x08007048
 8006fa4:	0800704c 	.word	0x0800704c

08006fa8 <memcpy>:
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb0:	d100      	bne.n	8006fb4 <memcpy+0xc>
 8006fb2:	4770      	bx	lr
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d1f9      	bne.n	8006fb6 <memcpy+0xe>
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
