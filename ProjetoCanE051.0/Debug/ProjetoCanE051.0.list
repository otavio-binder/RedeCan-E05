
ProjetoCanE051.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080078d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000015c  24000010  080078e0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400016c  080078e0  0002016c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012277  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001fd7  00000000  00000000  000322f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee8  00000000  00000000  000342d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b5a  00000000  00000000  000351b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003382a  00000000  00000000  00035d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001066c  00000000  00000000  0006953c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157d23  00000000  00000000  00079ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004098  00000000  00000000  001d18cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  001d5964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007844 	.word	0x08007844

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007844 	.word	0x08007844

0800030c <Read_ADC_Values>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PotReads Read_ADC_Values(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08c      	sub	sp, #48	; 0x30
 8000310:	af00      	add	r7, sp, #0
	PotReads pot;
    // Leitura do Canal 1
	ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2224      	movs	r2, #36	; 0x24
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f007 fa59 	bl	80077d0 <memset>
	sConfig.Channel = ADC_CHANNEL_6;
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <Read_ADC_Values+0x98>)
 8000320:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	4820      	ldr	r0, [pc, #128]	; (80003a8 <Read_ADC_Values+0x9c>)
 8000328:	f001 fe4a 	bl	8001fc0 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 800032c:	481e      	ldr	r0, [pc, #120]	; (80003a8 <Read_ADC_Values+0x9c>)
 800032e:	f001 f9ef 	bl	8001710 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000); //lendo o valor dos potenciometros
 8000332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000336:	481c      	ldr	r0, [pc, #112]	; (80003a8 <Read_ADC_Values+0x9c>)
 8000338:	f001 fae8 	bl	800190c <HAL_ADC_PollForConversion>
	pot.PotLog = HAL_ADC_GetValue(&hadc1);
 800033c:	481a      	ldr	r0, [pc, #104]	; (80003a8 <Read_ADC_Values+0x9c>)
 800033e:	f001 fbd9 	bl	8001af4 <HAL_ADC_GetValue>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	857b      	strh	r3, [r7, #42]	; 0x2a
    HAL_ADC_Stop(&hadc1);
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <Read_ADC_Values+0x9c>)
 800034a:	f001 faab 	bl	80018a4 <HAL_ADC_Stop>

    // Leitura do Canal 2
	sConfig.Channel = ADC_CHANNEL_7;
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <Read_ADC_Values+0xa0>)
 8000350:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4814      	ldr	r0, [pc, #80]	; (80003a8 <Read_ADC_Values+0x9c>)
 8000358:	f001 fe32 	bl	8001fc0 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <Read_ADC_Values+0x9c>)
 800035e:	f001 f9d7 	bl	8001710 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8000362:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <Read_ADC_Values+0x9c>)
 8000368:	f001 fad0 	bl	800190c <HAL_ADC_PollForConversion>
    pot.PotLin = HAL_ADC_GetValue(&hadc1); //lendo o valor dos potenciometros
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <Read_ADC_Values+0x9c>)
 800036e:	f001 fbc1 	bl	8001af4 <HAL_ADC_GetValue>
 8000372:	4603      	mov	r3, r0
 8000374:	b29b      	uxth	r3, r3
 8000376:	853b      	strh	r3, [r7, #40]	; 0x28
    HAL_ADC_Stop(&hadc1);
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <Read_ADC_Values+0x9c>)
 800037a:	f001 fa93 	bl	80018a4 <HAL_ADC_Stop>
    dif = pot.PotLin - pot.PotLog;
 800037e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000380:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <Read_ADC_Values+0xa4>)
 8000388:	801a      	strh	r2, [r3, #0]
    return pot;
 800038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800038e:	2300      	movs	r3, #0
 8000390:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000392:	f362 030f 	bfi	r3, r2, #0, #16
 8000396:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000398:	f362 431f 	bfi	r3, r2, #16, #16
}
 800039c:	4618      	mov	r0, r3
 800039e:	3730      	adds	r7, #48	; 0x30
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	19200040 	.word	0x19200040
 80003a8:	2400002c 	.word	0x2400002c
 80003ac:	1d500080 	.word	0x1d500080
 80003b0:	24000166 	.word	0x24000166

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fc0f 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f86b 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f9c7 	bl	8000754 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003c6:	f000 f8d7 	bl	8000578 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80003ca:	f000 f95f 	bl	800068c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80003ce:	482d      	ldr	r0, [pc, #180]	; (8000484 <main+0xd0>)
 80003d0:	f003 f9e2 	bl	8003798 <HAL_FDCAN_Start>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <main+0x2a>

     	  Error_Handler();
 80003da:	f000 fa03 	bl	80007e4 <Error_Handler>
       }

if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK){
 80003de:	2200      	movs	r2, #0
 80003e0:	2101      	movs	r1, #1
 80003e2:	4828      	ldr	r0, [pc, #160]	; (8000484 <main+0xd0>)
 80003e4:	f003 fa5e 	bl	80038a4 <HAL_FDCAN_ActivateNotification>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <main+0x3e>
     	  Error_Handler();
 80003ee:	f000 f9f9 	bl	80007e4 <Error_Handler>

   }

// Configurando os parâmetros da mensagem
 	 TxHeader.Identifier = 0x10; // Identificador da mensagem
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <main+0xd4>)
 80003f4:	2210      	movs	r2, #16
 80003f6:	601a      	str	r2, [r3, #0]
	 TxHeader.IdType = FDCAN_STANDARD_ID; // Tipo de identificador: Padrão
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <main+0xd4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
	 TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Tipo de quadro: Quadro de dados
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <main+0xd4>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
	 TxHeader.DataLength = FDCAN_DLC_BYTES_8; // Comprimento dos dados: 8 bytes
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <main+0xd4>)
 8000406:	2208      	movs	r2, #8
 8000408:	60da      	str	r2, [r3, #12]
	 TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Indicador de estado de erro ativo
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <main+0xd4>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
	 TxHeader.BitRateSwitch = FDCAN_BRS_OFF; // Troca de taxa de bits desativada
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <main+0xd4>)
 8000412:	2200      	movs	r2, #0
 8000414:	615a      	str	r2, [r3, #20]
	 TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Formato CAN clasica
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <main+0xd4>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
	 TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; // Sem controle de FIFO de evento de transmissão
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <main+0xd4>)
 800041e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000422:	61da      	str	r2, [r3, #28]
	 TxHeader.MessageMarker = 0; // Marcador de mensagem
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <main+0xd4>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800042a:	4818      	ldr	r0, [pc, #96]	; (800048c <main+0xd8>)
 800042c:	f001 f970 	bl	8001710 <HAL_ADC_Start>
	  PotReads pots = Read_ADC_Values();
 8000430:	f7ff ff6c 	bl	800030c <Read_ADC_Values>
 8000434:	4603      	mov	r3, r0
 8000436:	607b      	str	r3, [r7, #4]
		TxData[0] = pots.PotLin & 0xFF;
 8000438:	88bb      	ldrh	r3, [r7, #4]
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <main+0xdc>)
 800043e:	701a      	strb	r2, [r3, #0]
		TxData[1] = (pots.PotLin >>8) & 0xFF;
 8000440:	88bb      	ldrh	r3, [r7, #4]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b29b      	uxth	r3, r3
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <main+0xdc>)
 800044a:	705a      	strb	r2, [r3, #1]
		TxData[2] = pots.PotLog & 0xFF;
 800044c:	88fb      	ldrh	r3, [r7, #6]
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <main+0xdc>)
 8000452:	709a      	strb	r2, [r3, #2]
		TxData[3] = (pots.PotLog >>8) & 0xFF;
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	b29b      	uxth	r3, r3
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <main+0xdc>)
 800045e:	70da      	strb	r2, [r3, #3]
		TxData[4] = dif & 0xFF;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <main+0xe0>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <main+0xdc>)
 8000468:	711a      	strb	r2, [r3, #4]
		TxData[5] = (dif >>8) & 0xFF;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <main+0xe0>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	b29b      	uxth	r3, r3
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <main+0xdc>)
 8000476:	715a      	strb	r2, [r3, #5]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8000478:	4a05      	ldr	r2, [pc, #20]	; (8000490 <main+0xdc>)
 800047a:	4903      	ldr	r1, [pc, #12]	; (8000488 <main+0xd4>)
 800047c:	4801      	ldr	r0, [pc, #4]	; (8000484 <main+0xd0>)
 800047e:	f003 f9b6 	bl	80037ee <HAL_FDCAN_AddMessageToTxFifoQ>
  {
 8000482:	e7d2      	b.n	800042a <main+0x76>
 8000484:	2400009c 	.word	0x2400009c
 8000488:	2400013c 	.word	0x2400013c
 800048c:	2400002c 	.word	0x2400002c
 8000490:	24000160 	.word	0x24000160
 8000494:	24000166 	.word	0x24000166

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b09c      	sub	sp, #112	; 0x70
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a2:	224c      	movs	r2, #76	; 0x4c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f007 f992 	bl	80077d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f007 f98c 	bl	80077d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004b8:	2002      	movs	r0, #2
 80004ba:	f003 fe19 	bl	80040f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004be:	2300      	movs	r3, #0
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	4b2c      	ldr	r3, [pc, #176]	; (8000574 <SystemClock_Config+0xdc>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ca:	4a2a      	ldr	r2, [pc, #168]	; (8000574 <SystemClock_Config+0xdc>)
 80004cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <SystemClock_Config+0xdc>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004de:	bf00      	nop
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <SystemClock_Config+0xdc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ec:	d1f8      	bne.n	80004e0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ee:	2302      	movs	r3, #2
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fe:	2300      	movs	r3, #0
 8000500:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000502:	2304      	movs	r3, #4
 8000504:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000506:	230c      	movs	r3, #12
 8000508:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800050a:	2302      	movs	r3, #2
 800050c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800050e:	230c      	movs	r3, #12
 8000510:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000512:	2302      	movs	r3, #2
 8000514:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000516:	230c      	movs	r3, #12
 8000518:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800051a:	2300      	movs	r3, #0
 800051c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fe1c 	bl	8004164 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000532:	f000 f957 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	233f      	movs	r3, #63	; 0x3f
 8000538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f004 f9dc 	bl	8004918 <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000566:	f000 f93d 	bl	80007e4 <Error_Handler>
  }
}
 800056a:	bf00      	nop
 800056c:	3770      	adds	r7, #112	; 0x70
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	58024800 	.word	0x58024800

08000578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f007 f91d 	bl	80077d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000596:	4b39      	ldr	r3, [pc, #228]	; (800067c <MX_ADC1_Init+0x104>)
 8000598:	4a39      	ldr	r2, [pc, #228]	; (8000680 <MX_ADC1_Init+0x108>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <MX_ADC1_Init+0x104>)
 800059e:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <MX_ADC1_Init+0x104>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005aa:	4b34      	ldr	r3, [pc, #208]	; (800067c <MX_ADC1_Init+0x104>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b0:	4b32      	ldr	r3, [pc, #200]	; (800067c <MX_ADC1_Init+0x104>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <MX_ADC1_Init+0x104>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <MX_ADC1_Init+0x104>)
 80005be:	2201      	movs	r2, #1
 80005c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_ADC1_Init+0x104>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <MX_ADC1_Init+0x104>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <MX_ADC1_Init+0x104>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b29      	ldr	r3, [pc, #164]	; (800067c <MX_ADC1_Init+0x104>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_ADC1_Init+0x104>)
 80005de:	2200      	movs	r2, #0
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_ADC1_Init+0x104>)
 80005e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <MX_ADC1_Init+0x104>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_ADC1_Init+0x104>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	4820      	ldr	r0, [pc, #128]	; (800067c <MX_ADC1_Init+0x104>)
 80005fa:	f000 fe81 	bl	8001300 <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000604:	f000 f8ee 	bl	80007e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000610:	4619      	mov	r1, r3
 8000612:	481a      	ldr	r0, [pc, #104]	; (800067c <MX_ADC1_Init+0x104>)
 8000614:	f002 fcf0 	bl	8002ff8 <HAL_ADCEx_MultiModeConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800061e:	f000 f8e1 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x10c>)
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000626:	2306      	movs	r3, #6
 8000628:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000632:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x104>)
 8000648:	f001 fcba 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000652:	f000 f8c7 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_ADC1_Init+0x110>)
 8000658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800065a:	230c      	movs	r3, #12
 800065c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_ADC1_Init+0x104>)
 8000664:	f001 fcac 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800066e:	f000 f8b9 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	; 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2400002c 	.word	0x2400002c
 8000680:	40022000 	.word	0x40022000
 8000684:	19200040 	.word	0x19200040
 8000688:	1d500080 	.word	0x1d500080

0800068c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <MX_FDCAN1_Init+0xc4>)
 8000694:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <MX_FDCAN1_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006bc:	2202      	movs	r2, #2
 80006be:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 61;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006c2:	223d      	movs	r2, #61	; 0x3d
 80006c4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006d4:	220f      	movs	r2, #15
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006da:	2210      	movs	r2, #16
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006e0:	220f      	movs	r2, #15
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_FDCAN1_Init+0xc0>)
 80006fe:	2204      	movs	r2, #4
 8000700:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_FDCAN1_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_FDCAN1_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_FDCAN1_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_FDCAN1_Init+0xc0>)
 8000734:	2204      	movs	r2, #4
 8000736:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_FDCAN1_Init+0xc0>)
 800073a:	f002 fe4f 	bl	80033dc <HAL_FDCAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000744:	f000 f84e 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2400009c 	.word	0x2400009c
 8000750:	4000a000 	.word	0x4000a000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0x8c>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0x8c>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x8c>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	58024400 	.word	0x58024400

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x30>)
 80007f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x30>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x30>)
 8000808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58024400 	.word	0x58024400

08000824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ba      	sub	sp, #232	; 0xe8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	22b8      	movs	r2, #184	; 0xb8
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f006 ffc3 	bl	80077d0 <memset>
  if(hadc->Instance==ADC1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a3f      	ldr	r2, [pc, #252]	; (800094c <HAL_ADC_MspInit+0x128>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d176      	bne.n	8000942 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000854:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000864:	230c      	movs	r3, #12
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000868:	2305      	movs	r3, #5
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000874:	23c0      	movs	r3, #192	; 0xc0
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fbba 	bl	8005004 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000896:	f7ff ffa5 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 800089c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a0:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008a2:	f043 0320 	orr.w	r3, r3, #32
 80008a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_ADC_MspInit+0x12c>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fa:	2303      	movs	r3, #3
 80008fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800090a:	4619      	mov	r1, r3
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <HAL_ADC_MspInit+0x130>)
 800090e:	f003 fa47 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000926:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800092a:	4619      	mov	r1, r3
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <HAL_ADC_MspInit+0x134>)
 800092e:	f003 fa37 	bl	8003da0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2012      	movs	r0, #18
 8000938:	f002 fd1b 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800093c:	2012      	movs	r0, #18
 800093e:	f002 fd32 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	37e8      	adds	r7, #232	; 0xe8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000
 8000950:	58024400 	.word	0x58024400
 8000954:	58020000 	.word	0x58020000
 8000958:	58021400 	.word	0x58021400

0800095c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0b8      	sub	sp, #224	; 0xe0
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	22b8      	movs	r2, #184	; 0xb8
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f006 ff27 	bl	80077d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <HAL_FDCAN_MspInit+0xc8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d146      	bne.n	8000a1a <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800098c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800099c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 fb2e 	bl	8005004 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80009ae:	f7ff ff19 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_FDCAN_MspInit+0xcc>)
 80009b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <HAL_FDCAN_MspInit+0xcc>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_FDCAN_MspInit+0xcc>)
 80009c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_FDCAN_MspInit+0xcc>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_FDCAN_MspInit+0xcc>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_FDCAN_MspInit+0xcc>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_FDCAN_MspInit+0xd0>)
 8000a16:	f003 f9c3 	bl	8003da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	37e0      	adds	r7, #224	; 0xe0
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	4000a000 	.word	0x4000a000
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58020000 	.word	0x58020000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f920 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <ADC_IRQHandler+0x10>)
 8000a8a:	f001 f841 	bl	8001b10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2400002c 	.word	0x2400002c

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <SystemInit+0xd0>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <SystemInit+0xd0>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <SystemInit+0xd4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d807      	bhi.n	8000ac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <SystemInit+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 030f 	bic.w	r3, r3, #15
 8000ac0:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <SystemInit+0xd4>)
 8000ac2:	f043 0307 	orr.w	r3, r3, #7
 8000ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <SystemInit+0xd8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <SystemInit+0xd8>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <SystemInit+0xd8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemInit+0xd8>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4924      	ldr	r1, [pc, #144]	; (8000b70 <SystemInit+0xd8>)
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemInit+0xdc>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <SystemInit+0xd4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <SystemInit+0xd4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <SystemInit+0xd4>)
 8000afc:	f043 0307 	orr.w	r3, r3, #7
 8000b00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <SystemInit+0xd8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <SystemInit+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <SystemInit+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <SystemInit+0xd8>)
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <SystemInit+0xe0>)
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <SystemInit+0xd8>)
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <SystemInit+0xe4>)
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <SystemInit+0xd8>)
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <SystemInit+0xe8>)
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <SystemInit+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <SystemInit+0xd8>)
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <SystemInit+0xe8>)
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <SystemInit+0xd8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <SystemInit+0xd8>)
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0xe8>)
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <SystemInit+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <SystemInit+0xd8>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <SystemInit+0xd8>)
 8000b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <SystemInit+0xd8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <SystemInit+0xec>)
 8000b58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	52002000 	.word	0x52002000
 8000b70:	58024400 	.word	0x58024400
 8000b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b78:	02020200 	.word	0x02020200
 8000b7c:	01ff0000 	.word	0x01ff0000
 8000b80:	01010280 	.word	0x01010280
 8000b84:	52004000 	.word	0x52004000

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	f7ff ff84 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f006 fe13 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fbfb 	bl	80003b4 <main>
  bx  lr
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000bc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bc8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bcc:	080078d0 	.word	0x080078d0
  ldr r2, =_sbss
 8000bd0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bd4:	2400016c 	.word	0x2400016c

08000bd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC3_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f002 fbba 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000be8:	f004 f84c 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8000bec:	4602      	mov	r2, r0
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_Init+0x68>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	4913      	ldr	r1, [pc, #76]	; (8000c48 <HAL_Init+0x6c>)
 8000bfa:	5ccb      	ldrb	r3, [r1, r3]
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
 8000c04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_Init+0x68>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_Init+0x6c>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	f003 031f 	and.w	r3, r3, #31
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_Init+0x70>)
 8000c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_Init+0x74>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f814 	bl	8000c54 <HAL_InitTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e002      	b.n	8000c3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c36:	f7ff fddb 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024400 	.word	0x58024400
 8000c48:	080078a8 	.word	0x080078a8
 8000c4c:	24000004 	.word	0x24000004
 8000c50:	24000000 	.word	0x24000000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e021      	b.n	8000cac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_InitTick+0x64>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fb9f 	bl	80033c2 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f002 fb69 	bl	8003372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x68>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2400000c 	.word	0x2400000c
 8000cb8:	24000000 	.word	0x24000000
 8000cbc:	24000008 	.word	0x24000008

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2400000c 	.word	0x2400000c
 8000ce4:	24000168 	.word	0x24000168

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	24000168 	.word	0x24000168

08000d00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	609a      	str	r2, [r3, #8]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3360      	adds	r3, #96	; 0x60
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <LL_ADC_SetOffset+0x60>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d10b      	bne.n	8000da4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000da2:	e00b      	b.n	8000dbc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	430b      	orrs	r3, r1
 8000db6:	431a      	orrs	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	58026000 	.word	0x58026000

08000dcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3360      	adds	r3, #96	; 0x60
 8000dda:	461a      	mov	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d00e      	beq.n	8000e5e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3360      	adds	r3, #96	; 0x60
 8000e44:	461a      	mov	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	601a      	str	r2, [r3, #0]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	58026000 	.word	0x58026000

08000e70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <LL_ADC_SetOffsetSaturation+0x40>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d10e      	bne.n	8000ea2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3360      	adds	r3, #96	; 0x60
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	58026000 	.word	0x58026000

08000eb4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <LL_ADC_SetOffsetSign+0x40>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d10e      	bne.n	8000ee6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3360      	adds	r3, #96	; 0x60
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	58026000 	.word	0x58026000

08000ef8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3360      	adds	r3, #96	; 0x60
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <LL_ADC_SetOffsetState+0x50>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d108      	bne.n	8000f2c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8000f2a:	e007      	b.n	8000f3c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	58026000 	.word	0x58026000

08000f4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b087      	sub	sp, #28
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3330      	adds	r3, #48	; 0x30
 8000f82:	461a      	mov	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	4413      	add	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	211f      	movs	r1, #31
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0e9b      	lsrs	r3, r3, #26
 8000faa:	f003 011f 	and.w	r1, r3, #31
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fbe:	bf00      	nop
 8000fc0:	371c      	adds	r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3314      	adds	r3, #20
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	0e5b      	lsrs	r3, r3, #25
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	0d1b      	lsrs	r3, r3, #20
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	2107      	movs	r1, #7
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	401a      	ands	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	0d1b      	lsrs	r3, r3, #20
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	431a      	orrs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d115      	bne.n	8001088 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0318 	and.w	r3, r3, #24
 8001072:	4914      	ldr	r1, [pc, #80]	; (80010c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001074:	40d9      	lsrs	r1, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	400b      	ands	r3, r1
 800107a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800107e:	431a      	orrs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001086:	e014      	b.n	80010b2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0318 	and.w	r3, r3, #24
 800109e:	4909      	ldr	r1, [pc, #36]	; (80010c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	400b      	ands	r3, r1
 80010a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	58026000 	.word	0x58026000
 80010c4:	000fffff 	.word	0x000fffff

080010c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 031f 	and.w	r3, r3, #31
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <LL_ADC_DisableDeepPowerDown+0x20>)
 800110e:	4013      	ands	r3, r2
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6093      	str	r3, [r2, #8]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	5fffffc0 	.word	0x5fffffc0

08001124 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001138:	d101      	bne.n	800113e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <LL_ADC_EnableInternalRegulator+0x24>)
 800115a:	4013      	ands	r3, r2
 800115c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	6fffffc0 	.word	0x6fffffc0

08001174 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001188:	d101      	bne.n	800118e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <LL_ADC_Enable+0x24>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	7fffffc0 	.word	0x7fffffc0

080011c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <LL_ADC_Disable+0x24>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	f043 0202 	orr.w	r2, r3, #2
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	7fffffc0 	.word	0x7fffffc0

080011ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <LL_ADC_IsEnabled+0x18>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <LL_ADC_IsEnabled+0x1a>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d101      	bne.n	800122a <LL_ADC_IsDisableOngoing+0x18>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <LL_ADC_IsDisableOngoing+0x1a>
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <LL_ADC_REG_StartConversion+0x24>)
 8001246:	4013      	ands	r3, r2
 8001248:	f043 0204 	orr.w	r2, r3, #4
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	7fffffc0 	.word	0x7fffffc0

08001260 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <LL_ADC_REG_StopConversion+0x24>)
 800126e:	4013      	ands	r3, r2
 8001270:	f043 0210 	orr.w	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	7fffffc0 	.word	0x7fffffc0

08001288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b04      	cmp	r3, #4
 800129a:	d101      	bne.n	80012a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <LL_ADC_INJ_StopConversion+0x24>)
 80012be:	4013      	ands	r3, r2
 80012c0:	f043 0220 	orr.w	r2, r3, #32
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	7fffffc0 	.word	0x7fffffc0

080012d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1ee      	b.n	80016f8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fa7b 	bl	8000824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff feef 	bl	8001124 <LL_ADC_IsDeepPowerDownEnabled>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fed5 	bl	8001100 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff0a 	bl	8001174 <LL_ADC_IsInternalRegulatorEnabled>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d114      	bne.n	8001390 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff feee 	bl	800114c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001370:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <HAL_ADC_Init+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	099b      	lsrs	r3, r3, #6
 8001376:	4a8e      	ldr	r2, [pc, #568]	; (80015b0 <HAL_ADC_Init+0x2b0>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	3301      	adds	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001382:	e002      	b.n	800138a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3b01      	subs	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f9      	bne.n	8001384 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff feed 	bl	8001174 <LL_ADC_IsInternalRegulatorEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10d      	bne.n	80013bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	f043 0210 	orr.w	r2, r3, #16
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff61 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 80013c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 8188 	bne.w	80016e6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 8184 	bne.w	80016e6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fefa 	bl	80011ec <LL_ADC_IsEnabled>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d136      	bne.n	800146c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6c      	ldr	r2, [pc, #432]	; (80015b4 <HAL_ADC_Init+0x2b4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Init+0x112>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_ADC_Init+0x2b8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10e      	bne.n	8001430 <HAL_ADC_Init+0x130>
 8001412:	4868      	ldr	r0, [pc, #416]	; (80015b4 <HAL_ADC_Init+0x2b4>)
 8001414:	f7ff feea 	bl	80011ec <LL_ADC_IsEnabled>
 8001418:	4604      	mov	r4, r0
 800141a:	4867      	ldr	r0, [pc, #412]	; (80015b8 <HAL_ADC_Init+0x2b8>)
 800141c:	f7ff fee6 	bl	80011ec <LL_ADC_IsEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	4323      	orrs	r3, r4
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e008      	b.n	8001442 <HAL_ADC_Init+0x142>
 8001430:	4862      	ldr	r0, [pc, #392]	; (80015bc <HAL_ADC_Init+0x2bc>)
 8001432:	f7ff fedb 	bl	80011ec <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a5a      	ldr	r2, [pc, #360]	; (80015b4 <HAL_ADC_Init+0x2b4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0x15a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_ADC_Init+0x2b8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_ADC_Init+0x15e>
 800145a:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <HAL_ADC_Init+0x2c0>)
 800145c:	e000      	b.n	8001460 <HAL_ADC_Init+0x160>
 800145e:	4a59      	ldr	r2, [pc, #356]	; (80015c4 <HAL_ADC_Init+0x2c4>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f7ff fc4a 	bl	8000d00 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_ADC_Init+0x2bc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d129      	bne.n	80014ca <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7e5b      	ldrb	r3, [r3, #25]
 800147a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001480:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001486:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d013      	beq.n	80014b8 <HAL_ADC_Init+0x1b8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d00d      	beq.n	80014b4 <HAL_ADC_Init+0x1b4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b1c      	cmp	r3, #28
 800149e:	d007      	beq.n	80014b0 <HAL_ADC_Init+0x1b0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b18      	cmp	r3, #24
 80014a6:	d101      	bne.n	80014ac <HAL_ADC_Init+0x1ac>
 80014a8:	2318      	movs	r3, #24
 80014aa:	e006      	b.n	80014ba <HAL_ADC_Init+0x1ba>
 80014ac:	2300      	movs	r3, #0
 80014ae:	e004      	b.n	80014ba <HAL_ADC_Init+0x1ba>
 80014b0:	2310      	movs	r3, #16
 80014b2:	e002      	b.n	80014ba <HAL_ADC_Init+0x1ba>
 80014b4:	2308      	movs	r3, #8
 80014b6:	e000      	b.n	80014ba <HAL_ADC_Init+0x1ba>
 80014b8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80014ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	e00e      	b.n	80014e8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7e5b      	ldrb	r3, [r3, #25]
 80014ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014d4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80014da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	045b      	lsls	r3, r3, #17
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_ADC_Init+0x2bc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d115      	bne.n	8001552 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_ADC_Init+0x2c8>)
 800152e:	4013      	ands	r3, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	430b      	orrs	r3, r1
 8001538:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	e009      	b.n	8001566 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_ADC_Init+0x2cc>)
 800155a:	4013      	ands	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	69b9      	ldr	r1, [r7, #24]
 8001562:	430b      	orrs	r3, r1
 8001564:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fe8c 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8001570:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff feae 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 800157c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f040 808e 	bne.w	80016a2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 808a 	bne.w	80016a2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_ADC_Init+0x2bc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d11b      	bne.n	80015d0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e1b      	ldrb	r3, [r3, #24]
 800159c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015a4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	e018      	b.n	80015de <HAL_ADC_Init+0x2de>
 80015ac:	24000000 	.word	0x24000000
 80015b0:	053e2d63 	.word	0x053e2d63
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40022100 	.word	0x40022100
 80015bc:	58026000 	.word	0x58026000
 80015c0:	40022300 	.word	0x40022300
 80015c4:	58026300 	.word	0x58026300
 80015c8:	fff04007 	.word	0xfff04007
 80015cc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7e1b      	ldrb	r3, [r3, #24]
 80015d4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	4b46      	ldr	r3, [pc, #280]	; (8001700 <HAL_ADC_Init+0x400>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	69b9      	ldr	r1, [r7, #24]
 80015ee:	430b      	orrs	r3, r1
 80015f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d137      	bne.n	800166c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <HAL_ADC_Init+0x404>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d116      	bne.n	800163a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_ADC_Init+0x408>)
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800161e:	4311      	orrs	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001624:	4311      	orrs	r1, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800162a:	430a      	orrs	r2, r1
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	e020      	b.n	800167c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_ADC_Init+0x40c>)
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001648:	3a01      	subs	r2, #1
 800164a:	0411      	lsls	r1, r2, #16
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001650:	4311      	orrs	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001656:	4311      	orrs	r1, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800165c:	430a      	orrs	r2, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	e007      	b.n	800167c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_ADC_Init+0x404>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f001 fb65 	bl	8002d6c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10c      	bne.n	80016c4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f023 010f 	bic.w	r1, r3, #15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020f 	bic.w	r2, r2, #15
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	661a      	str	r2, [r3, #96]	; 0x60
 80016e4:	e007      	b.n	80016f6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3724      	adds	r7, #36	; 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	ffffbffc 	.word	0xffffbffc
 8001704:	58026000 	.word	0x58026000
 8001708:	fc00f81f 	.word	0xfc00f81f
 800170c:	fc00f81e 	.word	0xfc00f81e

08001710 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5c      	ldr	r2, [pc, #368]	; (8001890 <HAL_ADC_Start+0x180>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_ADC_Start+0x1c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <HAL_ADC_Start+0x184>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_ADC_Start+0x20>
 800172c:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <HAL_ADC_Start+0x188>)
 800172e:	e000      	b.n	8001732 <HAL_ADC_Start+0x22>
 8001730:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_ADC_Start+0x18c>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcc8 	bl	80010c8 <LL_ADC_GetMultimode>
 8001738:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fda2 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 809a 	bne.w	8001880 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_ADC_Start+0x4a>
 8001756:	2302      	movs	r3, #2
 8001758:	e095      	b.n	8001886 <HAL_ADC_Start+0x176>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 fa18 	bl	8002b98 <ADC_Enable>
 8001768:	4603      	mov	r3, r0
 800176a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 8081 	bne.w	8001876 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001778:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_ADC_Start+0x190>)
 800177a:	4013      	ands	r3, r2
 800177c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a42      	ldr	r2, [pc, #264]	; (8001894 <HAL_ADC_Start+0x184>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d002      	beq.n	8001794 <HAL_ADC_Start+0x84>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e000      	b.n	8001796 <HAL_ADC_Start+0x86>
 8001794:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_ADC_Start+0x180>)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4293      	cmp	r3, r2
 800179c:	d002      	beq.n	80017a4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017bc:	d106      	bne.n	80017cc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017c2:	f023 0206 	bic.w	r2, r3, #6
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	665a      	str	r2, [r3, #100]	; 0x64
 80017ca:	e002      	b.n	80017d2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	221c      	movs	r2, #28
 80017d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a2b      	ldr	r2, [pc, #172]	; (8001894 <HAL_ADC_Start+0x184>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Start+0xe2>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e000      	b.n	80017f4 <HAL_ADC_Start+0xe4>
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_ADC_Start+0x180>)
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d008      	beq.n	800180e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d002      	beq.n	800180e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b09      	cmp	r3, #9
 800180c:	d114      	bne.n	8001838 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001824:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fd01 	bl	8001238 <LL_ADC_REG_StartConversion>
 8001836:	e025      	b.n	8001884 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_ADC_Start+0x184>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d002      	beq.n	8001854 <HAL_ADC_Start+0x144>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e000      	b.n	8001856 <HAL_ADC_Start+0x146>
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_ADC_Start+0x180>)
 8001856:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00f      	beq.n	8001884 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	661a      	str	r2, [r3, #96]	; 0x60
 8001874:	e006      	b.n	8001884 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800187e:	e001      	b.n	8001884 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001880:	2302      	movs	r3, #2
 8001882:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001884:	7dfb      	ldrb	r3, [r7, #23]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000
 8001894:	40022100 	.word	0x40022100
 8001898:	40022300 	.word	0x40022300
 800189c:	58026300 	.word	0x58026300
 80018a0:	fffff0fe 	.word	0xfffff0fe

080018a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Stop+0x16>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e021      	b.n	80018fe <HAL_ADC_Stop+0x5a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80018c2:	2103      	movs	r1, #3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f001 f8ab 	bl	8002a20 <ADC_ConversionStop>
 80018ca:	4603      	mov	r3, r0
 80018cc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10f      	bne.n	80018f4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f001 f9e9 	bl	8002cac <ADC_Disable>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d107      	bne.n	80018f4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_ADC_Stop+0x64>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	ffffeefe 	.word	0xffffeefe

0800190c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_ADC_PollForConversion+0x1d8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d004      	beq.n	800192a <HAL_ADC_PollForConversion+0x1e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a70      	ldr	r2, [pc, #448]	; (8001ae8 <HAL_ADC_PollForConversion+0x1dc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_ADC_PollForConversion+0x22>
 800192a:	4b70      	ldr	r3, [pc, #448]	; (8001aec <HAL_ADC_PollForConversion+0x1e0>)
 800192c:	e000      	b.n	8001930 <HAL_ADC_PollForConversion+0x24>
 800192e:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_ADC_PollForConversion+0x1e4>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fbc9 	bl	80010c8 <LL_ADC_GetMultimode>
 8001936:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d102      	bne.n	8001946 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001940:	2308      	movs	r3, #8
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e037      	b.n	80019b6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d002      	beq.n	8001958 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d111      	bne.n	800197c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f043 0220 	orr.w	r2, r3, #32
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0b1      	b.n	8001ada <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001976:	2304      	movs	r3, #4
 8001978:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800197a:	e01c      	b.n	80019b6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_ADC_PollForConversion+0x1d8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_ADC_PollForConversion+0x84>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_ADC_PollForConversion+0x1dc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_ADC_PollForConversion+0x88>
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <HAL_ADC_PollForConversion+0x1e0>)
 8001992:	e000      	b.n	8001996 <HAL_ADC_PollForConversion+0x8a>
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_ADC_PollForConversion+0x1e4>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fba4 	bl	80010e4 <LL_ADC_GetMultiDMATransfer>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f043 0220 	orr.w	r2, r3, #32
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e093      	b.n	8001ada <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019b2:	2304      	movs	r3, #4
 80019b4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019b6:	f7ff f997 	bl	8000ce8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019bc:	e021      	b.n	8001a02 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d01d      	beq.n	8001a02 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019c6:	f7ff f98f 	bl	8000ce8 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d302      	bcc.n	80019dc <HAL_ADC_PollForConversion+0xd0>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d112      	bne.n	8001a02 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10b      	bne.n	8001a02 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f043 0204 	orr.w	r2, r3, #4
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e06b      	b.n	8001ada <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0d6      	beq.n	80019be <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fa93 	bl	8000f4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01c      	beq.n	8001a66 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e5b      	ldrb	r3, [r3, #25]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d118      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d111      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_ADC_PollForConversion+0x1dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d002      	beq.n	8001a76 <HAL_ADC_PollForConversion+0x16a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e000      	b.n	8001a78 <HAL_ADC_PollForConversion+0x16c>
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_ADC_PollForConversion+0x1d8>)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d008      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d002      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b09      	cmp	r3, #9
 8001a90:	d104      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e00c      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_ADC_PollForConversion+0x1dc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d002      	beq.n	8001aac <HAL_ADC_PollForConversion+0x1a0>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_PollForConversion+0x1a2>
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_ADC_PollForConversion+0x1d8>)
 8001aae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d104      	bne.n	8001ac6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e008      	b.n	8001ad8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40022100 	.word	0x40022100
 8001aec:	40022300 	.word	0x40022300
 8001af0:	58026300 	.word	0x58026300

08001af4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a87      	ldr	r2, [pc, #540]	; (8001d50 <HAL_ADC_IRQHandler+0x240>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_IRQHandler+0x30>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a86      	ldr	r2, [pc, #536]	; (8001d54 <HAL_ADC_IRQHandler+0x244>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x34>
 8001b40:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <HAL_ADC_IRQHandler+0x248>)
 8001b42:	e000      	b.n	8001b46 <HAL_ADC_IRQHandler+0x36>
 8001b44:	4b85      	ldr	r3, [pc, #532]	; (8001d5c <HAL_ADC_IRQHandler+0x24c>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fabe 	bl	80010c8 <LL_ADC_GetMultimode>
 8001b4c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x78>
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f001 fa32 	bl	8002fe4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x8c>
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8083 	beq.w	8001cae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d07d      	beq.n	8001cae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9bc 	bl	8000f4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d062      	beq.n	8001ca0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a5d      	ldr	r2, [pc, #372]	; (8001d54 <HAL_ADC_IRQHandler+0x244>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d002      	beq.n	8001bea <HAL_ADC_IRQHandler+0xda>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	e000      	b.n	8001bec <HAL_ADC_IRQHandler+0xdc>
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_ADC_IRQHandler+0x240>)
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d008      	beq.n	8001c06 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d002      	beq.n	8001c06 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b09      	cmp	r3, #9
 8001c04:	d104      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	623b      	str	r3, [r7, #32]
 8001c0e:	e00c      	b.n	8001c2a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <HAL_ADC_IRQHandler+0x244>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d002      	beq.n	8001c20 <HAL_ADC_IRQHandler+0x110>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	e000      	b.n	8001c22 <HAL_ADC_IRQHandler+0x112>
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_ADC_IRQHandler+0x240>)
 8001c22:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d135      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d12e      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb1e 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11a      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020c 	bic.w	r2, r2, #12
 8001c60:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	661a      	str	r2, [r3, #96]	; 0x60
 8001c86:	e00b      	b.n	8001ca0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f96f 	bl	8001f84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_IRQHandler+0x1b2>
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10b      	bne.n	8001cda <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a0 	beq.w	8001e0e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 809a 	beq.w	8001e0e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f967 	bl	8000fca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001cfc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f922 	bl	8000f4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d08:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_ADC_IRQHandler+0x244>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d002      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x20a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e000      	b.n	8001d1c <HAL_ADC_IRQHandler+0x20c>
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_ADC_IRQHandler+0x240>)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d008      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d002      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b07      	cmp	r3, #7
 8001d34:	d104      	bne.n	8001d40 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	e014      	b.n	8001d6a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_ADC_IRQHandler+0x244>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00a      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x250>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e008      	b.n	8001d62 <HAL_ADC_IRQHandler+0x252>
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40022100 	.word	0x40022100
 8001d58:	40022300 	.word	0x40022300
 8001d5c:	58026300 	.word	0x58026300
 8001d60:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_ADC_IRQHandler+0x464>)
 8001d62:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d047      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_ADC_IRQHandler+0x27a>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d03f      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d13a      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d133      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12e      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fa96 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11a      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dc0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d112      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	661a      	str	r2, [r3, #96]	; 0x60
 8001de6:	e00b      	b.n	8001e00 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f043 0210 	orr.w	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f001 f8c7 	bl	8002f94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2260      	movs	r2, #96	; 0x60
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d011      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x32c>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8b2 	bl	8001f98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <HAL_ADC_IRQHandler+0x35c>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00d      	beq.n	8001e6c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f001 f8ad 	bl	8002fbc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x38c>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f001 f89f 	bl	8002fd0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d043      	beq.n	8001f2e <HAL_ADC_IRQHandler+0x41e>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03e      	beq.n	8001f2e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	e021      	b.n	8001f02 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <HAL_ADC_IRQHandler+0x464>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_ADC_IRQHandler+0x3c8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_ADC_IRQHandler+0x468>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_IRQHandler+0x3cc>
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_ADC_IRQHandler+0x46c>)
 8001eda:	e000      	b.n	8001ede <HAL_ADC_IRQHandler+0x3ce>
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_ADC_IRQHandler+0x470>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f900 	bl	80010e4 <LL_ADC_GetMultiDMATransfer>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001eea:	2301      	movs	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e008      	b.n	8001f02 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10e      	bne.n	8001f26 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f18:	f043 0202 	orr.w	r2, r3, #2
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f843 	bl	8001fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d018      	beq.n	8001f6a <HAL_ADC_IRQHandler+0x45a>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d013      	beq.n	8001f6a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f52:	f043 0208 	orr.w	r2, r3, #8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f001 f81f 	bl	8002fa8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022100 	.word	0x40022100
 8001f7c:	40022300 	.word	0x40022300
 8001f80:	58026300 	.word	0x58026300

08001f84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b0b9      	sub	sp, #228	; 0xe4
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fda:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4aab      	ldr	r2, [pc, #684]	; (8002290 <HAL_ADC_ConfigChannel+0x2d0>)
 8001fe2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x34>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f000 bcfe 	b.w	80029f0 <HAL_ADC_ConfigChannel+0xa30>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f941 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 84e2 	bne.w	80029d2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db38      	blt.n	8002088 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a9e      	ldr	r2, [pc, #632]	; (8002294 <HAL_ADC_ConfigChannel+0x2d4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d033      	beq.n	8002088 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <HAL_ADC_ConfigChannel+0x7e>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2201      	movs	r2, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	e01d      	b.n	800207a <HAL_ADC_ConfigChannel+0xba>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800205a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e004      	b.n	8002070 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2201      	movs	r2, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	69d1      	ldr	r1, [r2, #28]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	f7fe ff6c 	bl	8000f72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f8f2 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff f913 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 80020b2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8270 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 826b 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7fe ff8a 	bl	8000ff0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6c      	ldr	r2, [pc, #432]	; (8002294 <HAL_ADC_ConfigChannel+0x2d4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10d      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002100:	e032      	b.n	8002168 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002102:	4b65      	ldr	r3, [pc, #404]	; (8002298 <HAL_ADC_ConfigChannel+0x2d8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800210a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x168>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	e01d      	b.n	8002164 <HAL_ADC_ConfigChannel+0x1a4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10b      	bne.n	800214e <HAL_ADC_ConfigChannel+0x18e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	e00a      	b.n	8002164 <HAL_ADC_ConfigChannel+0x1a4>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d048      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6919      	ldr	r1, [r3, #16]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002180:	f7fe fdf2 	bl	8000d68 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a42      	ldr	r2, [pc, #264]	; (8002294 <HAL_ADC_ConfigChannel+0x2d4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d119      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	461a      	mov	r2, r3
 800219c:	f7fe fe8a 	bl	8000eb4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1f8>
 80021b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b6:	e000      	b.n	80021ba <HAL_ADC_ConfigChannel+0x1fa>
 80021b8:	2300      	movs	r3, #0
 80021ba:	461a      	mov	r2, r3
 80021bc:	f7fe fe58 	bl	8000e70 <LL_ADC_SetOffsetSaturation>
 80021c0:	e1ee      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_ADC_ConfigChannel+0x21a>
 80021d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021d8:	e000      	b.n	80021dc <HAL_ADC_ConfigChannel+0x21c>
 80021da:	2300      	movs	r3, #0
 80021dc:	461a      	mov	r2, r3
 80021de:	f7fe fe25 	bl	8000e2c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6919      	ldr	r1, [r3, #16]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7e1b      	ldrb	r3, [r3, #24]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x238>
 80021f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f6:	e000      	b.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
 80021f8:	2300      	movs	r3, #0
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7fe fdfc 	bl	8000df8 <LL_ADC_SetDataRightShift>
 8002200:	e1ce      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a23      	ldr	r2, [pc, #140]	; (8002294 <HAL_ADC_ConfigChannel+0x2d4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	f040 8181 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fdd9 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_ADC_ConfigChannel+0x27a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fdce 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	e01e      	b.n	8002278 <HAL_ADC_ConfigChannel+0x2b8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fdc3 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e004      	b.n	8002276 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800226c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_ADC_ConfigChannel+0x2dc>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	e01e      	b.n	80022ce <HAL_ADC_ConfigChannel+0x30e>
 8002290:	47ff0000 	.word	0x47ff0000
 8002294:	58026000 	.word	0x58026000
 8002298:	5c001000 	.word	0x5c001000
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80022b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80022b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80022c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d106      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fe0c 	bl	8000ef8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd70 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <HAL_ADC_ConfigChannel+0x34c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fd65 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	f003 021f 	and.w	r2, r3, #31
 800230a:	e01e      	b.n	800234a <HAL_ADC_ConfigChannel+0x38a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fd5a 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800232a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e004      	b.n	8002348 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800233e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x3a2>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	e018      	b.n	8002394 <HAL_ADC_ConfigChannel+0x3d4>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800237a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800237e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800238a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fda9 	bl	8000ef8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2102      	movs	r1, #2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fd0d 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x412>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fd02 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	e01e      	b.n	8002410 <HAL_ADC_ConfigChannel+0x450>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fcf7 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80023f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80023f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e004      	b.n	800240e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x468>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	e014      	b.n	8002452 <HAL_ADC_ConfigChannel+0x492>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800243c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e004      	b.n	8002452 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	429a      	cmp	r2, r3
 8002454:	d106      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fd4a 	bl	8000ef8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2103      	movs	r1, #3
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fcae 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x4d0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2103      	movs	r1, #3
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fca3 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 021f 	and.w	r2, r3, #31
 800248e:	e017      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x500>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2103      	movs	r1, #3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fc98 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024aa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e003      	b.n	80024be <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80024b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x518>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	e011      	b.n	80024fc <HAL_ADC_ConfigChannel+0x53c>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80024e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80024ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e003      	b.n	80024fc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80024f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d14f      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	2103      	movs	r1, #3
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fcf5 	bl	8000ef8 <LL_ADC_SetOffsetState>
 800250e:	e047      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	069b      	lsls	r3, r3, #26
 8002520:	429a      	cmp	r2, r3
 8002522:	d107      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002532:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	069b      	lsls	r3, r3, #26
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002556:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800255e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800257a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002582:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	069b      	lsls	r3, r3, #26
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800259e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fe21 	bl	80011ec <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 8219 	bne.w	80029e4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f7fe fd42 	bl	8001048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4aa1      	ldr	r2, [pc, #644]	; (8002850 <HAL_ADC_ConfigChannel+0x890>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f040 812e 	bne.w	800282c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x638>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e019      	b.n	800262c <HAL_ADC_ConfigChannel+0x66c>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800260a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e003      	b.n	800261c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2b09      	cmp	r3, #9
 8002624:	bf94      	ite	ls
 8002626:	2301      	movls	r3, #1
 8002628:	2300      	movhi	r3, #0
 800262a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262c:	2b00      	cmp	r3, #0
 800262e:	d079      	beq.n	8002724 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_ADC_ConfigChannel+0x68c>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264a:	e015      	b.n	8002678 <HAL_ADC_ConfigChannel+0x6b8>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800265a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e003      	b.n	8002670 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x6d8>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	e017      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x708>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80026aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	ea42 0103 	orr.w	r1, r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x72e>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	3301      	adds	r3, #1
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	051b      	lsls	r3, r3, #20
 80026ec:	e018      	b.n	8002720 <HAL_ADC_ConfigChannel+0x760>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e003      	b.n	8002712 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3301      	adds	r3, #1
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002720:	430b      	orrs	r3, r1
 8002722:	e07e      	b.n	8002822 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x780>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	069b      	lsls	r3, r3, #26
 800273a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273e:	e015      	b.n	800276c <HAL_ADC_ConfigChannel+0x7ac>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7cc>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	3301      	adds	r3, #1
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	e017      	b.n	80027bc <HAL_ADC_ConfigChannel+0x7fc>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	61bb      	str	r3, [r7, #24]
  return result;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e003      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	ea42 0103 	orr.w	r1, r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x828>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	3b1e      	subs	r3, #30
 80027e0:	051b      	lsls	r3, r3, #20
 80027e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e6:	e01b      	b.n	8002820 <HAL_ADC_ConfigChannel+0x860>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	60fb      	str	r3, [r7, #12]
  return result;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	3b1e      	subs	r3, #30
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002820:	430b      	orrs	r3, r1
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe fbe2 	bl	8000ff0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f280 80d7 	bge.w	80029e4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a06      	ldr	r2, [pc, #24]	; (8002854 <HAL_ADC_ConfigChannel+0x894>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_ADC_ConfigChannel+0x88a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_ADC_ConfigChannel+0x898>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x8a0>
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <HAL_ADC_ConfigChannel+0x89c>)
 800284c:	e009      	b.n	8002862 <HAL_ADC_ConfigChannel+0x8a2>
 800284e:	bf00      	nop
 8002850:	47ff0000 	.word	0x47ff0000
 8002854:	40022000 	.word	0x40022000
 8002858:	40022100 	.word	0x40022100
 800285c:	40022300 	.word	0x40022300
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_ADC_ConfigChannel+0xa38>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fa72 	bl	8000d4c <LL_ADC_GetCommonPathInternalCh>
 8002868:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a62      	ldr	r2, [pc, #392]	; (80029fc <HAL_ADC_ConfigChannel+0xa3c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_ADC_ConfigChannel+0x8c0>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a61      	ldr	r2, [pc, #388]	; (8002a00 <HAL_ADC_ConfigChannel+0xa40>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10e      	bne.n	800289e <HAL_ADC_ConfigChannel+0x8de>
 8002880:	485e      	ldr	r0, [pc, #376]	; (80029fc <HAL_ADC_ConfigChannel+0xa3c>)
 8002882:	f7fe fcb3 	bl	80011ec <LL_ADC_IsEnabled>
 8002886:	4604      	mov	r4, r0
 8002888:	485d      	ldr	r0, [pc, #372]	; (8002a00 <HAL_ADC_ConfigChannel+0xa40>)
 800288a:	f7fe fcaf 	bl	80011ec <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	4323      	orrs	r3, r4
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e008      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x8f0>
 800289e:	4859      	ldr	r0, [pc, #356]	; (8002a04 <HAL_ADC_ConfigChannel+0xa44>)
 80028a0:	f7fe fca4 	bl	80011ec <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8084 	beq.w	80029be <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a53      	ldr	r2, [pc, #332]	; (8002a08 <HAL_ADC_ConfigChannel+0xa48>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d132      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x966>
 80028c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d12c      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <HAL_ADC_ConfigChannel+0xa44>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	f040 8086 	bne.w	80029e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a47      	ldr	r2, [pc, #284]	; (80029fc <HAL_ADC_ConfigChannel+0xa3c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x92c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a46      	ldr	r2, [pc, #280]	; (8002a00 <HAL_ADC_ConfigChannel+0xa40>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x930>
 80028ec:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_ADC_ConfigChannel+0xa4c>)
 80028ee:	e000      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x932>
 80028f0:	4a41      	ldr	r2, [pc, #260]	; (80029f8 <HAL_ADC_ConfigChannel+0xa38>)
 80028f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7fe fa12 	bl	8000d26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_ADC_ConfigChannel+0xa50>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	4a42      	ldr	r2, [pc, #264]	; (8002a14 <HAL_ADC_ConfigChannel+0xa54>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	3301      	adds	r3, #1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002916:	e002      	b.n	800291e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3b01      	subs	r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f9      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002924:	e05e      	b.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <HAL_ADC_ConfigChannel+0xa58>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d120      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x9b2>
 8002930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d11a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_ADC_ConfigChannel+0xa44>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d14e      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <HAL_ADC_ConfigChannel+0xa3c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_ADC_ConfigChannel+0x99a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_ADC_ConfigChannel+0xa40>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x99e>
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_ADC_ConfigChannel+0xa4c>)
 800295c:	e000      	b.n	8002960 <HAL_ADC_ConfigChannel+0x9a0>
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_ADC_ConfigChannel+0xa38>)
 8002960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7fe f9db 	bl	8000d26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002970:	e038      	b.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <HAL_ADC_ConfigChannel+0xa5c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d133      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
 800297c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d12d      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_ADC_ConfigChannel+0xa44>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d128      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_ADC_ConfigChannel+0xa3c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x9e6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_ADC_ConfigChannel+0xa40>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x9ea>
 80029a6:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_ADC_ConfigChannel+0xa4c>)
 80029a8:	e000      	b.n	80029ac <HAL_ADC_ConfigChannel+0x9ec>
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_ADC_ConfigChannel+0xa38>)
 80029ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f7fe f9b5 	bl	8000d26 <LL_ADC_SetCommonPathInternalCh>
 80029bc:	e012      	b.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80029d0:	e008      	b.n	80029e4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80029ec:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	37e4      	adds	r7, #228	; 0xe4
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	58026300 	.word	0x58026300
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40022100 	.word	0x40022100
 8002a04:	58026000 	.word	0x58026000
 8002a08:	c7520000 	.word	0xc7520000
 8002a0c:	40022300 	.word	0x40022300
 8002a10:	24000000 	.word	0x24000000
 8002a14:	053e2d63 	.word	0x053e2d63
 8002a18:	c3210000 	.word	0xc3210000
 8002a1c:	cb840000 	.word	0xcb840000

08002a20 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fc26 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8002a3c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fc48 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 8002a48:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8098 	beq.w	8002b88 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02a      	beq.n	8002abc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7e5b      	ldrb	r3, [r3, #25]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d126      	bne.n	8002abc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7e1b      	ldrb	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d122      	bne.n	8002abc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a7a:	e014      	b.n	8002aa6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <ADC_ConversionStop+0x174>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d90d      	bls.n	8002aa0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a88:	f043 0210 	orr.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e074      	b.n	8002b8a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d1e3      	bne.n	8002a7c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d014      	beq.n	8002aec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fbde 	bl	8001288 <LL_ADC_REG_IsConversionOngoing>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fb9b 	bl	8001212 <LL_ADC_IsDisableOngoing>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fbba 	bl	8001260 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d014      	beq.n	8002b1c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fbee 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fb83 	bl	8001212 <LL_ADC_IsDisableOngoing>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fbca 	bl	80012b0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d005      	beq.n	8002b2e <ADC_ConversionStop+0x10e>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d105      	bne.n	8002b34 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b28:	230c      	movs	r3, #12
 8002b2a:	617b      	str	r3, [r7, #20]
        break;
 8002b2c:	e005      	b.n	8002b3a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b2e:	2308      	movs	r3, #8
 8002b30:	617b      	str	r3, [r7, #20]
        break;
 8002b32:	e002      	b.n	8002b3a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b34:	2304      	movs	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]
        break;
 8002b38:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe f8d5 	bl	8000ce8 <HAL_GetTick>
 8002b3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b40:	e01b      	b.n	8002b7a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b42:	f7fe f8d1 	bl	8000ce8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d914      	bls.n	8002b7a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e007      	b.n	8002b8a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1dc      	bne.n	8002b42 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	000cdbff 	.word	0x000cdbff

08002b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fb21 	bl	80011ec <LL_ADC_IsEnabled>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d16e      	bne.n	8002c8e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <ADC_Enable+0x100>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	f043 0210 	orr.w	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e05a      	b.n	8002c90 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fadc 	bl	800119c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002be4:	f7fe f880 	bl	8000ce8 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <ADC_Enable+0x104>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <ADC_Enable+0x66>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <ADC_Enable+0x108>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <ADC_Enable+0x6a>
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <ADC_Enable+0x10c>)
 8002c00:	e000      	b.n	8002c04 <ADC_Enable+0x6c>
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <ADC_Enable+0x110>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fa5f 	bl	80010c8 <LL_ADC_GetMultimode>
 8002c0a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <ADC_Enable+0x108>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d002      	beq.n	8002c1c <ADC_Enable+0x84>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e000      	b.n	8002c1e <ADC_Enable+0x86>
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <ADC_Enable+0x104>)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02c      	beq.n	8002c80 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d130      	bne.n	8002c8e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c2c:	e028      	b.n	8002c80 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fada 	bl	80011ec <LL_ADC_IsEnabled>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe faaa 	bl	800119c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c48:	f7fe f84e 	bl	8000ce8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d914      	bls.n	8002c80 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d00d      	beq.n	8002c80 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e007      	b.n	8002c90 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d1cf      	bne.n	8002c2e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	8000003f 	.word	0x8000003f
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40022100 	.word	0x40022100
 8002ca4:	40022300 	.word	0x40022300
 8002ca8:	58026300 	.word	0x58026300

08002cac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe faaa 	bl	8001212 <LL_ADC_IsDisableOngoing>
 8002cbe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fa91 	bl	80011ec <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d047      	beq.n	8002d60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d144      	bne.n	8002d60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030d 	and.w	r3, r3, #13
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10c      	bne.n	8002cfe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fa6b 	bl	80011c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cf6:	f7fd fff7 	bl	8000ce8 <HAL_GetTick>
 8002cfa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cfc:	e029      	b.n	8002d52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e023      	b.n	8002d62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d1a:	f7fd ffe5 	bl	8000ce8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d914      	bls.n	8002d52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e007      	b.n	8002d62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1dc      	bne.n	8002d1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6c      	ldr	r2, [pc, #432]	; (8002f2c <ADC_ConfigureBoostMode+0x1c0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <ADC_ConfigureBoostMode+0x1c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6b      	ldr	r2, [pc, #428]	; (8002f30 <ADC_ConfigureBoostMode+0x1c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d109      	bne.n	8002d9c <ADC_ConfigureBoostMode+0x30>
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <ADC_ConfigureBoostMode+0x1c8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e008      	b.n	8002dae <ADC_ConfigureBoostMode+0x42>
 8002d9c:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <ADC_ConfigureBoostMode+0x1cc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01c      	beq.n	8002dec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002db2:	f002 f8e1 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8002db6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc0:	d010      	beq.n	8002de4 <ADC_ConfigureBoostMode+0x78>
 8002dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc6:	d873      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x144>
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d002      	beq.n	8002dd4 <ADC_ConfigureBoostMode+0x68>
 8002dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd2:	d16d      	bne.n	8002eb0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	60fb      	str	r3, [r7, #12]
        break;
 8002de2:	e068      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	60fb      	str	r3, [r7, #12]
        break;
 8002dea:	e064      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002dec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002df0:	f04f 0100 	mov.w	r1, #0
 8002df4:	f003 faa6 	bl	8006344 <HAL_RCCEx_GetPeriphCLKFreq>
 8002df8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e02:	d051      	beq.n	8002ea8 <ADC_ConfigureBoostMode+0x13c>
 8002e04:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e08:	d854      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e0a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e0e:	d047      	beq.n	8002ea0 <ADC_ConfigureBoostMode+0x134>
 8002e10:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e14:	d84e      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e16:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e1a:	d03d      	beq.n	8002e98 <ADC_ConfigureBoostMode+0x12c>
 8002e1c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e20:	d848      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e26:	d033      	beq.n	8002e90 <ADC_ConfigureBoostMode+0x124>
 8002e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2c:	d842      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e2e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e32:	d029      	beq.n	8002e88 <ADC_ConfigureBoostMode+0x11c>
 8002e34:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e38:	d83c      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e3a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e3e:	d01a      	beq.n	8002e76 <ADC_ConfigureBoostMode+0x10a>
 8002e40:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e44:	d836      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e46:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e4a:	d014      	beq.n	8002e76 <ADC_ConfigureBoostMode+0x10a>
 8002e4c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e50:	d830      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e56:	d00e      	beq.n	8002e76 <ADC_ConfigureBoostMode+0x10a>
 8002e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5c:	d82a      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e62:	d008      	beq.n	8002e76 <ADC_ConfigureBoostMode+0x10a>
 8002e64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e68:	d824      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
 8002e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6e:	d002      	beq.n	8002e76 <ADC_ConfigureBoostMode+0x10a>
 8002e70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e74:	d11e      	bne.n	8002eb4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0c9b      	lsrs	r3, r3, #18
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	60fb      	str	r3, [r7, #12]
        break;
 8002e86:	e016      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	60fb      	str	r3, [r7, #12]
        break;
 8002e8e:	e012      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	60fb      	str	r3, [r7, #12]
        break;
 8002e96:	e00e      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	60fb      	str	r3, [r7, #12]
        break;
 8002e9e:	e00a      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	09db      	lsrs	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
        break;
 8002ea6:	e006      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	60fb      	str	r3, [r7, #12]
        break;
 8002eae:	e002      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002eb0:	bf00      	nop
 8002eb2:	e000      	b.n	8002eb6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002eb4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <ADC_ConfigureBoostMode+0x1d0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d808      	bhi.n	8002ed6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ed2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ed4:	e025      	b.n	8002f22 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a19      	ldr	r2, [pc, #100]	; (8002f40 <ADC_ConfigureBoostMode+0x1d4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d80a      	bhi.n	8002ef4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	e016      	b.n	8002f22 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <ADC_ConfigureBoostMode+0x1d8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d80a      	bhi.n	8002f12 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	e007      	b.n	8002f22 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40022100 	.word	0x40022100
 8002f34:	40022300 	.word	0x40022300
 8002f38:	58026300 	.word	0x58026300
 8002f3c:	005f5e10 	.word	0x005f5e10
 8002f40:	00bebc20 	.word	0x00bebc20
 8002f44:	017d7840 	.word	0x017d7840

08002f48 <LL_ADC_IsEnabled>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <LL_ADC_IsEnabled+0x18>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_ADC_IsEnabled+0x1a>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b0a3      	sub	sp, #140	; 0x8c
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003012:	2302      	movs	r3, #2
 8003014:	e0c1      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5e      	ldr	r2, [pc, #376]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d102      	bne.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003030:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e001      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0a0      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff87 	bl	8002f6e <LL_ADC_REG_IsConversionOngoing>
 8003060:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff80 	bl	8002f6e <LL_ADC_REG_IsConversionOngoing>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 8081 	bne.w	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d17c      	bne.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a48      	ldr	r2, [pc, #288]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a46      	ldr	r2, [pc, #280]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003092:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003094:	e000      	b.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003096:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003098:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d039      	beq.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a39      	ldr	r2, [pc, #228]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10e      	bne.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80030c8:	4836      	ldr	r0, [pc, #216]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030ca:	f7ff ff3d 	bl	8002f48 <LL_ADC_IsEnabled>
 80030ce:	4604      	mov	r4, r0
 80030d0:	4835      	ldr	r0, [pc, #212]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030d2:	f7ff ff39 	bl	8002f48 <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4323      	orrs	r3, r4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e008      	b.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80030e6:	4833      	ldr	r0, [pc, #204]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80030e8:	f7ff ff2e 	bl	8002f48 <LL_ADC_IsEnabled>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d047      	beq.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003102:	4013      	ands	r3, r2
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	6811      	ldr	r1, [r2, #0]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	430a      	orrs	r2, r1
 800310e:	431a      	orrs	r2, r3
 8003110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003112:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	e03a      	b.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800311e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003120:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10e      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003136:	481b      	ldr	r0, [pc, #108]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003138:	f7ff ff06 	bl	8002f48 <LL_ADC_IsEnabled>
 800313c:	4604      	mov	r4, r0
 800313e:	481a      	ldr	r0, [pc, #104]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003140:	f7ff ff02 	bl	8002f48 <LL_ADC_IsEnabled>
 8003144:	4603      	mov	r3, r0
 8003146:	4323      	orrs	r3, r4
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e008      	b.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003154:	4817      	ldr	r0, [pc, #92]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003156:	f7ff fef7 	bl	8002f48 <LL_ADC_IsEnabled>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800316a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003170:	4013      	ands	r3, r2
 8003172:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003174:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003176:	e009      	b.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800318a:	e000      	b.n	800318e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800318c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003196:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800319a:	4618      	mov	r0, r3
 800319c:	378c      	adds	r7, #140	; 0x8c
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40022000 	.word	0x40022000
 80031a8:	40022100 	.word	0x40022100
 80031ac:	40022300 	.word	0x40022300
 80031b0:	58026300 	.word	0x58026300
 80031b4:	58026000 	.word	0x58026000
 80031b8:	fffff0e0 	.word	0xfffff0e0

080031bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <__NVIC_SetPriorityGrouping+0x40>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x40>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00
 8003200:	05fa0000 	.word	0x05fa0000

08003204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <__NVIC_GetPriorityGrouping+0x18>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 0307 	and.w	r3, r3, #7
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800322a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	db0b      	blt.n	800324a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <__NVIC_EnableIRQ+0x38>)
 800323a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2001      	movs	r0, #1
 8003242:	fa00 f202 	lsl.w	r2, r0, r2
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e100 	.word	0xe000e100

0800325c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db0a      	blt.n	8003286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	490c      	ldr	r1, [pc, #48]	; (80032a8 <__NVIC_SetPriority+0x4c>)
 8003276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	440b      	add	r3, r1
 8003280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003284:	e00a      	b.n	800329c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <__NVIC_SetPriority+0x50>)
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3b04      	subs	r3, #4
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	440b      	add	r3, r1
 800329a:	761a      	strb	r2, [r3, #24]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f1c3 0307 	rsb	r3, r3, #7
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf28      	it	cs
 80032ce:	2304      	movcs	r3, #4
 80032d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d902      	bls.n	80032e0 <NVIC_EncodePriority+0x30>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3b03      	subs	r3, #3
 80032de:	e000      	b.n	80032e2 <NVIC_EncodePriority+0x32>
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	43d9      	mvns	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	4313      	orrs	r3, r2
         );
}
 800330a:	4618      	mov	r0, r3
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff8e 	bl	800325c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff29 	bl	80031bc <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003380:	f7ff ff40 	bl	8003204 <__NVIC_GetPriorityGrouping>
 8003384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff90 	bl	80032b0 <NVIC_EncodePriority>
 8003390:	4602      	mov	r2, r0
 8003392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff5f 	bl	800325c <__NVIC_SetPriority>
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff33 	bl	8003220 <__NVIC_EnableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffa4 	bl	8003318 <SysTick_Config>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b098      	sub	sp, #96	; 0x60
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80033e4:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <HAL_FDCAN_Init+0x21c>)
 80033e6:	f107 030c 	add.w	r3, r7, #12
 80033ea:	4611      	mov	r1, r2
 80033ec:	224c      	movs	r2, #76	; 0x4c
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fa1a 	bl	8007828 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1c6      	b.n	800378c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7e      	ldr	r2, [pc, #504]	; (80035fc <HAL_FDCAN_Init+0x220>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d106      	bne.n	8003416 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fa96 	bl	800095c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0210 	bic.w	r2, r2, #16
 800343e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003440:	f7fd fc52 	bl	8000ce8 <HAL_GetTick>
 8003444:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003446:	e014      	b.n	8003472 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003448:	f7fd fc4e 	bl	8000ce8 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b0a      	cmp	r3, #10
 8003454:	d90d      	bls.n	8003472 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2203      	movs	r2, #3
 800346a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e18c      	b.n	800378c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d0e3      	beq.n	8003448 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003490:	f7fd fc2a 	bl	8000ce8 <HAL_GetTick>
 8003494:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003496:	e014      	b.n	80034c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003498:	f7fd fc26 	bl	8000ce8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b0a      	cmp	r3, #10
 80034a4:	d90d      	bls.n	80034c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e164      	b.n	800378c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0e3      	beq.n	8003498 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0202 	orr.w	r2, r2, #2
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7c1b      	ldrb	r3, [r3, #16]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d108      	bne.n	80034fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	e007      	b.n	800350a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7c5b      	ldrb	r3, [r3, #17]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d108      	bne.n	8003524 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003520:	619a      	str	r2, [r3, #24]
 8003522:	e007      	b.n	8003534 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003532:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7c9b      	ldrb	r3, [r3, #18]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d108      	bne.n	800354e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354a:	619a      	str	r2, [r3, #24]
 800354c:	e007      	b.n	800355e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800355c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003582:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0210 	bic.w	r2, r2, #16
 8003592:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d108      	bne.n	80035ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0204 	orr.w	r2, r2, #4
 80035aa:	619a      	str	r2, [r3, #24]
 80035ac:	e030      	b.n	8003610 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02c      	beq.n	8003610 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d020      	beq.n	8003600 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0210 	orr.w	r2, r2, #16
 80035dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d114      	bne.n	8003610 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	619a      	str	r2, [r3, #24]
 80035f6:	e00b      	b.n	8003610 <HAL_FDCAN_Init+0x234>
 80035f8:	0800785c 	.word	0x0800785c
 80035fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	3b01      	subs	r3, #1
 8003616:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	3b01      	subs	r3, #1
 800361e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003620:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003628:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	3b01      	subs	r3, #1
 8003632:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003638:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800363a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003644:	d115      	bne.n	8003672 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	3b01      	subs	r3, #1
 8003652:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003654:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	3b01      	subs	r3, #1
 800365c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800365e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	3b01      	subs	r3, #1
 8003668:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800366e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003670:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	4413      	add	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036a6:	f023 0107 	bic.w	r1, r3, #7
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	443b      	add	r3, r7
 80036b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d011      	beq.n	80036ee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036d2:	f023 0107 	bic.w	r1, r3, #7
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	3360      	adds	r3, #96	; 0x60
 80036de:	443b      	add	r3, r7
 80036e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036fe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3360      	adds	r3, #96	; 0x60
 800370a:	443b      	add	r3, r7
 800370c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003710:	011a      	lsls	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d012      	beq.n	800374a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800372c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	3360      	adds	r3, #96	; 0x60
 8003738:	443b      	add	r3, r7
 800373a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800373e:	021a      	lsls	r2, r3, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_FDCAN_Init+0x3b8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d107      	bne.n	8003764 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f022 0203 	bic.w	r2, r2, #3
 8003762:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f90b 	bl	8003998 <FDCAN_CalcultateRamBlockAddresses>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003788:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800378c:	4618      	mov	r0, r3
 800378e:	3760      	adds	r7, #96	; 0x60
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	4000a000 	.word	0x4000a000

08003798 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d111      	bne.n	80037d0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e008      	b.n	80037e2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d141      	bne.n	800388a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800380e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e038      	b.n	800389c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003840:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e026      	b.n	800389c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa1d 	bl	8003ca4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800387a:	2201      	movs	r2, #1
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e008      	b.n	800389c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003890:	f043 0208 	orr.w	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d002      	beq.n	80038c4 <HAL_FDCAN_ActivateNotification+0x20>
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d155      	bne.n	8003970 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80038e2:	e014      	b.n	800390e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d108      	bne.n	8003906 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0202 	orr.w	r2, r2, #2
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
 8003904:	e003      	b.n	800390e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2203      	movs	r2, #3
 800390c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	430a      	orrs	r2, r1
 8003928:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	430a      	orrs	r2, r1
 8003946:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_FDCAN_ActivateNotification+0xec>)
 8003954:	4013      	ands	r3, r2
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	430b      	orrs	r3, r1
 800395c:	6553      	str	r3, [r2, #84]	; 0x54
 800395e:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0f9b      	lsrs	r3, r3, #30
 8003966:	490b      	ldr	r1, [pc, #44]	; (8003994 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e008      	b.n	8003982 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003976:	f043 0202 	orr.w	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	3fcfffff 	.word	0x3fcfffff
 8003994:	4000a800 	.word	0x4000a800

08003998 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80039ae:	4ba7      	ldr	r3, [pc, #668]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	0091      	lsls	r1, r2, #2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	430b      	orrs	r3, r1
 80039bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4413      	add	r3, r2
 80039e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039ee:	4b97      	ldr	r3, [pc, #604]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	0091      	lsls	r1, r2, #2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	430b      	orrs	r3, r1
 80039fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	041a      	lsls	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a30:	4b86      	ldr	r3, [pc, #536]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	0091      	lsls	r1, r2, #2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a4a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	041a      	lsls	r2, r3, #16
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a78:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	0091      	lsls	r1, r2, #2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a92:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	041a      	lsls	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ac0:	4b62      	ldr	r3, [pc, #392]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	0091      	lsls	r1, r2, #2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003aec:	4b57      	ldr	r3, [pc, #348]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	0091      	lsls	r1, r2, #2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b06:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	041a      	lsls	r2, r3, #16
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4413      	add	r3, r2
 8003b24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0091      	lsls	r1, r2, #2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b48:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b64:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	061a      	lsls	r2, r3, #24
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7c:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	009a      	lsls	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d915      	bls.n	8003c74 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003c48:	e006      	b.n	8003c58 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003c4a:	bf00      	nop
 8003c4c:	ffff0003 	.word	0xffff0003
 8003c50:	10002b00 	.word	0x10002b00
 8003c54:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e010      	b.n	8003c96 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e005      	b.n	8003c88 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3304      	adds	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3f3      	bcc.n	8003c7c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003cc2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e00a      	b.n	8003ce6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003cd8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003cde:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cf0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003cf6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003cfc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3304      	adds	r3, #4
 8003d28:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	3304      	adds	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e020      	b.n	8003d7e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	440b      	add	r3, r1
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d54:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	440b      	add	r3, r1
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d62:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	440a      	add	r2, r1
 8003d6a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d6c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3304      	adds	r3, #4
 8003d76:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a06      	ldr	r2, [pc, #24]	; (8003d9c <FDCAN_CopyMessageToRAM+0xf8>)
 8003d84:	5cd3      	ldrb	r3, [r2, r3]
 8003d86:	461a      	mov	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d3d6      	bcc.n	8003d3c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	3724      	adds	r7, #36	; 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	080078b8 	.word	0x080078b8

08003da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dae:	4b86      	ldr	r3, [pc, #536]	; (8003fc8 <HAL_GPIO_Init+0x228>)
 8003db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003db2:	e18c      	b.n	80040ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 817e 	beq.w	80040c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d005      	beq.n	8003de4 <HAL_GPIO_Init+0x44>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d130      	bne.n	8003e46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0201 	and.w	r2, r3, #1
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d017      	beq.n	8003e82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d123      	bne.n	8003ed6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3208      	adds	r2, #8
 8003e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	08da      	lsrs	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3208      	adds	r2, #8
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80d8 	beq.w	80040c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f18:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <HAL_GPIO_Init+0x22c>)
 8003f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f1e:	4a2b      	ldr	r2, [pc, #172]	; (8003fcc <HAL_GPIO_Init+0x22c>)
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f28:	4b28      	ldr	r3, [pc, #160]	; (8003fcc <HAL_GPIO_Init+0x22c>)
 8003f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f36:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <HAL_GPIO_Init+0x230>)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <HAL_GPIO_Init+0x234>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <HAL_GPIO_Init+0x258>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <HAL_GPIO_Init+0x238>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02b      	beq.n	8003fc2 <HAL_GPIO_Init+0x222>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_GPIO_Init+0x23c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d025      	beq.n	8003fbe <HAL_GPIO_Init+0x21e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_GPIO_Init+0x240>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <HAL_GPIO_Init+0x21a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_GPIO_Init+0x244>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_GPIO_Init+0x216>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_GPIO_Init+0x248>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a17      	ldr	r2, [pc, #92]	; (8003fec <HAL_GPIO_Init+0x24c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_GPIO_Init+0x20e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <HAL_GPIO_Init+0x250>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x20a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_GPIO_Init+0x254>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_GPIO_Init+0x206>
 8003fa2:	2309      	movs	r3, #9
 8003fa4:	e029      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fa6:	230a      	movs	r3, #10
 8003fa8:	e027      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003faa:	2307      	movs	r3, #7
 8003fac:	e025      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fae:	2306      	movs	r3, #6
 8003fb0:	e023      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fb2:	2305      	movs	r3, #5
 8003fb4:	e021      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	e01f      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e01d      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e01b      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e019      	b.n	8003ffa <HAL_GPIO_Init+0x25a>
 8003fc6:	bf00      	nop
 8003fc8:	58000080 	.word	0x58000080
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	58000400 	.word	0x58000400
 8003fd4:	58020000 	.word	0x58020000
 8003fd8:	58020400 	.word	0x58020400
 8003fdc:	58020800 	.word	0x58020800
 8003fe0:	58020c00 	.word	0x58020c00
 8003fe4:	58021000 	.word	0x58021000
 8003fe8:	58021400 	.word	0x58021400
 8003fec:	58021800 	.word	0x58021800
 8003ff0:	58021c00 	.word	0x58021c00
 8003ff4:	58022400 	.word	0x58022400
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	f002 0203 	and.w	r2, r2, #3
 8004000:	0092      	lsls	r2, r2, #2
 8004002:	4093      	lsls	r3, r2
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800400a:	4938      	ldr	r1, [pc, #224]	; (80040ec <HAL_GPIO_Init+0x34c>)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800403e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800406c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f ae6b 	bne.w	8003db4 <HAL_GPIO_Init+0x14>
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3724      	adds	r7, #36	; 0x24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	58000400 	.word	0x58000400

080040f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_PWREx_ConfigSupply+0x70>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d00a      	beq.n	800411a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_PWREx_ConfigSupply+0x70>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e01f      	b.n	8004156 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e01d      	b.n	8004156 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <HAL_PWREx_ConfigSupply+0x70>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	490f      	ldr	r1, [pc, #60]	; (8004160 <HAL_PWREx_ConfigSupply+0x70>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4313      	orrs	r3, r2
 8004128:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800412a:	f7fc fddd 	bl	8000ce8 <HAL_GetTick>
 800412e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004130:	e009      	b.n	8004146 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004132:	f7fc fdd9 	bl	8000ce8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004140:	d901      	bls.n	8004146 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e007      	b.n	8004156 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_PWREx_ConfigSupply+0x70>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d1ee      	bne.n	8004132 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58024800 	.word	0x58024800

08004164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e3c8      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 8087 	beq.w	8004292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800418e:	4b86      	ldr	r3, [pc, #536]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b10      	cmp	r3, #16
 8004198:	d007      	beq.n	80041aa <HAL_RCC_OscConfig+0x46>
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b18      	cmp	r3, #24
 800419e:	d110      	bne.n	80041c2 <HAL_RCC_OscConfig+0x5e>
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d10b      	bne.n	80041c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041aa:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d06c      	beq.n	8004290 <HAL_RCC_OscConfig+0x12c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d168      	bne.n	8004290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e3a2      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x76>
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a75      	ldr	r2, [pc, #468]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	e02e      	b.n	8004238 <HAL_RCC_OscConfig+0xd4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x98>
 80041e2:	4b71      	ldr	r3, [pc, #452]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a70      	ldr	r2, [pc, #448]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6e      	ldr	r3, [pc, #440]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6d      	ldr	r2, [pc, #436]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80041f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xd4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0xbc>
 8004206:	4b68      	ldr	r3, [pc, #416]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a67      	ldr	r2, [pc, #412]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a64      	ldr	r2, [pc, #400]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xd4>
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a60      	ldr	r2, [pc, #384]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b5e      	ldr	r3, [pc, #376]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a5d      	ldr	r2, [pc, #372]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fc fd52 	bl	8000ce8 <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fc fd4e 	bl	8000ce8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	; 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e356      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800425a:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xe4>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fc fd3e 	bl	8000ce8 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fc fd3a 	bl	8000ce8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e342      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004282:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x10c>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 808c 	beq.w	80043b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a0:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_RCC_OscConfig+0x162>
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b18      	cmp	r3, #24
 80042ba:	d137      	bne.n	800432c <HAL_RCC_OscConfig+0x1c8>
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d132      	bne.n	800432c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x17a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e314      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042de:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 0219 	bic.w	r2, r3, #25
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	492f      	ldr	r1, [pc, #188]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fc fcfa 	bl	8000ce8 <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fc fcf6 	bl	8000ce8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e2fe      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	4920      	ldr	r1, [pc, #128]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800432a:	e045      	b.n	80043b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d026      	beq.n	8004382 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 0219 	bic.w	r2, r3, #25
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4919      	ldr	r1, [pc, #100]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fc fccf 	bl	8000ce8 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434e:	f7fc fccb 	bl	8000ce8 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e2d3      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	490b      	ldr	r1, [pc, #44]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e01a      	b.n	80043b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fc fcab 	bl	8000ce8 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7fc fca7 	bl	8000ce8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d903      	bls.n	80043ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e2af      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
 80043a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043ac:	4b96      	ldr	r3, [pc, #600]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ee      	bne.n	8004396 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d06a      	beq.n	800449a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c4:	4b90      	ldr	r3, [pc, #576]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ce:	4b8e      	ldr	r3, [pc, #568]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d007      	beq.n	80043ea <HAL_RCC_OscConfig+0x286>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b18      	cmp	r3, #24
 80043de:	d11b      	bne.n	8004418 <HAL_RCC_OscConfig+0x2b4>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ea:	4b87      	ldr	r3, [pc, #540]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x29e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e282      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004402:	4b81      	ldr	r3, [pc, #516]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	497d      	ldr	r1, [pc, #500]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004416:	e040      	b.n	800449a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d023      	beq.n	8004468 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004420:	4b79      	ldr	r3, [pc, #484]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a78      	ldr	r2, [pc, #480]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fc fc5c 	bl	8000ce8 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004434:	f7fc fc58 	bl	8000ce8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e260      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004446:	4b70      	ldr	r3, [pc, #448]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004452:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	4969      	ldr	r1, [pc, #420]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	60cb      	str	r3, [r1, #12]
 8004466:	e018      	b.n	800449a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004468:	4b67      	ldr	r3, [pc, #412]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a66      	ldr	r2, [pc, #408]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 800446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fc fc38 	bl	8000ce8 <HAL_GetTick>
 8004478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800447c:	f7fc fc34 	bl	8000ce8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e23c      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800448e:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b56      	ldr	r3, [pc, #344]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	4a55      	ldr	r2, [pc, #340]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fc fc15 	bl	8000ce8 <HAL_GetTick>
 80044be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fc fc11 	bl	8000ce8 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e219      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d4:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80044d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x35e>
 80044e0:	e018      	b.n	8004514 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e2:	4b49      	ldr	r3, [pc, #292]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	4a48      	ldr	r2, [pc, #288]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fc fbfb 	bl	8000ce8 <HAL_GetTick>
 80044f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fc fbf7 	bl	8000ce8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e1ff      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004508:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d036      	beq.n	800458e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d019      	beq.n	800455c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004528:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a36      	ldr	r2, [pc, #216]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 800452e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004532:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004534:	f7fc fbd8 	bl	8000ce8 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800453c:	f7fc fbd4 	bl	8000ce8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1dc      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800454e:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x3d8>
 800455a:	e018      	b.n	800458e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800455c:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a29      	ldr	r2, [pc, #164]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004566:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004568:	f7fc fbbe 	bl	8000ce8 <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004570:	f7fc fbba 	bl	8000ce8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1c2      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004582:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8086 	beq.w	80046a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4a8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_RCC_OscConfig+0x4a8>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a8:	f7fc fb9e 	bl	8000ce8 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fc fb9a 	bl	8000ce8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1a2      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_RCC_OscConfig+0x4a8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x480>
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	e032      	b.n	800464a <HAL_RCC_OscConfig+0x4e6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <HAL_RCC_OscConfig+0x4ac>
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a02      	ldr	r2, [pc, #8]	; (8004608 <HAL_RCC_OscConfig+0x4a4>)
 80045fe:	f023 0304 	bic.w	r3, r3, #4
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	e021      	b.n	800464a <HAL_RCC_OscConfig+0x4e6>
 8004606:	bf00      	nop
 8004608:	58024400 	.word	0x58024400
 800460c:	58024800 	.word	0x58024800
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d10c      	bne.n	8004632 <HAL_RCC_OscConfig+0x4ce>
 8004618:	4b83      	ldr	r3, [pc, #524]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a82      	ldr	r2, [pc, #520]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	4b80      	ldr	r3, [pc, #512]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	e00b      	b.n	800464a <HAL_RCC_OscConfig+0x4e6>
 8004632:	4b7d      	ldr	r3, [pc, #500]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a7c      	ldr	r2, [pc, #496]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	4b7a      	ldr	r3, [pc, #488]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a79      	ldr	r2, [pc, #484]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d015      	beq.n	800467e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fc fb49 	bl	8000ce8 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fc fb45 	bl	8000ce8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e14b      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004670:	4b6d      	ldr	r3, [pc, #436]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ee      	beq.n	800465a <HAL_RCC_OscConfig+0x4f6>
 800467c:	e014      	b.n	80046a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fc fb33 	bl	8000ce8 <HAL_GetTick>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fc fb2f 	bl	8000ce8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e135      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800469c:	4b62      	ldr	r3, [pc, #392]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ee      	bne.n	8004686 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 812a 	beq.w	8004906 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046b2:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ba:	2b18      	cmp	r3, #24
 80046bc:	f000 80ba 	beq.w	8004834 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	f040 8095 	bne.w	80047f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b57      	ldr	r3, [pc, #348]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a56      	ldr	r2, [pc, #344]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80046d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fc fb07 	bl	8000ce8 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fc fb03 	bl	8000ce8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e10b      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f0:	4b4d      	ldr	r3, [pc, #308]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80046fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004700:	4b4a      	ldr	r3, [pc, #296]	; (800482c <HAL_RCC_OscConfig+0x6c8>)
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800470c:	0112      	lsls	r2, r2, #4
 800470e:	430a      	orrs	r2, r1
 8004710:	4945      	ldr	r1, [pc, #276]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	628b      	str	r3, [r1, #40]	; 0x28
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	3b01      	subs	r3, #1
 800471c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	3b01      	subs	r3, #1
 8004726:	025b      	lsls	r3, r3, #9
 8004728:	b29b      	uxth	r3, r3
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	3b01      	subs	r3, #1
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	3b01      	subs	r3, #1
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004746:	4938      	ldr	r1, [pc, #224]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a35      	ldr	r2, [pc, #212]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004758:	4b33      	ldr	r3, [pc, #204]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800475a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475c:	4b34      	ldr	r3, [pc, #208]	; (8004830 <HAL_RCC_OscConfig+0x6cc>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004764:	00d2      	lsls	r2, r2, #3
 8004766:	4930      	ldr	r1, [pc, #192]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800476c:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f023 020c 	bic.w	r2, r3, #12
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	492b      	ldr	r1, [pc, #172]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	f023 0202 	bic.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	4927      	ldr	r1, [pc, #156]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	4a24      	ldr	r2, [pc, #144]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479c:	4b22      	ldr	r3, [pc, #136]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	4a21      	ldr	r2, [pc, #132]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047b4:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fc fa8c 	bl	8000ce8 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fc fa88 	bl	8000ce8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e090      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x670>
 80047f2:	e088      	b.n	8004906 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 80047fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fc fa72 	bl	8000ce8 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fc fa6e 	bl	8000ce8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e076      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481a:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_OscConfig+0x6c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x6a4>
 8004826:	e06e      	b.n	8004906 <HAL_RCC_OscConfig+0x7a2>
 8004828:	58024400 	.word	0x58024400
 800482c:	fffffc0c 	.word	0xfffffc0c
 8004830:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004834:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800483a:	4b35      	ldr	r3, [pc, #212]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b01      	cmp	r3, #1
 8004846:	d031      	beq.n	80048ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d12a      	bne.n	80048ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d122      	bne.n	80048ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d11a      	bne.n	80048ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004882:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d111      	bne.n	80048ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d108      	bne.n	80048ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	0e1b      	lsrs	r3, r3, #24
 800489e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e02b      	b.n	8004908 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	08db      	lsrs	r3, r3, #3
 80048b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d01f      	beq.n	8004906 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048d2:	f7fc fa09 	bl	8000ce8 <HAL_GetTick>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80048d8:	bf00      	nop
 80048da:	f7fc fa05 	bl	8000ce8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d0f9      	beq.n	80048da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 80048e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_OscConfig+0x7b0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048f2:	00d2      	lsls	r2, r2, #3
 80048f4:	4906      	ldr	r1, [pc, #24]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_RCC_OscConfig+0x7ac>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3730      	adds	r7, #48	; 0x30
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	58024400 	.word	0x58024400
 8004914:	ffff0007 	.word	0xffff0007

08004918 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e19c      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800492c:	4b8a      	ldr	r3, [pc, #552]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d910      	bls.n	800495c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b87      	ldr	r3, [pc, #540]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 020f 	bic.w	r2, r3, #15
 8004942:	4985      	ldr	r1, [pc, #532]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e184      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d010      	beq.n	800498a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	4b7b      	ldr	r3, [pc, #492]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004974:	429a      	cmp	r2, r3
 8004976:	d908      	bls.n	800498a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004978:	4b78      	ldr	r3, [pc, #480]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	4975      	ldr	r1, [pc, #468]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004986:	4313      	orrs	r3, r2
 8004988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d908      	bls.n	80049b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049a6:	4b6d      	ldr	r3, [pc, #436]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	496a      	ldr	r1, [pc, #424]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699a      	ldr	r2, [r3, #24]
 80049c8:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d908      	bls.n	80049e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049d4:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	495e      	ldr	r1, [pc, #376]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d908      	bls.n	8004a14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a02:	4b56      	ldr	r3, [pc, #344]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4953      	ldr	r1, [pc, #332]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 030f 	and.w	r3, r3, #15
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d908      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a30:	4b4a      	ldr	r3, [pc, #296]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f023 020f 	bic.w	r2, r3, #15
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4947      	ldr	r1, [pc, #284]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d055      	beq.n	8004afa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a4e:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4940      	ldr	r1, [pc, #256]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a68:	4b3c      	ldr	r3, [pc, #240]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d121      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0f6      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a80:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d115      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0ea      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a98:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0de      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0d6      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ab8:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f023 0207 	bic.w	r2, r3, #7
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4925      	ldr	r1, [pc, #148]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aca:	f7fc f90d 	bl	8000ce8 <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad2:	f7fc f909 	bl	8000ce8 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0be      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d1eb      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d010      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d208      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f023 020f 	bic.w	r2, r3, #15
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	490e      	ldr	r1, [pc, #56]	; (8004b5c <HAL_RCC_ClockConfig+0x244>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d214      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 020f 	bic.w	r2, r3, #15
 8004b3e:	4906      	ldr	r1, [pc, #24]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <HAL_RCC_ClockConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e086      	b.n	8004c66 <HAL_RCC_ClockConfig+0x34e>
 8004b58:	52002000 	.word	0x52002000
 8004b5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d208      	bcs.n	8004b8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	4939      	ldr	r1, [pc, #228]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d208      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	492e      	ldr	r1, [pc, #184]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d010      	beq.n	8004bea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d208      	bcs.n	8004bea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	4922      	ldr	r1, [pc, #136]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d010      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d208      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4917      	ldr	r1, [pc, #92]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c18:	f000 f834 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	4912      	ldr	r1, [pc, #72]	; (8004c74 <HAL_RCC_ClockConfig+0x35c>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <HAL_RCC_ClockConfig+0x358>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <HAL_RCC_ClockConfig+0x35c>)
 8004c40:	5cd3      	ldrb	r3, [r2, r3]
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x360>)
 8004c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x364>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x368>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fb fffa 	bl	8000c54 <HAL_InitTick>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	080078a8 	.word	0x080078a8
 8004c78:	24000004 	.word	0x24000004
 8004c7c:	24000000 	.word	0x24000000
 8004c80:	24000008 	.word	0x24000008

08004c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c8a:	4bb3      	ldr	r3, [pc, #716]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c92:	2b18      	cmp	r3, #24
 8004c94:	f200 8155 	bhi.w	8004f42 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004d05 	.word	0x08004d05
 8004ca4:	08004f43 	.word	0x08004f43
 8004ca8:	08004f43 	.word	0x08004f43
 8004cac:	08004f43 	.word	0x08004f43
 8004cb0:	08004f43 	.word	0x08004f43
 8004cb4:	08004f43 	.word	0x08004f43
 8004cb8:	08004f43 	.word	0x08004f43
 8004cbc:	08004f43 	.word	0x08004f43
 8004cc0:	08004d2b 	.word	0x08004d2b
 8004cc4:	08004f43 	.word	0x08004f43
 8004cc8:	08004f43 	.word	0x08004f43
 8004ccc:	08004f43 	.word	0x08004f43
 8004cd0:	08004f43 	.word	0x08004f43
 8004cd4:	08004f43 	.word	0x08004f43
 8004cd8:	08004f43 	.word	0x08004f43
 8004cdc:	08004f43 	.word	0x08004f43
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004f43 	.word	0x08004f43
 8004ce8:	08004f43 	.word	0x08004f43
 8004cec:	08004f43 	.word	0x08004f43
 8004cf0:	08004f43 	.word	0x08004f43
 8004cf4:	08004f43 	.word	0x08004f43
 8004cf8:	08004f43 	.word	0x08004f43
 8004cfc:	08004f43 	.word	0x08004f43
 8004d00:	08004d37 	.word	0x08004d37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d04:	4b94      	ldr	r3, [pc, #592]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d10:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	08db      	lsrs	r3, r3, #3
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	4a90      	ldr	r2, [pc, #576]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d22:	e111      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d24:	4b8d      	ldr	r3, [pc, #564]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d26:	61bb      	str	r3, [r7, #24]
      break;
 8004d28:	e10e      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d2a:	4b8d      	ldr	r3, [pc, #564]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d2c:	61bb      	str	r3, [r7, #24]
      break;
 8004d2e:	e10b      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d30:	4b8c      	ldr	r3, [pc, #560]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d32:	61bb      	str	r3, [r7, #24]
      break;
 8004d34:	e108      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d36:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d40:	4b85      	ldr	r3, [pc, #532]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d4c:	4b82      	ldr	r3, [pc, #520]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d56:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	08db      	lsrs	r3, r3, #3
 8004d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80e1 	beq.w	8004f3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	f000 8083 	beq.w	8004e88 <HAL_RCC_GetSysClockFreq+0x204>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	f200 80a1 	bhi.w	8004ecc <HAL_RCC_GetSysClockFreq+0x248>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x114>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d056      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d96:	e099      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d98:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02d      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004da4:	4b6c      	ldr	r3, [pc, #432]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	4a6b      	ldr	r2, [pc, #428]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
 8004db4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004dfe:	e087      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b51      	ldr	r3, [pc, #324]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e42:	e065      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e86:	e043      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eca:	e021      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	0a5b      	lsrs	r3, r3, #9
 8004f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f34:	ee17 3a90 	vmov	r3, s15
 8004f38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f3a:	e005      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
      break;
 8004f40:	e002      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f44:	61bb      	str	r3, [r7, #24]
      break;
 8004f46:	bf00      	nop
  }

  return sysclockfreq;
 8004f48:	69bb      	ldr	r3, [r7, #24]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	03d09000 	.word	0x03d09000
 8004f60:	003d0900 	.word	0x003d0900
 8004f64:	017d7840 	.word	0x017d7840
 8004f68:	46000000 	.word	0x46000000
 8004f6c:	4c742400 	.word	0x4c742400
 8004f70:	4a742400 	.word	0x4a742400
 8004f74:	4bbebc20 	.word	0x4bbebc20

08004f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f7e:	f7ff fe81 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004f82:	4602      	mov	r2, r0
 8004f84:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	490f      	ldr	r1, [pc, #60]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8004f90:	5ccb      	ldrb	r3, [r1, r3]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	080078a8 	.word	0x080078a8
 8004fd0:	24000004 	.word	0x24000004
 8004fd4:	24000000 	.word	0x24000000

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004fdc:	f7ff ffcc 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	58024400 	.word	0x58024400
 8005000:	080078a8 	.word	0x080078a8

08005004 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b0c6      	sub	sp, #280	; 0x118
 800500a:	af00      	add	r7, sp, #0
 800500c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005028:	2500      	movs	r5, #0
 800502a:	ea54 0305 	orrs.w	r3, r4, r5
 800502e:	d049      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800503a:	d02f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800503c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005040:	d828      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005046:	d01a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504c:	d822      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005056:	d007      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005058:	e01c      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505a:	4bab      	ldr	r3, [pc, #684]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	4aaa      	ldr	r2, [pc, #680]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005066:	e01a      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506c:	3308      	adds	r3, #8
 800506e:	2102      	movs	r1, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f002 fa49 	bl	8007508 <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800507c:	e00f      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800507e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005082:	3328      	adds	r3, #40	; 0x28
 8005084:	2102      	movs	r1, #2
 8005086:	4618      	mov	r0, r3
 8005088:	f002 faf0 	bl	800766c <RCCEx_PLL3_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005092:	e004      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800509c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050a6:	4b98      	ldr	r3, [pc, #608]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b4:	4a94      	ldr	r2, [pc, #592]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6513      	str	r3, [r2, #80]	; 0x50
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80050d0:	f04f 0900 	mov.w	r9, #0
 80050d4:	ea58 0309 	orrs.w	r3, r8, r9
 80050d8:	d047      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d82a      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005101 	.word	0x08005101
 80050f0:	0800510f 	.word	0x0800510f
 80050f4:	08005125 	.word	0x08005125
 80050f8:	08005143 	.word	0x08005143
 80050fc:	08005143 	.word	0x08005143
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a80      	ldr	r2, [pc, #512]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800510c:	e01a      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005112:	3308      	adds	r3, #8
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f002 f9f6 	bl	8007508 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005122:	e00f      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005128:	3328      	adds	r3, #40	; 0x28
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f002 fa9d 	bl	800766c <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005138:	e004      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005140:	e000      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800514c:	4b6e      	ldr	r3, [pc, #440]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800514e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005150:	f023 0107 	bic.w	r1, r3, #7
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	4a6b      	ldr	r2, [pc, #428]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800515c:	430b      	orrs	r3, r1
 800515e:	6513      	str	r3, [r2, #80]	; 0x50
 8005160:	e003      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005166:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005176:	f04f 0b00 	mov.w	fp, #0
 800517a:	ea5a 030b 	orrs.w	r3, sl, fp
 800517e:	d05b      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005188:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800518c:	d03b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800518e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005192:	d834      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005198:	d037      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800519a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800519e:	d82e      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80051a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051a4:	d033      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80051a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051aa:	d828      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80051ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b0:	d01a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80051b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b6:	d822      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80051bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c0:	d007      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80051c2:	e01c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a4f      	ldr	r2, [pc, #316]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051d0:	e01e      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d6:	3308      	adds	r3, #8
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 f994 	bl	8007508 <RCCEx_PLL2_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051e6:	e013      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ec:	3328      	adds	r3, #40	; 0x28
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 fa3b 	bl	800766c <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051fc:	e008      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005204:	e004      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005206:	bf00      	nop
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800520e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005218:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005228:	4a37      	ldr	r2, [pc, #220]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800522a:	430b      	orrs	r3, r1
 800522c:	6593      	str	r3, [r2, #88]	; 0x58
 800522e:	e003      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005234:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800524e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005252:	460b      	mov	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	d05d      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005260:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005264:	d03b      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005266:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800526a:	d834      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800526c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005270:	d037      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005276:	d82e      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005278:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800527c:	d033      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800527e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005282:	d828      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005288:	d01a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800528a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800528e:	d822      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005298:	d007      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800529a:	e01c      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052a8:	e01e      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ae:	3308      	adds	r3, #8
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f002 f928 	bl	8007508 <RCCEx_PLL2_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052be:	e013      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c4:	3328      	adds	r3, #40	; 0x28
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f002 f9cf 	bl	800766c <RCCEx_PLL3_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052d4:	e008      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80052de:	bf00      	nop
 80052e0:	e002      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80052e2:	bf00      	nop
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80052e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80052f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005300:	4a01      	ldr	r2, [pc, #4]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005302:	430b      	orrs	r3, r1
 8005304:	6593      	str	r3, [r2, #88]	; 0x58
 8005306:	e005      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005308:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005310:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005320:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800532a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d03a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	2b30      	cmp	r3, #48	; 0x30
 800533c:	d01f      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d819      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005342:	2b20      	cmp	r3, #32
 8005344:	d00c      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005346:	2b20      	cmp	r3, #32
 8005348:	d815      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d019      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800534e:	2b10      	cmp	r3, #16
 8005350:	d111      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005352:	4baa      	ldr	r3, [pc, #680]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	4aa9      	ldr	r2, [pc, #676]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800535e:	e011      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	3308      	adds	r3, #8
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f002 f8cd 	bl	8007508 <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005374:	e006      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800537c:	e002      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005384:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800538c:	4b9b      	ldr	r3, [pc, #620]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800538e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005390:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	4a98      	ldr	r2, [pc, #608]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800539c:	430b      	orrs	r3, r1
 800539e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053a0:	e003      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80053b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ba:	2300      	movs	r3, #0
 80053bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80053c4:	460b      	mov	r3, r1
 80053c6:	4313      	orrs	r3, r2
 80053c8:	d051      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d4:	d035      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80053d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053da:	d82e      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80053dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053e0:	d031      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80053e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053e6:	d828      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80053e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ec:	d01a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80053ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f2:	d822      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80053f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fc:	d007      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80053fe:	e01c      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005400:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4a7d      	ldr	r2, [pc, #500]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800540c:	e01c      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005412:	3308      	adds	r3, #8
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f002 f876 	bl	8007508 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005422:	e011      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005428:	3328      	adds	r3, #40	; 0x28
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f002 f91d 	bl	800766c <RCCEx_PLL3_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005438:	e006      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005440:	e002      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005442:	bf00      	nop
 8005444:	e000      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005448:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005450:	4b6a      	ldr	r3, [pc, #424]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	4a67      	ldr	r2, [pc, #412]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005460:	430b      	orrs	r3, r1
 8005462:	6513      	str	r3, [r2, #80]	; 0x50
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800546a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800547a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800547e:	2300      	movs	r3, #0
 8005480:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005484:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005488:	460b      	mov	r3, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	d053      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005498:	d033      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800549a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800549e:	d82c      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80054a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054a4:	d02f      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80054a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054aa:	d826      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80054ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054b0:	d02b      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80054b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054b6:	d820      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80054b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054bc:	d012      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80054be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c2:	d81a      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d022      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d115      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d2:	3308      	adds	r3, #8
 80054d4:	2101      	movs	r1, #1
 80054d6:	4618      	mov	r0, r3
 80054d8:	f002 f816 	bl	8007508 <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054e2:	e015      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e8:	3328      	adds	r3, #40	; 0x28
 80054ea:	2101      	movs	r1, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f002 f8bd 	bl	800766c <RCCEx_PLL3_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054f8:	e00a      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005500:	e006      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005502:	bf00      	nop
 8005504:	e004      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800550e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005518:	4b38      	ldr	r3, [pc, #224]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800551a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005526:	4a35      	ldr	r2, [pc, #212]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005528:	430b      	orrs	r3, r1
 800552a:	6513      	str	r3, [r2, #80]	; 0x50
 800552c:	e003      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005532:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005546:	2300      	movs	r3, #0
 8005548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800554c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d058      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800555e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005562:	d033      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005568:	d82c      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d02f      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d826      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800557a:	d02b      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800557c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005580:	d820      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005586:	d012      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558c:	d81a      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d022      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005596:	d115      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559c:	3308      	adds	r3, #8
 800559e:	2101      	movs	r1, #1
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 ffb1 	bl	8007508 <RCCEx_PLL2_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055ac:	e015      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	3328      	adds	r3, #40	; 0x28
 80055b4:	2101      	movs	r1, #1
 80055b6:	4618      	mov	r0, r3
 80055b8:	f002 f858 	bl	800766c <RCCEx_PLL3_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055c2:	e00a      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055ca:	e006      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80055cc:	bf00      	nop
 80055ce:	e004      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80055d0:	bf00      	nop
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10e      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055f2:	4a02      	ldr	r2, [pc, #8]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6593      	str	r3, [r2, #88]	; 0x58
 80055f8:	e006      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80055fa:	bf00      	nop
 80055fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005604:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005618:	2300      	movs	r3, #0
 800561a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800561e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005622:	460b      	mov	r3, r1
 8005624:	4313      	orrs	r3, r2
 8005626:	d037      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005632:	d00e      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d816      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800563e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005642:	d111      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005644:	4bc4      	ldr	r3, [pc, #784]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	4ac3      	ldr	r2, [pc, #780]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800564a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005650:	e00f      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005656:	3308      	adds	r3, #8
 8005658:	2101      	movs	r1, #1
 800565a:	4618      	mov	r0, r3
 800565c:	f001 ff54 	bl	8007508 <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005666:	e004      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800567a:	4bb7      	ldr	r3, [pc, #732]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005688:	4ab3      	ldr	r2, [pc, #716]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800568a:	430b      	orrs	r3, r1
 800568c:	6513      	str	r3, [r2, #80]	; 0x50
 800568e:	e003      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80056a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d039      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d81c      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	08005705 	.word	0x08005705
 80056cc:	080056d9 	.word	0x080056d9
 80056d0:	080056e7 	.word	0x080056e7
 80056d4:	08005705 	.word	0x08005705
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b9f      	ldr	r3, [pc, #636]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a9e      	ldr	r2, [pc, #632]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056e4:	e00f      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ea:	3308      	adds	r3, #8
 80056ec:	2102      	movs	r1, #2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 ff0a 	bl	8007508 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056fa:	e004      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005702:	e000      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005706:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800570e:	4b92      	ldr	r3, [pc, #584]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	f023 0103 	bic.w	r1, r3, #3
 8005716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571c:	4a8e      	ldr	r2, [pc, #568]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800571e:	430b      	orrs	r3, r1
 8005720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005722:	e003      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005728:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800573c:	2300      	movs	r3, #0
 800573e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005742:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	f000 8099 	beq.w	8005880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574e:	4b83      	ldr	r3, [pc, #524]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a82      	ldr	r2, [pc, #520]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005758:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800575a:	f7fb fac5 	bl	8000ce8 <HAL_GetTick>
 800575e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005762:	e00b      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005764:	f7fb fac0 	bl	8000ce8 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b64      	cmp	r3, #100	; 0x64
 8005772:	d903      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800577a:	e005      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800577c:	4b77      	ldr	r3, [pc, #476]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ed      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800578c:	2b00      	cmp	r3, #0
 800578e:	d173      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005790:	4b71      	ldr	r3, [pc, #452]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800579c:	4053      	eors	r3, r2
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d015      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057a6:	4b6c      	ldr	r3, [pc, #432]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057b2:	4b69      	ldr	r3, [pc, #420]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	4a68      	ldr	r2, [pc, #416]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	4a65      	ldr	r2, [pc, #404]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057ca:	4a63      	ldr	r2, [pc, #396]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	d118      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fb fa82 	bl	8000ce8 <HAL_GetTick>
 80057e4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057e8:	e00d      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fb fa7d 	bl	8000ce8 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057f4:	1ad2      	subs	r2, r2, r3
 80057f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d903      	bls.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8005804:	e005      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005806:	4b54      	ldr	r3, [pc, #336]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0eb      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005816:	2b00      	cmp	r3, #0
 8005818:	d129      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582a:	d10e      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800582c:	4b4a      	ldr	r3, [pc, #296]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800583c:	091a      	lsrs	r2, r3, #4
 800583e:	4b48      	ldr	r3, [pc, #288]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005840:	4013      	ands	r3, r2
 8005842:	4a45      	ldr	r2, [pc, #276]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005844:	430b      	orrs	r3, r1
 8005846:	6113      	str	r3, [r2, #16]
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800584a:	4b43      	ldr	r3, [pc, #268]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	4a42      	ldr	r2, [pc, #264]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005850:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005854:	6113      	str	r3, [r2, #16]
 8005856:	4b40      	ldr	r3, [pc, #256]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005858:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005866:	4a3c      	ldr	r2, [pc, #240]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005868:	430b      	orrs	r3, r1
 800586a:	6713      	str	r3, [r2, #112]	; 0x70
 800586c:	e008      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800586e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005872:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005876:	e003      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800587c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f002 0301 	and.w	r3, r2, #1
 800588c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005890:	2300      	movs	r3, #0
 8005892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005896:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	f000 808f 	beq.w	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a8:	2b28      	cmp	r3, #40	; 0x28
 80058aa:	d871      	bhi.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	08005999 	.word	0x08005999
 80058b8:	08005991 	.word	0x08005991
 80058bc:	08005991 	.word	0x08005991
 80058c0:	08005991 	.word	0x08005991
 80058c4:	08005991 	.word	0x08005991
 80058c8:	08005991 	.word	0x08005991
 80058cc:	08005991 	.word	0x08005991
 80058d0:	08005991 	.word	0x08005991
 80058d4:	08005965 	.word	0x08005965
 80058d8:	08005991 	.word	0x08005991
 80058dc:	08005991 	.word	0x08005991
 80058e0:	08005991 	.word	0x08005991
 80058e4:	08005991 	.word	0x08005991
 80058e8:	08005991 	.word	0x08005991
 80058ec:	08005991 	.word	0x08005991
 80058f0:	08005991 	.word	0x08005991
 80058f4:	0800597b 	.word	0x0800597b
 80058f8:	08005991 	.word	0x08005991
 80058fc:	08005991 	.word	0x08005991
 8005900:	08005991 	.word	0x08005991
 8005904:	08005991 	.word	0x08005991
 8005908:	08005991 	.word	0x08005991
 800590c:	08005991 	.word	0x08005991
 8005910:	08005991 	.word	0x08005991
 8005914:	08005999 	.word	0x08005999
 8005918:	08005991 	.word	0x08005991
 800591c:	08005991 	.word	0x08005991
 8005920:	08005991 	.word	0x08005991
 8005924:	08005991 	.word	0x08005991
 8005928:	08005991 	.word	0x08005991
 800592c:	08005991 	.word	0x08005991
 8005930:	08005991 	.word	0x08005991
 8005934:	08005999 	.word	0x08005999
 8005938:	08005991 	.word	0x08005991
 800593c:	08005991 	.word	0x08005991
 8005940:	08005991 	.word	0x08005991
 8005944:	08005991 	.word	0x08005991
 8005948:	08005991 	.word	0x08005991
 800594c:	08005991 	.word	0x08005991
 8005950:	08005991 	.word	0x08005991
 8005954:	08005999 	.word	0x08005999
 8005958:	58024400 	.word	0x58024400
 800595c:	58024800 	.word	0x58024800
 8005960:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005968:	3308      	adds	r3, #8
 800596a:	2101      	movs	r1, #1
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fdcb 	bl	8007508 <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005978:	e00f      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800597a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597e:	3328      	adds	r3, #40	; 0x28
 8005980:	2101      	movs	r1, #1
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fe72 	bl	800766c <RCCEx_PLL3_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800598e:	e004      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005996:	e000      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059a2:	4bbf      	ldr	r3, [pc, #764]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b0:	4abb      	ldr	r2, [pc, #748]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6553      	str	r3, [r2, #84]	; 0x54
 80059b6:	e003      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f002 0302 	and.w	r3, r2, #2
 80059cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059d0:	2300      	movs	r3, #0
 80059d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80059da:	460b      	mov	r3, r1
 80059dc:	4313      	orrs	r3, r2
 80059de:	d041      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e6:	2b05      	cmp	r3, #5
 80059e8:	d824      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a3d 	.word	0x08005a3d
 80059f4:	08005a09 	.word	0x08005a09
 80059f8:	08005a1f 	.word	0x08005a1f
 80059fc:	08005a3d 	.word	0x08005a3d
 8005a00:	08005a3d 	.word	0x08005a3d
 8005a04:	08005a3d 	.word	0x08005a3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	2101      	movs	r1, #1
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fd79 	bl	8007508 <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a1c:	e00f      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a22:	3328      	adds	r3, #40	; 0x28
 8005a24:	2101      	movs	r1, #1
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 fe20 	bl	800766c <RCCEx_PLL3_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a32:	e004      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a3a:	e000      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a46:	4b96      	ldr	r3, [pc, #600]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f023 0107 	bic.w	r1, r3, #7
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a54:	4a92      	ldr	r2, [pc, #584]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a56:	430b      	orrs	r3, r1
 8005a58:	6553      	str	r3, [r2, #84]	; 0x54
 8005a5a:	e003      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	f002 0304 	and.w	r3, r2, #4
 8005a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a74:	2300      	movs	r3, #0
 8005a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4313      	orrs	r3, r2
 8005a82:	d044      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d825      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005ae5 	.word	0x08005ae5
 8005a9c:	08005ab1 	.word	0x08005ab1
 8005aa0:	08005ac7 	.word	0x08005ac7
 8005aa4:	08005ae5 	.word	0x08005ae5
 8005aa8:	08005ae5 	.word	0x08005ae5
 8005aac:	08005ae5 	.word	0x08005ae5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fd25 	bl	8007508 <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e00f      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aca:	3328      	adds	r3, #40	; 0x28
 8005acc:	2101      	movs	r1, #1
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 fdcc 	bl	800766c <RCCEx_PLL3_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ada:	e004      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10b      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aee:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	f023 0107 	bic.w	r1, r3, #7
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	4a68      	ldr	r2, [pc, #416]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6593      	str	r3, [r2, #88]	; 0x58
 8005b04:	e003      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f002 0320 	and.w	r3, r2, #32
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	d055      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b3a:	d033      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b40:	d82c      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d02f      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d826      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b52:	d02b      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b58:	d820      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5e:	d012      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b64:	d81a      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d022      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b6e:	d115      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b74:	3308      	adds	r3, #8
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 fcc5 	bl	8007508 <RCCEx_PLL2_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b84:	e015      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8a:	3328      	adds	r3, #40	; 0x28
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fd6c 	bl	800766c <RCCEx_PLL3_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b9a:	e00a      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ba2:	e006      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005ba4:	bf00      	nop
 8005ba6:	e004      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005ba8:	bf00      	nop
 8005baa:	e002      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005bac:	bf00      	nop
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bba:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bca:	4a35      	ldr	r2, [pc, #212]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6553      	str	r3, [r2, #84]	; 0x54
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bea:	2300      	movs	r3, #0
 8005bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bf0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	d058      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c06:	d033      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005c08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c0c:	d82c      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d02f      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d826      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c1e:	d02b      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c24:	d820      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2a:	d012      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c30:	d81a      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d022      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3a:	d115      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c40:	3308      	adds	r3, #8
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fc5f 	bl	8007508 <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c50:	e015      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	3328      	adds	r3, #40	; 0x28
 8005c58:	2102      	movs	r1, #2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 fd06 	bl	800766c <RCCEx_PLL3_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c66:	e00a      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c6e:	e006      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c70:	bf00      	nop
 8005c72:	e004      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10e      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c96:	4a02      	ldr	r2, [pc, #8]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c9c:	e006      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005c9e:	bf00      	nop
 8005ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ca8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	d055      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cd8:	d033      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005cda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cde:	d82c      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce4:	d02f      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cea:	d826      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005cec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cf0:	d02b      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005cf2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cf6:	d820      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cfc:	d012      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d02:	d81a      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d022      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0c:	d115      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d12:	3308      	adds	r3, #8
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 fbf6 	bl	8007508 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d22:	e015      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d28:	3328      	adds	r3, #40	; 0x28
 8005d2a:	2102      	movs	r1, #2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fc9d 	bl	800766c <RCCEx_PLL3_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d38:	e00a      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d42:	bf00      	nop
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d58:	4ba0      	ldr	r3, [pc, #640]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d68:	4a9c      	ldr	r2, [pc, #624]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f002 0308 	and.w	r3, r2, #8
 8005d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d8e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d01e      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005daa:	3328      	adds	r3, #40	; 0x28
 8005dac:	2102      	movs	r1, #2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 fc5c 	bl	800766c <RCCEx_PLL3_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005dc0:	4b86      	ldr	r3, [pc, #536]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd0:	4a82      	ldr	r2, [pc, #520]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f002 0310 	and.w	r3, r2, #16
 8005de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005de6:	2300      	movs	r3, #0
 8005de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d01e      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e02:	d10c      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	3328      	adds	r3, #40	; 0x28
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fc2d 	bl	800766c <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e1e:	4b6f      	ldr	r3, [pc, #444]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2e:	4a6b      	ldr	r2, [pc, #428]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e42:	2300      	movs	r3, #0
 8005e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	d03e      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e5c:	d022      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e62:	d81b      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d00b      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005e6e:	e015      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e74:	3308      	adds	r3, #8
 8005e76:	2100      	movs	r1, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 fb45 	bl	8007508 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e84:	e00f      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8a:	3328      	adds	r3, #40	; 0x28
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fbec 	bl	800766c <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e9a:	e004      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eae:	4b4b      	ldr	r3, [pc, #300]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ebe:	4a47      	ldr	r2, [pc, #284]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005eda:	673b      	str	r3, [r7, #112]	; 0x70
 8005edc:	2300      	movs	r3, #0
 8005ede:	677b      	str	r3, [r7, #116]	; 0x74
 8005ee0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d03b      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef6:	d01f      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005efc:	d818      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f02:	d003      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f08:	d007      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005f0a:	e011      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0c:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	4a32      	ldr	r2, [pc, #200]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f18:	e00f      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	3328      	adds	r3, #40	; 0x28
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 fba2 	bl	800766c <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f2e:	e004      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f52:	4a22      	ldr	r2, [pc, #136]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6553      	str	r3, [r2, #84]	; 0x54
 8005f58:	e003      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f70:	2300      	movs	r3, #0
 8005f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	d034      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d007      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005f8e:	e011      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f9c:	e00e      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 faae 	bl	8007508 <RCCEx_PLL2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005fb2:	e003      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	4a02      	ldr	r2, [pc, #8]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005fda:	bf00      	nop
 8005fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fe4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ffa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005ffe:	460b      	mov	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	d00c      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	3328      	adds	r3, #40	; 0x28
 800600a:	2102      	movs	r1, #2
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fb2d 	bl	800766c <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800602a:	65bb      	str	r3, [r7, #88]	; 0x58
 800602c:	2300      	movs	r3, #0
 800602e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006030:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006034:	460b      	mov	r3, r1
 8006036:	4313      	orrs	r3, r2
 8006038:	d036      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006044:	d018      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604a:	d811      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800604c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006050:	d014      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006056:	d80b      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d011      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800605c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006060:	d106      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006062:	4bb7      	ldr	r3, [pc, #732]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	4ab6      	ldr	r2, [pc, #728]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800606e:	e008      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800608a:	4bad      	ldr	r3, [pc, #692]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006098:	4aa9      	ldr	r2, [pc, #676]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800609a:	430b      	orrs	r3, r1
 800609c:	6553      	str	r3, [r2, #84]	; 0x54
 800609e:	e003      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80060b4:	653b      	str	r3, [r7, #80]	; 0x50
 80060b6:	2300      	movs	r3, #0
 80060b8:	657b      	str	r3, [r7, #84]	; 0x54
 80060ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80060be:	460b      	mov	r3, r1
 80060c0:	4313      	orrs	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060c4:	4b9e      	ldr	r3, [pc, #632]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a9b      	ldr	r2, [pc, #620]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80060e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e6:	2300      	movs	r3, #0
 80060e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80060ee:	460b      	mov	r3, r1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	d009      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060f4:	4b92      	ldr	r3, [pc, #584]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006102:	4a8f      	ldr	r2, [pc, #572]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006114:	643b      	str	r3, [r7, #64]	; 0x40
 8006116:	2300      	movs	r3, #0
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
 800611a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800611e:	460b      	mov	r3, r1
 8006120:	4313      	orrs	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006124:	4b86      	ldr	r3, [pc, #536]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	4a85      	ldr	r2, [pc, #532]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800612a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800612e:	6113      	str	r3, [r2, #16]
 8006130:	4b83      	ldr	r3, [pc, #524]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006132:	6919      	ldr	r1, [r3, #16]
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800613c:	4a80      	ldr	r2, [pc, #512]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800613e:	430b      	orrs	r3, r1
 8006140:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800614e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006150:	2300      	movs	r3, #0
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006154:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006158:	460b      	mov	r3, r1
 800615a:	4313      	orrs	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800615e:	4b78      	ldr	r3, [pc, #480]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006162:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	4a74      	ldr	r2, [pc, #464]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800616e:	430b      	orrs	r3, r1
 8006170:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800617e:	633b      	str	r3, [r7, #48]	; 0x30
 8006180:	2300      	movs	r3, #0
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
 8006184:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d00a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800618e:	4b6c      	ldr	r3, [pc, #432]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	4a68      	ldr	r2, [pc, #416]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	2100      	movs	r1, #0
 80061ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80061ba:	460b      	mov	r3, r1
 80061bc:	4313      	orrs	r3, r2
 80061be:	d011      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c4:	3308      	adds	r3, #8
 80061c6:	2100      	movs	r1, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f99d 	bl	8007508 <RCCEx_PLL2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80061d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	2100      	movs	r1, #0
 80061ee:	6239      	str	r1, [r7, #32]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
 80061f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d011      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	3308      	adds	r3, #8
 8006206:	2101      	movs	r1, #1
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f97d 	bl	8007508 <RCCEx_PLL2_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006220:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	2100      	movs	r1, #0
 800622e:	61b9      	str	r1, [r7, #24]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d011      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	3308      	adds	r3, #8
 8006246:	2102      	movs	r1, #2
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f95d 	bl	8007508 <RCCEx_PLL2_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006260:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	2100      	movs	r1, #0
 800626e:	6139      	str	r1, [r7, #16]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d011      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	3328      	adds	r3, #40	; 0x28
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f001 f9ef 	bl	800766c <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	2100      	movs	r1, #0
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062ba:	460b      	mov	r3, r1
 80062bc:	4313      	orrs	r3, r2
 80062be:	d011      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c4:	3328      	adds	r3, #40	; 0x28
 80062c6:	2101      	movs	r1, #1
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f9cf 	bl	800766c <RCCEx_PLL3_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80062d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	2100      	movs	r1, #0
 80062ee:	6039      	str	r1, [r7, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d011      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006304:	3328      	adds	r3, #40	; 0x28
 8006306:	2102      	movs	r1, #2
 8006308:	4618      	mov	r0, r3
 800630a:	f001 f9af 	bl	800766c <RCCEx_PLL3_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006320:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006324:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
}
 8006332:	4618      	mov	r0, r3
 8006334:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006338:	46bd      	mov	sp, r7
 800633a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400

08006344 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b090      	sub	sp, #64	; 0x40
 8006348:	af00      	add	r7, sp, #0
 800634a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800634e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006352:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006356:	430b      	orrs	r3, r1
 8006358:	f040 8094 	bne.w	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800635c:	4b9b      	ldr	r3, [pc, #620]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2b04      	cmp	r3, #4
 800636a:	f200 8087 	bhi.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	08006389 	.word	0x08006389
 8006378:	080063b1 	.word	0x080063b1
 800637c:	080063d9 	.word	0x080063d9
 8006380:	08006475 	.word	0x08006475
 8006384:	08006401 	.word	0x08006401
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006388:	4b90      	ldr	r3, [pc, #576]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006394:	d108      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800639a:	4618      	mov	r0, r3
 800639c:	f000 ff62 	bl	8007264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063a4:	f000 bc93 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ac:	f000 bc8f 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063b0:	4b86      	ldr	r3, [pc, #536]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063bc:	d108      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fca6 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063cc:	f000 bc7f 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d4:	f000 bc7b 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063d8:	4b7c      	ldr	r3, [pc, #496]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e4:	d108      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fde6 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f4:	f000 bc6b 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fc:	f000 bc67 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006400:	4b72      	ldr	r3, [pc, #456]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006408:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800640a:	4b70      	ldr	r3, [pc, #448]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800641c:	4b6b      	ldr	r3, [pc, #428]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a6a      	ldr	r2, [pc, #424]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642e:	e01f      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006430:	4b66      	ldr	r3, [pc, #408]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643c:	d106      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006444:	d102      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006446:	4b63      	ldr	r3, [pc, #396]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644a:	e011      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800644c:	4b5f      	ldr	r3, [pc, #380]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006458:	d106      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006460:	d102      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006462:	4b5d      	ldr	r3, [pc, #372]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800646c:	f000 bc2f 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006470:	f000 bc2d 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006474:	4b59      	ldr	r3, [pc, #356]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006478:	f000 bc29 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006480:	f000 bc25 	b.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006488:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800648c:	430b      	orrs	r3, r1
 800648e:	f040 80a7 	bne.w	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006492:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800649a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a2:	d054      	beq.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064aa:	f200 808b 	bhi.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064b4:	f000 8083 	beq.w	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064be:	f200 8081 	bhi.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c8:	d02f      	beq.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d0:	d878      	bhi.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064de:	d012      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80064e0:	e070      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064e2:	4b3a      	ldr	r3, [pc, #232]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ee:	d107      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 feb5 	bl	8007264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064fe:	e3e6      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006504:	e3e3      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006506:	4b31      	ldr	r3, [pc, #196]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800650e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006512:	d107      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006514:	f107 0318 	add.w	r3, r7, #24
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fbfb 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006522:	e3d4      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006528:	e3d1      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800652a:	4b28      	ldr	r3, [pc, #160]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006536:	d107      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006538:	f107 030c 	add.w	r3, r7, #12
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fd3d 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006546:	e3c2      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800654c:	e3bf      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800654e:	4b1f      	ldr	r3, [pc, #124]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006556:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006558:	4b1c      	ldr	r3, [pc, #112]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b04      	cmp	r3, #4
 8006562:	d10c      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006576:	fa22 f303 	lsr.w	r3, r2, r3
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	e01e      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006592:	d102      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006598:	e010      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a6:	d106      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80065a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ae:	d102      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065ba:	e388      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065bc:	e387      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c2:	e384      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c8:	e381      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
 80065d0:	03d09000 	.word	0x03d09000
 80065d4:	003d0900 	.word	0x003d0900
 80065d8:	017d7840 	.word	0x017d7840
 80065dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80065e8:	430b      	orrs	r3, r1
 80065ea:	f040 809c 	bne.w	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80065ee:	4b9e      	ldr	r3, [pc, #632]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065fe:	d054      	beq.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006606:	f200 808b 	bhi.w	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006610:	f000 8083 	beq.w	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800661a:	f200 8081 	bhi.w	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006624:	d02f      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800662c:	d878      	bhi.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800663a:	d012      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800663c:	e070      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800663e:	4b8a      	ldr	r3, [pc, #552]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800664c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fe07 	bl	8007264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665a:	e338      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006660:	e335      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006662:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800666e:	d107      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006670:	f107 0318 	add.w	r3, r7, #24
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fb4d 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667e:	e326      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006684:	e323      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006686:	4b78      	ldr	r3, [pc, #480]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006692:	d107      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fc8f 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a2:	e314      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	e311      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066aa:	4b6f      	ldr	r3, [pc, #444]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066b4:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d10c      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c6:	4b68      	ldr	r3, [pc, #416]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	4a66      	ldr	r2, [pc, #408]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d8:	e01e      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066da:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e6:	d106      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ee:	d102      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066f0:	4b5f      	ldr	r3, [pc, #380]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	e010      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066f6:	4b5c      	ldr	r3, [pc, #368]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800670c:	4b59      	ldr	r3, [pc, #356]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006710:	e002      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006716:	e2da      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006718:	e2d9      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800671a:	4b57      	ldr	r3, [pc, #348]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800671e:	e2d6      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006724:	e2d3      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800672e:	430b      	orrs	r3, r1
 8006730:	f040 80a7 	bne.w	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006734:	4b4c      	ldr	r3, [pc, #304]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800673c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006744:	d055      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800674c:	f200 8096 	bhi.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006756:	f000 8084 	beq.w	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006760:	f200 808c 	bhi.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d030      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006772:	f200 8083 	bhi.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006782:	d012      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006784:	e07a      	b.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006786:	4b38      	ldr	r3, [pc, #224]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006792:	d107      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fd63 	bl	8007264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a2:	e294      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a8:	e291      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b6:	d107      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b8:	f107 0318 	add.w	r3, r7, #24
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 faa9 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c6:	e282      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067cc:	e27f      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067ce:	4b26      	ldr	r3, [pc, #152]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067da:	d107      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067dc:	f107 030c 	add.w	r3, r7, #12
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fbeb 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ea:	e270      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f0:	e26d      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067fc:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b04      	cmp	r3, #4
 8006806:	d10c      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800680e:	4b16      	ldr	r3, [pc, #88]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	08db      	lsrs	r3, r3, #3
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	4a14      	ldr	r2, [pc, #80]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800681a:	fa22 f303 	lsr.w	r3, r2, r3
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	e01e      	b.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006822:	4b11      	ldr	r3, [pc, #68]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682e:	d106      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006836:	d102      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006838:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683c:	e010      	b.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800683e:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684a:	d106      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006852:	d102      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	e002      	b.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800685e:	e236      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006860:	e235      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006866:	e232      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006868:	58024400 	.word	0x58024400
 800686c:	03d09000 	.word	0x03d09000
 8006870:	003d0900 	.word	0x003d0900
 8006874:	017d7840 	.word	0x017d7840
 8006878:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006880:	e225      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006886:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800688a:	430b      	orrs	r3, r1
 800688c:	f040 8085 	bne.w	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006890:	4b9c      	ldr	r3, [pc, #624]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a0:	d06b      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a8:	d874      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b0:	d056      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b8:	d86c      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c0:	d03b      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c8:	d864      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d0:	d021      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d8:	d85c      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e6:	d004      	beq.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80068e8:	e054      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80068ea:	f7fe fb75 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 80068ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068f0:	e1ed      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068f2:	4b84      	ldr	r3, [pc, #528]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068fe:	d107      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006900:	f107 0318 	add.w	r3, r7, #24
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fa05 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690e:	e1de      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006914:	e1db      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006916:	4b7b      	ldr	r3, [pc, #492]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800691e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006922:	d107      	bne.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006924:	f107 030c 	add.w	r3, r7, #12
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fb47 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006932:	e1cc      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006938:	e1c9      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800693a:	4b72      	ldr	r3, [pc, #456]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b04      	cmp	r3, #4
 8006944:	d109      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006946:	4b6f      	ldr	r3, [pc, #444]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	08db      	lsrs	r3, r3, #3
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	4a6d      	ldr	r2, [pc, #436]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006952:	fa22 f303 	lsr.w	r3, r2, r3
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006958:	e1b9      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695e:	e1b6      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006960:	4b68      	ldr	r3, [pc, #416]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696c:	d102      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800696e:	4b67      	ldr	r3, [pc, #412]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006972:	e1ac      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006978:	e1a9      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800697a:	4b62      	ldr	r3, [pc, #392]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006986:	d102      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006988:	4b61      	ldr	r3, [pc, #388]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800698c:	e19f      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006992:	e19c      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006998:	e199      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800699a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800699e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80069a2:	430b      	orrs	r3, r1
 80069a4:	d173      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80069a6:	4b57      	ldr	r3, [pc, #348]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069b6:	d02f      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069be:	d863      	bhi.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069cc:	d012      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80069ce:	e05b      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069d0:	4b4c      	ldr	r3, [pc, #304]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069dc:	d107      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069de:	f107 0318 	add.w	r3, r7, #24
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f996 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ec:	e16f      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f2:	e16c      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069f4:	4b43      	ldr	r3, [pc, #268]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a00:	d107      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 030c 	add.w	r3, r7, #12
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fad8 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a10:	e15d      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a16:	e15a      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a18:	4b3a      	ldr	r3, [pc, #232]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a22:	4b38      	ldr	r3, [pc, #224]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d109      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a34:	4b33      	ldr	r3, [pc, #204]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	08db      	lsrs	r3, r3, #3
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	4a32      	ldr	r2, [pc, #200]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a46:	e01e      	b.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a48:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a54:	d106      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a5c:	d102      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a5e:	4b2b      	ldr	r3, [pc, #172]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a62:	e010      	b.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a64:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a70:	d106      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a78:	d102      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a7a:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a7e:	e002      	b.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a84:	e123      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a86:	e122      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a8c:	e11f      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a92:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006a96:	430b      	orrs	r3, r1
 8006a98:	d13c      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab0:	d012      	beq.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006ab2:	e023      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ab4:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ac0:	d107      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fbcc 	bl	8007264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad0:	e0fd      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad6:	e0fa      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae6:	f107 0318 	add.w	r3, r7, #24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f912 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af4:	e0eb      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afa:	e0e8      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b00:	e0e5      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
 8006b08:	03d09000 	.word	0x03d09000
 8006b0c:	003d0900 	.word	0x003d0900
 8006b10:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b18:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	f040 8085 	bne.w	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006b22:	4b6d      	ldr	r3, [pc, #436]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b26:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b32:	d06b      	beq.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b3a:	d874      	bhi.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b42:	d056      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4a:	d86c      	bhi.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b52:	d03b      	beq.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b5a:	d864      	bhi.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b62:	d021      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b6a:	d85c      	bhi.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b78:	d004      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006b7a:	e054      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006b7c:	f000 f8b4 	bl	8006ce8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b80:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b82:	e0a4      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b84:	4b54      	ldr	r3, [pc, #336]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b92:	f107 0318 	add.w	r3, r7, #24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f8bc 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba0:	e095      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba6:	e092      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ba8:	4b4b      	ldr	r3, [pc, #300]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb4:	d107      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb6:	f107 030c 	add.w	r3, r7, #12
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f9fe 	bl	8006fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc4:	e083      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bca:	e080      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bcc:	4b42      	ldr	r3, [pc, #264]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d109      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	4a3e      	ldr	r2, [pc, #248]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bea:	e070      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf0:	e06d      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d102      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006c00:	4b37      	ldr	r3, [pc, #220]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c04:	e063      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0a:	e060      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c0c:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c18:	d102      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1e:	e056      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c24:	e053      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2a:	e050      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c30:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006c34:	430b      	orrs	r3, r1
 8006c36:	d148      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006c38:	4b27      	ldr	r3, [pc, #156]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c48:	d02a      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c50:	d838      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5e:	d00d      	beq.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006c60:	e030      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c62:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6e:	d102      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006c70:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c74:	e02b      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7a:	e028      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c7c:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c88:	d107      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fae8 	bl	8007264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c98:	e019      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c9e:	e016      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cac:	d107      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f82e 	bl	8006d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cbc:	e007      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cc8:	e001      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3740      	adds	r7, #64	; 0x40
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	58024400 	.word	0x58024400
 8006cdc:	03d09000 	.word	0x03d09000
 8006ce0:	003d0900 	.word	0x003d0900
 8006ce4:	017d7840 	.word	0x017d7840

08006ce8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006cec:	f7fe f944 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	091b      	lsrs	r3, r3, #4
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	4904      	ldr	r1, [pc, #16]	; (8006d10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cfe:	5ccb      	ldrb	r3, [r1, r3]
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	080078a8 	.word	0x080078a8

08006d14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b089      	sub	sp, #36	; 0x24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d1c:	4ba1      	ldr	r3, [pc, #644]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d26:	4b9f      	ldr	r3, [pc, #636]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	0b1b      	lsrs	r3, r3, #12
 8006d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d32:	4b9c      	ldr	r3, [pc, #624]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	091b      	lsrs	r3, r3, #4
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006d3e:	4b99      	ldr	r3, [pc, #612]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	08db      	lsrs	r3, r3, #3
 8006d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8111 	beq.w	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	f000 8083 	beq.w	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	f200 80a1 	bhi.w	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d056      	beq.n	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d7e:	e099      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d80:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d02d      	beq.n	8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d8c:	4b85      	ldr	r3, [pc, #532]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	08db      	lsrs	r3, r3, #3
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	4a84      	ldr	r2, [pc, #528]	; (8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db6:	4b7b      	ldr	r3, [pc, #492]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006de6:	e087      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b6a      	ldr	r3, [pc, #424]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2a:	e065      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b59      	ldr	r3, [pc, #356]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6e:	e043      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b48      	ldr	r3, [pc, #288]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb2:	e021      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	4b37      	ldr	r3, [pc, #220]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ef6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	0a5b      	lsrs	r3, r3, #9
 8006efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1e:	ee17 2a90 	vmov	r2, s15
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f26:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	0c1b      	lsrs	r3, r3, #16
 8006f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4c:	ee17 2a90 	vmov	r2, s15
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f54:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	0e1b      	lsrs	r3, r3, #24
 8006f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7a:	ee17 2a90 	vmov	r2, s15
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f82:	e008      	b.n	8006f96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
}
 8006f96:	bf00      	nop
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	03d09000 	.word	0x03d09000
 8006fac:	46000000 	.word	0x46000000
 8006fb0:	4c742400 	.word	0x4c742400
 8006fb4:	4a742400 	.word	0x4a742400
 8006fb8:	4bbebc20 	.word	0x4bbebc20

08006fbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b089      	sub	sp, #36	; 0x24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fc4:	4ba1      	ldr	r3, [pc, #644]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006fce:	4b9f      	ldr	r3, [pc, #636]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	0d1b      	lsrs	r3, r3, #20
 8006fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006fda:	4b9c      	ldr	r3, [pc, #624]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	0a1b      	lsrs	r3, r3, #8
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006fe6:	4b99      	ldr	r3, [pc, #612]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8111 	beq.w	800722c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b02      	cmp	r3, #2
 800700e:	f000 8083 	beq.w	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b02      	cmp	r3, #2
 8007016:	f200 80a1 	bhi.w	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d056      	beq.n	80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007026:	e099      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007028:	4b88      	ldr	r3, [pc, #544]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d02d      	beq.n	8007090 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007034:	4b85      	ldr	r3, [pc, #532]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	08db      	lsrs	r3, r3, #3
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	4a84      	ldr	r2, [pc, #528]	; (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
 8007044:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b7b      	ldr	r3, [pc, #492]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800708e:	e087      	b.n	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b6a      	ldr	r3, [pc, #424]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d2:	e065      	b.n	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800725c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b59      	ldr	r3, [pc, #356]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007116:	e043      	b.n	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b48      	ldr	r3, [pc, #288]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a03 	vldr	s12, [r7, #12]
 800713e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715a:	e021      	b.n	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800725c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800716a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716e:	4b37      	ldr	r3, [pc, #220]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800719e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80071a0:	4b2a      	ldr	r3, [pc, #168]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	0a5b      	lsrs	r3, r3, #9
 80071a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80071be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c6:	ee17 2a90 	vmov	r2, s15
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80071ce:	4b1f      	ldr	r3, [pc, #124]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f4:	ee17 2a90 	vmov	r2, s15
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	0e1b      	lsrs	r3, r3, #24
 8007202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007216:	edd7 6a07 	vldr	s13, [r7, #28]
 800721a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007222:	ee17 2a90 	vmov	r2, s15
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800722a:	e008      	b.n	800723e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
}
 800723e:	bf00      	nop
 8007240:	3724      	adds	r7, #36	; 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	58024400 	.word	0x58024400
 8007250:	03d09000 	.word	0x03d09000
 8007254:	46000000 	.word	0x46000000
 8007258:	4c742400 	.word	0x4c742400
 800725c:	4a742400 	.word	0x4a742400
 8007260:	4bbebc20 	.word	0x4bbebc20

08007264 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800726c:	4ba0      	ldr	r3, [pc, #640]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007276:	4b9e      	ldr	r3, [pc, #632]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	091b      	lsrs	r3, r3, #4
 800727c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007280:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007282:	4b9b      	ldr	r3, [pc, #620]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800728c:	4b98      	ldr	r3, [pc, #608]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8111 	beq.w	80074d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	f000 8083 	beq.w	80073be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	f200 80a1 	bhi.w	8007402 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d056      	beq.n	800737a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80072cc:	e099      	b.n	8007402 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ce:	4b88      	ldr	r3, [pc, #544]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d02d      	beq.n	8007336 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072da:	4b85      	ldr	r3, [pc, #532]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	08db      	lsrs	r3, r3, #3
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	4a83      	ldr	r2, [pc, #524]	; (80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80072e6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007304:	4b7a      	ldr	r3, [pc, #488]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007314:	ed97 6a03 	vldr	s12, [r7, #12]
 8007318:	eddf 5a77 	vldr	s11, [pc, #476]	; 80074f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800731c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007330:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007334:	e087      	b.n	8007446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007340:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007348:	4b69      	ldr	r3, [pc, #420]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007358:	ed97 6a03 	vldr	s12, [r7, #12]
 800735c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80074f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007378:	e065      	b.n	8007446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007384:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007500 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738c:	4b58      	ldr	r3, [pc, #352]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739c:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80074f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073bc:	e043      	b.n	8007446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007504 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80073cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d0:	4b47      	ldr	r3, [pc, #284]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80074f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007400:	e021      	b.n	8007446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80074fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007414:	4b36      	ldr	r3, [pc, #216]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007424:	ed97 6a03 	vldr	s12, [r7, #12]
 8007428:	eddf 5a33 	vldr	s11, [pc, #204]	; 80074f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800742c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007444:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007446:	4b2a      	ldr	r3, [pc, #168]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	0a5b      	lsrs	r3, r3, #9
 800744c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800745c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007460:	edd7 6a07 	vldr	s13, [r7, #28]
 8007464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746c:	ee17 2a90 	vmov	r2, s15
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007474:	4b1e      	ldr	r3, [pc, #120]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800748a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749a:	ee17 2a90 	vmov	r2, s15
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80074a2:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ac:	ee07 3a90 	vmov	s15, r3
 80074b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c8:	ee17 2a90 	vmov	r2, s15
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80074d0:	e008      	b.n	80074e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	3724      	adds	r7, #36	; 0x24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	58024400 	.word	0x58024400
 80074f4:	03d09000 	.word	0x03d09000
 80074f8:	46000000 	.word	0x46000000
 80074fc:	4c742400 	.word	0x4c742400
 8007500:	4a742400 	.word	0x4a742400
 8007504:	4bbebc20 	.word	0x4bbebc20

08007508 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007516:	4b53      	ldr	r3, [pc, #332]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b03      	cmp	r3, #3
 8007520:	d101      	bne.n	8007526 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e099      	b.n	800765a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007526:	4b4f      	ldr	r3, [pc, #316]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a4e      	ldr	r2, [pc, #312]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800752c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007532:	f7f9 fbd9 	bl	8000ce8 <HAL_GetTick>
 8007536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007538:	e008      	b.n	800754c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800753a:	f7f9 fbd5 	bl	8000ce8 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e086      	b.n	800765a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800754c:	4b45      	ldr	r3, [pc, #276]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007558:	4b42      	ldr	r3, [pc, #264]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	031b      	lsls	r3, r3, #12
 8007566:	493f      	ldr	r1, [pc, #252]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 8007568:	4313      	orrs	r3, r2
 800756a:	628b      	str	r3, [r1, #40]	; 0x28
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	3b01      	subs	r3, #1
 8007572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	3b01      	subs	r3, #1
 800757c:	025b      	lsls	r3, r3, #9
 800757e:	b29b      	uxth	r3, r3
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	3b01      	subs	r3, #1
 8007596:	061b      	lsls	r3, r3, #24
 8007598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800759c:	4931      	ldr	r1, [pc, #196]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	492d      	ldr	r1, [pc, #180]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075b4:	4b2b      	ldr	r3, [pc, #172]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f023 0220 	bic.w	r2, r3, #32
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	4928      	ldr	r1, [pc, #160]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075c6:	4b27      	ldr	r3, [pc, #156]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a26      	ldr	r2, [pc, #152]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	f023 0310 	bic.w	r3, r3, #16
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <RCCEx_PLL2_Config+0x160>)
 80075d8:	4013      	ands	r3, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	69d2      	ldr	r2, [r2, #28]
 80075de:	00d2      	lsls	r2, r2, #3
 80075e0:	4920      	ldr	r1, [pc, #128]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	f043 0310 	orr.w	r3, r3, #16
 80075f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075f8:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007604:	e00f      	b.n	8007626 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d106      	bne.n	800761a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800760c:	4b15      	ldr	r3, [pc, #84]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	4a14      	ldr	r2, [pc, #80]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007618:	e005      	b.n	8007626 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a11      	ldr	r2, [pc, #68]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 8007620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800762c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007632:	f7f9 fb59 	bl	8000ce8 <HAL_GetTick>
 8007636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007638:	e008      	b.n	800764c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800763a:	f7f9 fb55 	bl	8000ce8 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d901      	bls.n	800764c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e006      	b.n	800765a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <RCCEx_PLL2_Config+0x15c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0f0      	beq.n	800763a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	ffff0007 	.word	0xffff0007

0800766c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800767a:	4b53      	ldr	r3, [pc, #332]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b03      	cmp	r3, #3
 8007684:	d101      	bne.n	800768a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e099      	b.n	80077be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800768a:	4b4f      	ldr	r3, [pc, #316]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a4e      	ldr	r2, [pc, #312]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007696:	f7f9 fb27 	bl	8000ce8 <HAL_GetTick>
 800769a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800769c:	e008      	b.n	80076b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800769e:	f7f9 fb23 	bl	8000ce8 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e086      	b.n	80077be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076b0:	4b45      	ldr	r3, [pc, #276]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f0      	bne.n	800769e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076bc:	4b42      	ldr	r3, [pc, #264]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	051b      	lsls	r3, r3, #20
 80076ca:	493f      	ldr	r1, [pc, #252]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	628b      	str	r3, [r1, #40]	; 0x28
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	3b01      	subs	r3, #1
 80076e0:	025b      	lsls	r3, r3, #9
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	061b      	lsls	r3, r3, #24
 80076fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007700:	4931      	ldr	r1, [pc, #196]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007702:	4313      	orrs	r3, r2
 8007704:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007706:	4b30      	ldr	r3, [pc, #192]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	492d      	ldr	r1, [pc, #180]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007714:	4313      	orrs	r3, r2
 8007716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	4928      	ldr	r1, [pc, #160]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800772a:	4b27      	ldr	r3, [pc, #156]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	4a26      	ldr	r2, [pc, #152]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800773a:	4b24      	ldr	r3, [pc, #144]	; (80077cc <RCCEx_PLL3_Config+0x160>)
 800773c:	4013      	ands	r3, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	69d2      	ldr	r2, [r2, #28]
 8007742:	00d2      	lsls	r2, r2, #3
 8007744:	4920      	ldr	r1, [pc, #128]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007746:	4313      	orrs	r3, r2
 8007748:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800774a:	4b1f      	ldr	r3, [pc, #124]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800775c:	4b1a      	ldr	r3, [pc, #104]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007768:	e00f      	b.n	800778a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d106      	bne.n	800777e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007770:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	4a14      	ldr	r2, [pc, #80]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800777a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800777c:	e005      	b.n	800778a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	4a11      	ldr	r2, [pc, #68]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007788:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a0e      	ldr	r2, [pc, #56]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 8007790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7f9 faa7 	bl	8000ce8 <HAL_GetTick>
 800779a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800779c:	e008      	b.n	80077b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800779e:	f7f9 faa3 	bl	8000ce8 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e006      	b.n	80077be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077b0:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	58024400 	.word	0x58024400
 80077cc:	ffff0007 	.word	0xffff0007

080077d0 <memset>:
 80077d0:	4402      	add	r2, r0
 80077d2:	4603      	mov	r3, r0
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d100      	bne.n	80077da <memset+0xa>
 80077d8:	4770      	bx	lr
 80077da:	f803 1b01 	strb.w	r1, [r3], #1
 80077de:	e7f9      	b.n	80077d4 <memset+0x4>

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	; (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	; (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	; (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	; (8007824 <__libc_init_array+0x44>)
 80077f4:	f000 f826 	bl	8007844 <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	080078c8 	.word	0x080078c8
 800781c:	080078c8 	.word	0x080078c8
 8007820:	080078c8 	.word	0x080078c8
 8007824:	080078cc 	.word	0x080078cc

08007828 <memcpy>:
 8007828:	440a      	add	r2, r1
 800782a:	4291      	cmp	r1, r2
 800782c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007830:	d100      	bne.n	8007834 <memcpy+0xc>
 8007832:	4770      	bx	lr
 8007834:	b510      	push	{r4, lr}
 8007836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800783a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783e:	4291      	cmp	r1, r2
 8007840:	d1f9      	bne.n	8007836 <memcpy+0xe>
 8007842:	bd10      	pop	{r4, pc}

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
