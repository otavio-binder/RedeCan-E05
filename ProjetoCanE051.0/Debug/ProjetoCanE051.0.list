
ProjetoCanE051.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a30c  0800a30c  0001a30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a310  0800a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  24000010  0800a324  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000280  0800a324  00020280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001db4b  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002be3  00000000  00000000  0003dbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001798  00000000  00000000  000407b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001281  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035acc  00000000  00000000  000431c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001bd4d  00000000  00000000  00078c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016b6ac  00000000  00000000  000949e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000068cc  00000000  00000000  00200090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  0020695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a258 	.word	0x0800a258

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800a258 	.word	0x0800a258

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_FDCAN_RxFifo0Callback>:
    // A cada 5 ms, essa função eh chamada
	  HAL_UART_Transmit(&huart1, TxUart, sizeof(TxUart), 1000);
  }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1 , uint32_t RxFifo0ITs){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <HAL_FDCAN_RxFifo0Callback+0x2a>
	    //Flag de interrupt, caso tenha mensagem nova e tenha uma nova msg, entra na condicao
	    // Recebendo a mensagem do FIFO 0
	    if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_FDCAN_RxFifo0Callback+0x34>)
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f003 fc2c 	bl	8003e80 <HAL_FDCAN_GetRxMessage>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_FDCAN_RxFifo0Callback+0x2a>
	      Error_Handler();
 800062e:	f000 fb2b 	bl	8000c88 <Error_Handler>
	    }
	    // Processando a mensagem recebida

	  }
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	24000270 	.word	0x24000270
 8000640:	24000240 	.word	0x24000240

08000644 <Read_ADC_Values>:
//Fim das funcoes baseadas nas interrupcoes

PotReads Read_ADC_Values(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
	PotReads pot;
    // Leitura do Canal 1
	ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2224      	movs	r2, #36	; 0x24
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f009 fdc7 	bl	800a1e4 <memset>
	sConfig.Channel = ADC_CHANNEL_6;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <Read_ADC_Values+0x98>)
 8000658:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000660:	f001 ff9c 	bl	800259c <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000664:	481e      	ldr	r0, [pc, #120]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000666:	f001 fb41 	bl	8001cec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000); //lendo o valor dos potenciometros
 800066a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000670:	f001 fc3a 	bl	8001ee8 <HAL_ADC_PollForConversion>
	pot.PotLog = HAL_ADC_GetValue(&hadc1);
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000676:	f001 fd2b 	bl	80020d0 <HAL_ADC_GetValue>
 800067a:	4603      	mov	r3, r0
 800067c:	b29b      	uxth	r3, r3
 800067e:	857b      	strh	r3, [r7, #42]	; 0x2a
    HAL_ADC_Stop(&hadc1);
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000682:	f001 fbfd 	bl	8001e80 <HAL_ADC_Stop>

    // Leitura do Canal 2
	sConfig.Channel = ADC_CHANNEL_7;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <Read_ADC_Values+0xa0>)
 8000688:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4814      	ldr	r0, [pc, #80]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000690:	f001 ff84 	bl	800259c <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <Read_ADC_Values+0x9c>)
 8000696:	f001 fb29 	bl	8001cec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 800069a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <Read_ADC_Values+0x9c>)
 80006a0:	f001 fc22 	bl	8001ee8 <HAL_ADC_PollForConversion>
    pot.PotLin = HAL_ADC_GetValue(&hadc1); //lendo o valor dos potenciometros
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <Read_ADC_Values+0x9c>)
 80006a6:	f001 fd13 	bl	80020d0 <HAL_ADC_GetValue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	853b      	strh	r3, [r7, #40]	; 0x28
    HAL_ADC_Stop(&hadc1);
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <Read_ADC_Values+0x9c>)
 80006b2:	f001 fbe5 	bl	8001e80 <HAL_ADC_Stop>
    dif = pot.PotLin - pot.PotLog;
 80006b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <Read_ADC_Values+0xa4>)
 80006c0:	801a      	strh	r2, [r3, #0]
    return pot;
 80006c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c6:	2300      	movs	r3, #0
 80006c8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006ca:	f362 030f 	bfi	r3, r2, #0, #16
 80006ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80006d0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3730      	adds	r7, #48	; 0x30
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	19200040 	.word	0x19200040
 80006e0:	2400002c 	.word	0x2400002c
 80006e4:	1d500080 	.word	0x1d500080
 80006e8:	24000278 	.word	0x24000278

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fd61 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f875 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fa6f 	bl	8000bdc <MX_GPIO_Init>
  MX_ADC1_Init();
 80006fe:	f000 f8e5 	bl	80008cc <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000702:	f000 f96d 	bl	80009e0 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000706:	f000 f9cf 	bl	8000aa8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800070a:	f000 fa1b 	bl	8000b44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2); //iniciando o tmr2 para interrupcao do LoRa
 800070e:	482f      	ldr	r0, [pc, #188]	; (80007cc <main+0xe0>)
 8000710:	f008 f81e 	bl	8008750 <HAL_TIM_Base_Start_IT>

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 8000714:	482e      	ldr	r0, [pc, #184]	; (80007d0 <main+0xe4>)
 8000716:	f003 fb2d 	bl	8003d74 <HAL_FDCAN_Start>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <main+0x38>

     	  Error_Handler();
 8000720:	f000 fab2 	bl	8000c88 <Error_Handler>
       }

if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK){
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4829      	ldr	r0, [pc, #164]	; (80007d0 <main+0xe4>)
 800072a:	f003 fd15 	bl	8004158 <HAL_FDCAN_ActivateNotification>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <main+0x4c>
     	  Error_Handler();
 8000734:	f000 faa8 	bl	8000c88 <Error_Handler>

   }

// Configurando os parâmetros da mensagem
 	 TxHeader.Identifier = 0x10; // Identificador da mensagem
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <main+0xe8>)
 800073a:	2210      	movs	r2, #16
 800073c:	601a      	str	r2, [r3, #0]
	 TxHeader.IdType = FDCAN_STANDARD_ID; // Tipo de identificador: Padrão
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <main+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
	 TxHeader.TxFrameType = FDCAN_DATA_FRAME; // Tipo de quadro: Quadro de dados
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <main+0xe8>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
	 TxHeader.DataLength = FDCAN_DLC_BYTES_8; // Comprimento dos dados: 8 bytes
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <main+0xe8>)
 800074c:	2208      	movs	r2, #8
 800074e:	60da      	str	r2, [r3, #12]
	 TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Indicador de estado de erro ativo
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <main+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
	 TxHeader.BitRateSwitch = FDCAN_BRS_OFF; // Troca de taxa de bits desativada
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <main+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
	 TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Formato CAN clasica
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
	 TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; // Sem controle de FIFO de evento de transmissão
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <main+0xe8>)
 8000764:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000768:	61da      	str	r2, [r3, #28]
	 TxHeader.MessageMarker = 0; // Marcador de mensagem
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <main+0xec>)
 8000772:	f001 fabb 	bl	8001cec <HAL_ADC_Start>
	  PotReads pots = Read_ADC_Values();
 8000776:	f7ff ff65 	bl	8000644 <Read_ADC_Values>
 800077a:	4603      	mov	r3, r0
 800077c:	607b      	str	r3, [r7, #4]
		TxData[0] = pots.PotLin & 0xFF;
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <main+0xf0>)
 8000784:	701a      	strb	r2, [r3, #0]
		TxData[1] = (pots.PotLin >>8) & 0xFF;
 8000786:	88bb      	ldrh	r3, [r7, #4]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <main+0xf0>)
 8000790:	705a      	strb	r2, [r3, #1]
		TxData[2] = pots.PotLog & 0xFF;
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <main+0xf0>)
 8000798:	709a      	strb	r2, [r3, #2]
		TxData[3] = (pots.PotLog >>8) & 0xFF;
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <main+0xf0>)
 80007a4:	70da      	strb	r2, [r3, #3]
		TxData[4] = dif & 0xFF;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <main+0xf4>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <main+0xf0>)
 80007ae:	711a      	strb	r2, [r3, #4]
		TxData[5] = (dif >>8) & 0xFF;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <main+0xf4>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <main+0xf0>)
 80007bc:	715a      	strb	r2, [r3, #5]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <main+0xf0>)
 80007c0:	4904      	ldr	r1, [pc, #16]	; (80007d4 <main+0xe8>)
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <main+0xe4>)
 80007c4:	f003 fb01 	bl	8003dca <HAL_FDCAN_AddMessageToTxFifoQ>
  {
 80007c8:	e7d2      	b.n	8000770 <main+0x84>
 80007ca:	bf00      	nop
 80007cc:	2400013c 	.word	0x2400013c
 80007d0:	2400009c 	.word	0x2400009c
 80007d4:	2400021c 	.word	0x2400021c
 80007d8:	2400002c 	.word	0x2400002c
 80007dc:	24000268 	.word	0x24000268
 80007e0:	24000278 	.word	0x24000278

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 fcf6 	bl	800a1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f009 fcf0 	bl	800a1e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f004 fbc5 	bl	8004f94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <SystemClock_Config+0xe4>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <SystemClock_Config+0xe4>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <SystemClock_Config+0xe4>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082a:	bf00      	nop
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <SystemClock_Config+0xe4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000838:	d1f8      	bne.n	800082c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 800083a:	2312      	movs	r3, #18
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083e:	2301      	movs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 800084a:	2310      	movs	r3, #16
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000856:	2304      	movs	r3, #4
 8000858:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800085a:	230c      	movs	r3, #12
 800085c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000862:	230c      	movs	r3, #12
 8000864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086a:	230c      	movs	r3, #12
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800086e:	2300      	movs	r3, #0
 8000870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fbc4 	bl	8005008 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000886:	f000 f9ff 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	233f      	movs	r3, #63	; 0x3f
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV8;
 800089e:	2360      	movs	r3, #96	; 0x60
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 ff84 	bl	80057bc <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008ba:	f000 f9e5 	bl	8000c88 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3770      	adds	r7, #112	; 0x70
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	58024800 	.word	0x58024800

080008cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2224      	movs	r2, #36	; 0x24
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f009 fc7d 	bl	800a1e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_ADC1_Init+0x104>)
 80008ec:	4a39      	ldr	r2, [pc, #228]	; (80009d4 <MX_ADC1_Init+0x108>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_ADC1_Init+0x104>)
 80008f2:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 80008f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_ADC1_Init+0x104>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000900:	2201      	movs	r2, #1
 8000902:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000906:	2204      	movs	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_ADC1_Init+0x104>)
 800090c:	2200      	movs	r2, #0
 800090e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000912:	2201      	movs	r2, #1
 8000914:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000918:	2202      	movs	r2, #2
 800091a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_ADC1_Init+0x104>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_ADC1_Init+0x104>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000940:	2200      	movs	r2, #0
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094c:	4820      	ldr	r0, [pc, #128]	; (80009d0 <MX_ADC1_Init+0x104>)
 800094e:	f000 ffc5 	bl	80018dc <HAL_ADC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 f996 	bl	8000c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	481a      	ldr	r0, [pc, #104]	; (80009d0 <MX_ADC1_Init+0x104>)
 8000968:	f002 fe34 	bl	80035d4 <HAL_ADCEx_MultiModeConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000972:	f000 f989 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_ADC1_Init+0x10c>)
 8000978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097a:	2306      	movs	r3, #6
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097e:	2301      	movs	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000982:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000986:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000988:	2304      	movs	r3, #4
 800098a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_ADC1_Init+0x104>)
 800099c:	f001 fdfe 	bl	800259c <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009a6:	f000 f96f 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_ADC1_Init+0x110>)
 80009ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ae:	230c      	movs	r3, #12
 80009b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_ADC1_Init+0x104>)
 80009b8:	f001 fdf0 	bl	800259c <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80009c2:	f000 f961 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2400002c 	.word	0x2400002c
 80009d4:	40022000 	.word	0x40022000
 80009d8:	19200040 	.word	0x19200040
 80009dc:	1d500080 	.word	0x1d500080

080009e0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 80009e6:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <MX_FDCAN1_Init+0xc4>)
 80009e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 61;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a16:	223d      	movs	r2, #61	; 0x3d
 8000a18:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a28:	220f      	movs	r2, #15
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a34:	220f      	movs	r2, #15
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_FDCAN1_Init+0xc0>)
 8000a8e:	f002 ff93 	bl	80039b8 <HAL_FDCAN_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a98:	f000 f8f6 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2400009c 	.word	0x2400009c
 8000aa4:	4000a000 	.word	0x4000a000

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000ad0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5200;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000ade:	f241 4250 	movw	r2, #5200	; 0x1450
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000af2:	f007 fdd5 	bl	80086a0 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f8c4 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000b0e:	f007 fea5 	bl	800885c <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b18:	f000 f8b6 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_TIM2_Init+0x98>)
 8000b2a:	f008 f8df 	bl	8008cec <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 f8a8 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2400013c 	.word	0x2400013c

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b8e:	f008 f949 	bl	8008e24 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f876 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000ba0:	f009 fa55 	bl	800a04e <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f86d 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f009 fa8a 	bl	800a0ca <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f864 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f009 fa0b 	bl	8009fdc <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f85c 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000188 	.word	0x24000188
 8000bd8:	40011000 	.word	0x40011000

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c78:	bf00      	nop
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	58024400 	.word	0x58024400

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_MspInit+0x30>)
 8000c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca0:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x30>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	58024400 	.word	0x58024400

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ba      	sub	sp, #232	; 0xe8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	22b8      	movs	r2, #184	; 0xb8
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f009 fa7b 	bl	800a1e4 <memset>
  if(hadc->Instance==ADC1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a3f      	ldr	r2, [pc, #252]	; (8000df0 <HAL_ADC_MspInit+0x128>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d176      	bne.n	8000de6 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d18:	23c0      	movs	r3, #192	; 0xc0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f8d0 	bl	8005ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d3a:	f7ff ffa5 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	4a2b      	ldr	r2, [pc, #172]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a24      	ldr	r2, [pc, #144]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d82:	f043 0320 	orr.w	r3, r3, #32
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_ADC_MspInit+0x12c>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <HAL_ADC_MspInit+0x130>)
 8000db2:	f003 ff47 	bl	8004c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <HAL_ADC_MspInit+0x134>)
 8000dd2:	f003 ff37 	bl	8004c44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2012      	movs	r0, #18
 8000ddc:	f002 fdb7 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000de0:	2012      	movs	r0, #18
 8000de2:	f002 fdce 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	37e8      	adds	r7, #232	; 0xe8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020000 	.word	0x58020000
 8000dfc:	58021400 	.word	0x58021400

08000e00 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0b8      	sub	sp, #224	; 0xe0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	22b8      	movs	r2, #184	; 0xb8
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f009 f9df 	bl	800a1e4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <HAL_FDCAN_MspInit+0xd8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d14e      	bne.n	8000ece <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e40:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 f844 	bl	8005ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000e52:	f7ff ff19 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_FDCAN_MspInit+0xdc>)
 8000e58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e5c:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_FDCAN_MspInit+0xdc>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_FDCAN_MspInit+0xdc>)
 8000e68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_FDCAN_MspInit+0xdc>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_FDCAN_MspInit+0xdc>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_FDCAN_MspInit+0xdc>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eac:	2309      	movs	r3, #9
 8000eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <HAL_FDCAN_MspInit+0xe0>)
 8000eba:	f003 fec3 	bl	8004c44 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2013      	movs	r0, #19
 8000ec4:	f002 fd43 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ec8:	2013      	movs	r0, #19
 8000eca:	f002 fd5a 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	37e0      	adds	r7, #224	; 0xe0
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	4000a000 	.word	0x4000a000
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58020000 	.word	0x58020000

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef4:	d10e      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_TIM_Base_MspInit+0x3c>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_Base_MspInit+0x3c>)
 8000f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	58024400 	.word	0x58024400

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0b8      	sub	sp, #224	; 0xe0
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	22b8      	movs	r2, #184	; 0xb8
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f009 f94d 	bl	800a1e4 <memset>
  if(huart->Instance==USART1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_UART_MspInit+0xc8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d146      	bne.n	8000fe2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f54:	f04f 0201 	mov.w	r2, #1
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_CSI;
 8000f60:	2320      	movs	r3, #32
 8000f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 ffb2 	bl	8005ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f76:	f7ff fe87 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_UART_MspInit+0xcc>)
 8000f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_UART_MspInit+0xcc>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0xcc>)
 8000f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_MspInit+0xcc>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0xcc>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_UART_MspInit+0xcc>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000fb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_UART_MspInit+0xd0>)
 8000fde:	f003 fe31 	bl	8004c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	37e0      	adds	r7, #224	; 0xe0
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	58020400 	.word	0x58020400

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f92a 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <ADC_IRQHandler+0x10>)
 8001052:	f001 f84b 	bl	80020ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2400002c 	.word	0x2400002c

08001060 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <FDCAN1_IT0_IRQHandler+0x10>)
 8001066:	f003 f8f1 	bl	800424c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2400009c 	.word	0x2400009c

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <SystemInit+0xd0>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <SystemInit+0xd0>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <SystemInit+0xd4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	2b06      	cmp	r3, #6
 8001092:	d807      	bhi.n	80010a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <SystemInit+0xd4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 030f 	bic.w	r3, r3, #15
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <SystemInit+0xd4>)
 800109e:	f043 0307 	orr.w	r3, r3, #7
 80010a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <SystemInit+0xd8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <SystemInit+0xd8>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <SystemInit+0xd8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <SystemInit+0xd8>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4924      	ldr	r1, [pc, #144]	; (800114c <SystemInit+0xd8>)
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <SystemInit+0xdc>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <SystemInit+0xd4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <SystemInit+0xd4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <SystemInit+0xd4>)
 80010d8:	f043 0307 	orr.w	r3, r3, #7
 80010dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <SystemInit+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <SystemInit+0xd8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <SystemInit+0xd8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <SystemInit+0xd8>)
 80010f2:	4a18      	ldr	r2, [pc, #96]	; (8001154 <SystemInit+0xe0>)
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <SystemInit+0xd8>)
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <SystemInit+0xe4>)
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <SystemInit+0xd8>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <SystemInit+0xe8>)
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <SystemInit+0xd8>)
 8001104:	2200      	movs	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <SystemInit+0xd8>)
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <SystemInit+0xe8>)
 800110c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <SystemInit+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <SystemInit+0xd8>)
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <SystemInit+0xe8>)
 8001118:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <SystemInit+0xd8>)
 800111c:	2200      	movs	r2, #0
 800111e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <SystemInit+0xd8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <SystemInit+0xd8>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <SystemInit+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <SystemInit+0xec>)
 8001134:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001138:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	52002000 	.word	0x52002000
 800114c:	58024400 	.word	0x58024400
 8001150:	eaf6ed7f 	.word	0xeaf6ed7f
 8001154:	02020200 	.word	0x02020200
 8001158:	01ff0000 	.word	0x01ff0000
 800115c:	01010280 	.word	0x01010280
 8001160:	52004000 	.word	0x52004000

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001168:	f7ff ff84 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f009 f82f 	bl	800a1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff faa9 	bl	80006ec <main>
  bx  lr
 800119a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800119c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80011a8:	0800a314 	.word	0x0800a314
  ldr r2, =_sbss
 80011ac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80011b0:	24000280 	.word	0x24000280

080011b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC3_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011be:	2003      	movs	r0, #3
 80011c0:	f002 fbba 	bl	8003938 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011c4:	f004 fcb0 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_Init+0x68>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	4913      	ldr	r1, [pc, #76]	; (8001224 <HAL_Init+0x6c>)
 80011d6:	5ccb      	ldrb	r3, [r1, r3]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_Init+0x68>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_Init+0x6c>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_Init+0x70>)
 80011fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_Init+0x74>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f814 	bl	8001230 <HAL_InitTick>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e002      	b.n	8001218 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001212:	f7ff fd3f 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	58024400 	.word	0x58024400
 8001224:	0800a2bc 	.word	0x0800a2bc
 8001228:	24000004 	.word	0x24000004
 800122c:	24000000 	.word	0x24000000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_InitTick+0x60>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e021      	b.n	8001288 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_InitTick+0x64>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_InitTick+0x60>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fb9f 	bl	800399e <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f002 fb69 	bl	800394e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x68>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2400000c 	.word	0x2400000c
 8001294:	24000000 	.word	0x24000000
 8001298:	24000008 	.word	0x24000008

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2400000c 	.word	0x2400000c
 80012c0:	2400027c 	.word	0x2400027c

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2400027c 	.word	0x2400027c

080012dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	609a      	str	r2, [r3, #8]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <LL_ADC_SetOffset+0x60>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d10b      	bne.n	8001380 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4313      	orrs	r3, r2
 8001376:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800137e:	e00b      	b.n	8001398 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	430b      	orrs	r3, r1
 8001392:	431a      	orrs	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	58026000 	.word	0x58026000

080013a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3360      	adds	r3, #96	; 0x60
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	611a      	str	r2, [r3, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d00e      	beq.n	800143a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3360      	adds	r3, #96	; 0x60
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]
  }
}
 800143a:	bf00      	nop
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	58026000 	.word	0x58026000

0800144c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <LL_ADC_SetOffsetSaturation+0x40>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d10e      	bne.n	800147e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3360      	adds	r3, #96	; 0x60
 8001464:	461a      	mov	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	58026000 	.word	0x58026000

08001490 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <LL_ADC_SetOffsetSign+0x40>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d10e      	bne.n	80014c2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3360      	adds	r3, #96	; 0x60
 80014a8:	461a      	mov	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80014c2:	bf00      	nop
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	58026000 	.word	0x58026000

080014d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3360      	adds	r3, #96	; 0x60
 80014e4:	461a      	mov	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <LL_ADC_SetOffsetState+0x50>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d108      	bne.n	8001508 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	431a      	orrs	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001506:	e007      	b.n	8001518 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	58026000 	.word	0x58026000

08001528 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800154e:	b480      	push	{r7}
 8001550:	b087      	sub	sp, #28
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3330      	adds	r3, #48	; 0x30
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	211f      	movs	r1, #31
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0e9b      	lsrs	r3, r3, #26
 8001586:	f003 011f 	and.w	r1, r3, #31
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3314      	adds	r3, #20
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0e5b      	lsrs	r3, r3, #25
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	0d1b      	lsrs	r3, r3, #20
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2107      	movs	r1, #7
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	0d1b      	lsrs	r3, r3, #20
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d115      	bne.n	8001664 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0318 	and.w	r3, r3, #24
 800164e:	4914      	ldr	r1, [pc, #80]	; (80016a0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001650:	40d9      	lsrs	r1, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	400b      	ands	r3, r1
 8001656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001662:	e014      	b.n	800168e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001670:	43db      	mvns	r3, r3
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0318 	and.w	r3, r3, #24
 800167a:	4909      	ldr	r1, [pc, #36]	; (80016a0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800167c:	40d9      	lsrs	r1, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	400b      	ands	r3, r1
 8001682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001686:	431a      	orrs	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	58026000 	.word	0x58026000
 80016a0:	000fffff 	.word	0x000fffff

080016a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6093      	str	r3, [r2, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	5fffffc0 	.word	0x5fffffc0

08001700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001714:	d101      	bne.n	800171a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <LL_ADC_EnableInternalRegulator+0x24>)
 8001736:	4013      	ands	r3, r2
 8001738:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	6fffffc0 	.word	0x6fffffc0

08001750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001764:	d101      	bne.n	800176a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_ADC_Enable+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	7fffffc0 	.word	0x7fffffc0

080017a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LL_ADC_Disable+0x24>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	f043 0202 	orr.w	r2, r3, #2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	7fffffc0 	.word	0x7fffffc0

080017c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <LL_ADC_IsEnabled+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_IsEnabled+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d101      	bne.n	8001806 <LL_ADC_IsDisableOngoing+0x18>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_ADC_IsDisableOngoing+0x1a>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_ADC_REG_StartConversion+0x24>)
 8001822:	4013      	ands	r3, r2
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	7fffffc0 	.word	0x7fffffc0

0800183c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <LL_ADC_REG_StopConversion+0x24>)
 800184a:	4013      	ands	r3, r2
 800184c:	f043 0210 	orr.w	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	7fffffc0 	.word	0x7fffffc0

08001864 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d101      	bne.n	800187c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <LL_ADC_INJ_StopConversion+0x24>)
 800189a:	4013      	ands	r3, r2
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	7fffffc0 	.word	0x7fffffc0

080018b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d101      	bne.n	80018cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1ee      	b.n	8001cd4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff f9df 	bl	8000cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff feef 	bl	8001700 <LL_ADC_IsDeepPowerDownEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fed5 	bl	80016dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff0a 	bl	8001750 <LL_ADC_IsInternalRegulatorEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d114      	bne.n	800196c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff feee 	bl	8001728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800194c:	4b8e      	ldr	r3, [pc, #568]	; (8001b88 <HAL_ADC_Init+0x2ac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	4a8e      	ldr	r2, [pc, #568]	; (8001b8c <HAL_ADC_Init+0x2b0>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	3301      	adds	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800195e:	e002      	b.n	8001966 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3b01      	subs	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff feed 	bl	8001750 <LL_ADC_IsInternalRegulatorEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff61 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 80019a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 8188 	bne.w	8001cc2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8184 	bne.w	8001cc2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019c2:	f043 0202 	orr.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fefa 	bl	80017c8 <LL_ADC_IsEnabled>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d136      	bne.n	8001a48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6c      	ldr	r2, [pc, #432]	; (8001b90 <HAL_ADC_Init+0x2b4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Init+0x112>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <HAL_ADC_Init+0x2b8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10e      	bne.n	8001a0c <HAL_ADC_Init+0x130>
 80019ee:	4868      	ldr	r0, [pc, #416]	; (8001b90 <HAL_ADC_Init+0x2b4>)
 80019f0:	f7ff feea 	bl	80017c8 <LL_ADC_IsEnabled>
 80019f4:	4604      	mov	r4, r0
 80019f6:	4867      	ldr	r0, [pc, #412]	; (8001b94 <HAL_ADC_Init+0x2b8>)
 80019f8:	f7ff fee6 	bl	80017c8 <LL_ADC_IsEnabled>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4323      	orrs	r3, r4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e008      	b.n	8001a1e <HAL_ADC_Init+0x142>
 8001a0c:	4862      	ldr	r0, [pc, #392]	; (8001b98 <HAL_ADC_Init+0x2bc>)
 8001a0e:	f7ff fedb 	bl	80017c8 <LL_ADC_IsEnabled>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d012      	beq.n	8001a48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5a      	ldr	r2, [pc, #360]	; (8001b90 <HAL_ADC_Init+0x2b4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Init+0x15a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <HAL_ADC_Init+0x2b8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Init+0x15e>
 8001a36:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <HAL_ADC_Init+0x2c0>)
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_Init+0x160>
 8001a3a:	4a59      	ldr	r2, [pc, #356]	; (8001ba0 <HAL_ADC_Init+0x2c4>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff fc4a 	bl	80012dc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_ADC_Init+0x2bc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d129      	bne.n	8001aa6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7e5b      	ldrb	r3, [r3, #25]
 8001a56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a5c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001a62:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d013      	beq.n	8001a94 <HAL_ADC_Init+0x1b8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d00d      	beq.n	8001a90 <HAL_ADC_Init+0x1b4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b1c      	cmp	r3, #28
 8001a7a:	d007      	beq.n	8001a8c <HAL_ADC_Init+0x1b0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b18      	cmp	r3, #24
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_Init+0x1ac>
 8001a84:	2318      	movs	r3, #24
 8001a86:	e006      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e004      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	e002      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a90:	2308      	movs	r3, #8
 8001a92:	e000      	b.n	8001a96 <HAL_ADC_Init+0x1ba>
 8001a94:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001a96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	e00e      	b.n	8001ac4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7e5b      	ldrb	r3, [r3, #25]
 8001aaa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ab6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001abe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	045b      	lsls	r3, r3, #17
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a26      	ldr	r2, [pc, #152]	; (8001b98 <HAL_ADC_Init+0x2bc>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d115      	bne.n	8001b2e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_ADC_Init+0x2c8>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	69b9      	ldr	r1, [r7, #24]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	e009      	b.n	8001b42 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_ADC_Init+0x2cc>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	69b9      	ldr	r1, [r7, #24]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fe8c 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8001b4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff feae 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8001b58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 808e 	bne.w	8001c7e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 808a 	bne.w	8001c7e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_ADC_Init+0x2bc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d11b      	bne.n	8001bac <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e1b      	ldrb	r3, [r3, #24]
 8001b78:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b80:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	e018      	b.n	8001bba <HAL_ADC_Init+0x2de>
 8001b88:	24000000 	.word	0x24000000
 8001b8c:	053e2d63 	.word	0x053e2d63
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40022100 	.word	0x40022100
 8001b98:	58026000 	.word	0x58026000
 8001b9c:	40022300 	.word	0x40022300
 8001ba0:	58026300 	.word	0x58026300
 8001ba4:	fff04007 	.word	0xfff04007
 8001ba8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
 8001bb0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_ADC_Init+0x400>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	69b9      	ldr	r1, [r7, #24]
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d137      	bne.n	8001c48 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a3f      	ldr	r2, [pc, #252]	; (8001ce0 <HAL_ADC_Init+0x404>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d116      	bne.n	8001c16 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_ADC_Init+0x408>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c06:	430a      	orrs	r2, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	e020      	b.n	8001c58 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_ADC_Init+0x40c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0411      	lsls	r1, r2, #16
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	e007      	b.n	8001c58 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <HAL_ADC_Init+0x404>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d002      	beq.n	8001c7e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f001 fb65 	bl	8003348 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10c      	bne.n	8001ca0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	f023 010f 	bic.w	r1, r3, #15
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9e:	e007      	b.n	8001cb0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020f 	bic.w	r2, r2, #15
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	f023 0303 	bic.w	r3, r3, #3
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	661a      	str	r2, [r3, #96]	; 0x60
 8001cc0:	e007      	b.n	8001cd2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f043 0210 	orr.w	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3724      	adds	r7, #36	; 0x24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	ffffbffc 	.word	0xffffbffc
 8001ce0:	58026000 	.word	0x58026000
 8001ce4:	fc00f81f 	.word	0xfc00f81f
 8001ce8:	fc00f81e 	.word	0xfc00f81e

08001cec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5c      	ldr	r2, [pc, #368]	; (8001e6c <HAL_ADC_Start+0x180>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_ADC_Start+0x1c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <HAL_ADC_Start+0x184>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_Start+0x20>
 8001d08:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <HAL_ADC_Start+0x188>)
 8001d0a:	e000      	b.n	8001d0e <HAL_ADC_Start+0x22>
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_ADC_Start+0x18c>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fcc8 	bl	80016a4 <LL_ADC_GetMultimode>
 8001d14:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fda2 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 809a 	bne.w	8001e5c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Start+0x4a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e095      	b.n	8001e62 <HAL_ADC_Start+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f001 fa18 	bl	8003174 <ADC_Enable>
 8001d44:	4603      	mov	r3, r0
 8001d46:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8081 	bne.w	8001e52 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d54:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_ADC_Start+0x190>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a42      	ldr	r2, [pc, #264]	; (8001e70 <HAL_ADC_Start+0x184>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d002      	beq.n	8001d70 <HAL_ADC_Start+0x84>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_Start+0x86>
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_ADC_Start+0x180>)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d002      	beq.n	8001d80 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d98:	d106      	bne.n	8001da8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d9e:	f023 0206 	bic.w	r2, r3, #6
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	665a      	str	r2, [r3, #100]	; 0x64
 8001da6:	e002      	b.n	8001dae <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	221c      	movs	r2, #28
 8001db4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <HAL_ADC_Start+0x184>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d002      	beq.n	8001dce <HAL_ADC_Start+0xe2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADC_Start+0xe4>
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_ADC_Start+0x180>)
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d008      	beq.n	8001dea <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d002      	beq.n	8001dea <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b09      	cmp	r3, #9
 8001de8:	d114      	bne.n	8001e14 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fd01 	bl	8001814 <LL_ADC_REG_StartConversion>
 8001e12:	e025      	b.n	8001e60 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_ADC_Start+0x184>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d002      	beq.n	8001e30 <HAL_ADC_Start+0x144>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Start+0x146>
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_ADC_Start+0x180>)
 8001e32:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00f      	beq.n	8001e60 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	661a      	str	r2, [r3, #96]	; 0x60
 8001e50:	e006      	b.n	8001e60 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001e5a:	e001      	b.n	8001e60 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40022100 	.word	0x40022100
 8001e74:	40022300 	.word	0x40022300
 8001e78:	58026300 	.word	0x58026300
 8001e7c:	fffff0fe 	.word	0xfffff0fe

08001e80 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Stop+0x16>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e021      	b.n	8001eda <HAL_ADC_Stop+0x5a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f001 f8ab 	bl	8002ffc <ADC_ConversionStop>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10f      	bne.n	8001ed0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f001 f9e9 	bl	8003288 <ADC_Disable>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_ADC_Stop+0x64>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	ffffeefe 	.word	0xffffeefe

08001ee8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a72      	ldr	r2, [pc, #456]	; (80020c0 <HAL_ADC_PollForConversion+0x1d8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x1e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a70      	ldr	r2, [pc, #448]	; (80020c4 <HAL_ADC_PollForConversion+0x1dc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x22>
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_ADC_PollForConversion+0x1e0>)
 8001f08:	e000      	b.n	8001f0c <HAL_ADC_PollForConversion+0x24>
 8001f0a:	4b70      	ldr	r3, [pc, #448]	; (80020cc <HAL_ADC_PollForConversion+0x1e4>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fbc9 	bl	80016a4 <LL_ADC_GetMultimode>
 8001f12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d102      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	e037      	b.n	8001f92 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d002      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d111      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	f043 0220 	orr.w	r2, r3, #32
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0b1      	b.n	80020b6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f52:	2304      	movs	r3, #4
 8001f54:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f56:	e01c      	b.n	8001f92 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_ADC_PollForConversion+0x1d8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x84>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <HAL_ADC_PollForConversion+0x1dc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_PollForConversion+0x88>
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_ADC_PollForConversion+0x1e0>)
 8001f6e:	e000      	b.n	8001f72 <HAL_ADC_PollForConversion+0x8a>
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_ADC_PollForConversion+0x1e4>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fba4 	bl	80016c0 <LL_ADC_GetMultiDMATransfer>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e093      	b.n	80020b6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f8e:	2304      	movs	r3, #4
 8001f90:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f92:	f7ff f997 	bl	80012c4 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f98:	e021      	b.n	8001fde <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d01d      	beq.n	8001fde <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fa2:	f7ff f98f 	bl	80012c4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <HAL_ADC_PollForConversion+0xd0>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d112      	bne.n	8001fde <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fca:	f043 0204 	orr.w	r2, r3, #4
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e06b      	b.n	80020b6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0d6      	beq.n	8001f9a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fa93 	bl	8001528 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01c      	beq.n	8002042 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e5b      	ldrb	r3, [r3, #25]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d118      	bne.n	8002042 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b08      	cmp	r3, #8
 800201c:	d111      	bne.n	8002042 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_ADC_PollForConversion+0x1dc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d002      	beq.n	8002052 <HAL_ADC_PollForConversion+0x16a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e000      	b.n	8002054 <HAL_ADC_PollForConversion+0x16c>
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_ADC_PollForConversion+0x1d8>)
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4293      	cmp	r3, r2
 800205a:	d008      	beq.n	800206e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d002      	beq.n	800206e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b09      	cmp	r3, #9
 800206c:	d104      	bne.n	8002078 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	e00c      	b.n	8002092 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_ADC_PollForConversion+0x1dc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d002      	beq.n	8002088 <HAL_ADC_PollForConversion+0x1a0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e000      	b.n	800208a <HAL_ADC_PollForConversion+0x1a2>
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_ADC_PollForConversion+0x1d8>)
 800208a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d104      	bne.n	80020a2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2208      	movs	r2, #8
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e008      	b.n	80020b4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	220c      	movs	r2, #12
 80020b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40022100 	.word	0x40022100
 80020c8:	40022300 	.word	0x40022300
 80020cc:	58026300 	.word	0x58026300

080020d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a87      	ldr	r2, [pc, #540]	; (800232c <HAL_ADC_IRQHandler+0x240>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <HAL_ADC_IRQHandler+0x30>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a86      	ldr	r2, [pc, #536]	; (8002330 <HAL_ADC_IRQHandler+0x244>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_ADC_IRQHandler+0x34>
 800211c:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_ADC_IRQHandler+0x248>)
 800211e:	e000      	b.n	8002122 <HAL_ADC_IRQHandler+0x36>
 8002120:	4b85      	ldr	r3, [pc, #532]	; (8002338 <HAL_ADC_IRQHandler+0x24c>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fabe 	bl	80016a4 <LL_ADC_GetMultimode>
 8002128:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d017      	beq.n	8002164 <HAL_ADC_IRQHandler+0x78>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 fa32 	bl	80035c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_ADC_IRQHandler+0x8c>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8083 	beq.w	800228a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07d      	beq.n	800228a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f9bc 	bl	8001528 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d062      	beq.n	800227c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a5d      	ldr	r2, [pc, #372]	; (8002330 <HAL_ADC_IRQHandler+0x244>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d002      	beq.n	80021c6 <HAL_ADC_IRQHandler+0xda>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_IRQHandler+0xdc>
 80021c6:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_ADC_IRQHandler+0x240>)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d008      	beq.n	80021e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d002      	beq.n	80021e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b09      	cmp	r3, #9
 80021e0:	d104      	bne.n	80021ec <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	623b      	str	r3, [r7, #32]
 80021ea:	e00c      	b.n	8002206 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_ADC_IRQHandler+0x244>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d002      	beq.n	80021fc <HAL_ADC_IRQHandler+0x110>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	e000      	b.n	80021fe <HAL_ADC_IRQHandler+0x112>
 80021fc:	4b4b      	ldr	r3, [pc, #300]	; (800232c <HAL_ADC_IRQHandler+0x240>)
 80021fe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d135      	bne.n	800227c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b08      	cmp	r3, #8
 800221c:	d12e      	bne.n	800227c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fb1e 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11a      	bne.n	8002264 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 020c 	bic.w	r2, r2, #12
 800223c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d112      	bne.n	800227c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	661a      	str	r2, [r3, #96]	; 0x60
 8002262:	e00b      	b.n	800227c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f96f 	bl	8002560 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <HAL_ADC_IRQHandler+0x1b2>
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a0 	beq.w	80023ea <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 809a 	beq.w	80023ea <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f967 	bl	80015a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80022d8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f922 	bl	8001528 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022e4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_ADC_IRQHandler+0x244>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d002      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x20a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e000      	b.n	80022f8 <HAL_ADC_IRQHandler+0x20c>
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_ADC_IRQHandler+0x240>)
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d008      	beq.n	8002312 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d002      	beq.n	8002312 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b07      	cmp	r3, #7
 8002310:	d104      	bne.n	800231c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	e014      	b.n	8002346 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a03      	ldr	r2, [pc, #12]	; (8002330 <HAL_ADC_IRQHandler+0x244>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00a      	beq.n	800233c <HAL_ADC_IRQHandler+0x250>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	e008      	b.n	800233e <HAL_ADC_IRQHandler+0x252>
 800232c:	40022000 	.word	0x40022000
 8002330:	40022100 	.word	0x40022100
 8002334:	40022300 	.word	0x40022300
 8002338:	58026300 	.word	0x58026300
 800233c:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_ADC_IRQHandler+0x464>)
 800233e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d047      	beq.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_ADC_IRQHandler+0x27a>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03f      	beq.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d13a      	bne.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d133      	bne.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12e      	bne.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fa96 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11a      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800239c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d112      	bne.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60
 80023c2:	e00b      	b.n	80023dc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f001 f8c7 	bl	8003570 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2260      	movs	r2, #96	; 0x60
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <HAL_ADC_IRQHandler+0x32c>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8b2 	bl	8002574 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <HAL_ADC_IRQHandler+0x35c>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 f8ad 	bl	8003598 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_ADC_IRQHandler+0x38c>
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f001 f89f 	bl	80035ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d043      	beq.n	800250a <HAL_ADC_IRQHandler+0x41e>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03e      	beq.n	800250a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
 8002498:	e021      	b.n	80024de <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_ADC_IRQHandler+0x464>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x3c8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_ADC_IRQHandler+0x468>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x3cc>
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_ADC_IRQHandler+0x46c>)
 80024b6:	e000      	b.n	80024ba <HAL_ADC_IRQHandler+0x3ce>
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_ADC_IRQHandler+0x470>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f900 	bl	80016c0 <LL_ADC_GetMultiDMATransfer>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80024c6:	2301      	movs	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	e008      	b.n	80024de <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80024da:	2301      	movs	r3, #1
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10e      	bne.n	8002502 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f4:	f043 0202 	orr.w	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f843 	bl	8002588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2210      	movs	r2, #16
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d018      	beq.n	8002546 <HAL_ADC_IRQHandler+0x45a>
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800252e:	f043 0208 	orr.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 f81f 	bl	8003584 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	; 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	40022100 	.word	0x40022100
 8002558:	40022300 	.word	0x40022300
 800255c:	58026300 	.word	0x58026300

08002560 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b0b9      	sub	sp, #228	; 0xe4
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025b6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4aab      	ldr	r2, [pc, #684]	; (800286c <HAL_ADC_ConfigChannel+0x2d0>)
 80025be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x34>
 80025ca:	2302      	movs	r3, #2
 80025cc:	f000 bcfe 	b.w	8002fcc <HAL_ADC_ConfigChannel+0xa30>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f941 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 84e2 	bne.w	8002fae <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db38      	blt.n	8002664 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a9e      	ldr	r2, [pc, #632]	; (8002870 <HAL_ADC_ConfigChannel+0x2d4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d033      	beq.n	8002664 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002604:	2b00      	cmp	r3, #0
 8002606:	d108      	bne.n	800261a <HAL_ADC_ConfigChannel+0x7e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2201      	movs	r2, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	e01d      	b.n	8002656 <HAL_ADC_ConfigChannel+0xba>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800262e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e004      	b.n	800264c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2201      	movs	r2, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	69d1      	ldr	r1, [r2, #28]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	f7fe ff6c 	bl	800154e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f8f2 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8002680:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f913 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 800268e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 8270 	bne.w	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800269c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 826b 	bne.w	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7fe ff8a 	bl	80015cc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6c      	ldr	r2, [pc, #432]	; (8002870 <HAL_ADC_ConfigChannel+0x2d4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10d      	bne.n	80026de <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026dc:	e032      	b.n	8002744 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026de:	4b65      	ldr	r3, [pc, #404]	; (8002874 <HAL_ADC_ConfigChannel+0x2d8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80026e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x168>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	e01d      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1a4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <HAL_ADC_ConfigChannel+0x18e>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	e00a      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1a4>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d048      	beq.n	80027de <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6919      	ldr	r1, [r3, #16]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800275c:	f7fe fdf2 	bl	8001344 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a42      	ldr	r2, [pc, #264]	; (8002870 <HAL_ADC_ConfigChannel+0x2d4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d119      	bne.n	800279e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	461a      	mov	r2, r3
 8002778:	f7fe fe8a 	bl	8001490 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1f8>
 800278e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002792:	e000      	b.n	8002796 <HAL_ADC_ConfigChannel+0x1fa>
 8002794:	2300      	movs	r3, #0
 8002796:	461a      	mov	r2, r3
 8002798:	f7fe fe58 	bl	800144c <LL_ADC_SetOffsetSaturation>
 800279c:	e1ee      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6919      	ldr	r1, [r3, #16]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x21a>
 80027b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x21c>
 80027b6:	2300      	movs	r3, #0
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7fe fe25 	bl	8001408 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	7e1b      	ldrb	r3, [r3, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x238>
 80027ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d2:	e000      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x23a>
 80027d4:	2300      	movs	r3, #0
 80027d6:	461a      	mov	r2, r3
 80027d8:	f7fe fdfc 	bl	80013d4 <LL_ADC_SetDataRightShift>
 80027dc:	e1ce      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_ADC_ConfigChannel+0x2d4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	f040 8181 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fdd9 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x27a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fdce 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	e01e      	b.n	8002854 <HAL_ADC_ConfigChannel+0x2b8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fdc3 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800283c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e004      	b.n	8002852 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x2dc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	e01e      	b.n	80028aa <HAL_ADC_ConfigChannel+0x30e>
 800286c:	47ff0000 	.word	0x47ff0000
 8002870:	58026000 	.word	0x58026000
 8002874:	5c001000 	.word	0x5c001000
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800288c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80028a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fe0c 	bl	80014d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fd70 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x34c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fd65 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	e01e      	b.n	8002926 <HAL_ADC_ConfigChannel+0x38a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fd5a 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800290e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800291a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x3a2>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	e018      	b.n	8002970 <HAL_ADC_ConfigChannel+0x3d4>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800295a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fda9 	bl	80014d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fd0d 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x412>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fd02 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	e01e      	b.n	80029ec <HAL_ADC_ConfigChannel+0x450>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fcf7 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80029cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80029d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80029e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x468>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	e014      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x492>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e004      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	2102      	movs	r1, #2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fd4a 	bl	80014d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2103      	movs	r1, #3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fcae 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x4d0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fca3 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	e017      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x500>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2103      	movs	r1, #3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fc98 	bl	80013a8 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x518>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	e011      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x53c>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d14f      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fcf5 	bl	80014d4 <LL_ADC_SetOffsetState>
 8002aea:	e047      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b32:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b56:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d107      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fe21 	bl	80017c8 <LL_ADC_IsEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 8219 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f7fe fd42 	bl	8001624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4aa1      	ldr	r2, [pc, #644]	; (8002e2c <HAL_ADC_ConfigChannel+0x890>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	f040 812e 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x638>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	bf94      	ite	ls
 8002bcc:	2301      	movls	r3, #1
 8002bce:	2300      	movhi	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e019      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x66c>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2b09      	cmp	r3, #9
 8002c00:	bf94      	ite	ls
 8002c02:	2301      	movls	r3, #1
 8002c04:	2300      	movhi	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d079      	beq.n	8002d00 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x68c>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c26:	e015      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x6b8>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x6d8>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	e017      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x708>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x72e>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	051b      	lsls	r3, r3, #20
 8002cc8:	e018      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x760>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	e07e      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x780>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	3301      	adds	r3, #1
 8002d14:	069b      	lsls	r3, r3, #26
 8002d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1a:	e015      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x7ac>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	069b      	lsls	r3, r3, #26
 8002d44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x7cc>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	e017      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x7fc>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	61bb      	str	r3, [r7, #24]
  return result;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x828>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	3b1e      	subs	r3, #30
 8002dbc:	051b      	lsls	r3, r3, #20
 8002dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	e01b      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x860>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	60fb      	str	r3, [r7, #12]
  return result;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7fe fbe2 	bl	80015cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f280 80d7 	bge.w	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_ADC_ConfigChannel+0x894>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x88a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_ADC_ConfigChannel+0x898>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x8a0>
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_ADC_ConfigChannel+0x89c>)
 8002e28:	e009      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x8a2>
 8002e2a:	bf00      	nop
 8002e2c:	47ff0000 	.word	0x47ff0000
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40022100 	.word	0x40022100
 8002e38:	40022300 	.word	0x40022300
 8002e3c:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fa72 	bl	8001328 <LL_ADC_GetCommonPathInternalCh>
 8002e44:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a62      	ldr	r2, [pc, #392]	; (8002fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x8c0>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <HAL_ADC_ConfigChannel+0xa40>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10e      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x8de>
 8002e5c:	485e      	ldr	r0, [pc, #376]	; (8002fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e5e:	f7fe fcb3 	bl	80017c8 <LL_ADC_IsEnabled>
 8002e62:	4604      	mov	r4, r0
 8002e64:	485d      	ldr	r0, [pc, #372]	; (8002fdc <HAL_ADC_ConfigChannel+0xa40>)
 8002e66:	f7fe fcaf 	bl	80017c8 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4323      	orrs	r3, r4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e008      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x8f0>
 8002e7a:	4859      	ldr	r0, [pc, #356]	; (8002fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8002e7c:	f7fe fca4 	bl	80017c8 <LL_ADC_IsEnabled>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8084 	beq.w	8002f9a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a53      	ldr	r2, [pc, #332]	; (8002fe4 <HAL_ADC_ConfigChannel+0xa48>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d132      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x966>
 8002e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d12c      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	f040 8086 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x92c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_ADC_ConfigChannel+0xa40>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x930>
 8002ec8:	4a47      	ldr	r2, [pc, #284]	; (8002fe8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002eca:	e000      	b.n	8002ece <HAL_ADC_ConfigChannel+0x932>
 8002ecc:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8002ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fe fa12 	bl	8001302 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_ADC_ConfigChannel+0xa50>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	4a42      	ldr	r2, [pc, #264]	; (8002ff0 <HAL_ADC_ConfigChannel+0xa54>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	3301      	adds	r3, #1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ef2:	e002      	b.n	8002efa <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f00:	e05e      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <HAL_ADC_ConfigChannel+0xa58>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d120      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x9b2>
 8002f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11a      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a30      	ldr	r2, [pc, #192]	; (8002fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d14e      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2c      	ldr	r2, [pc, #176]	; (8002fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x99a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <HAL_ADC_ConfigChannel+0xa40>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x99e>
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002f38:	e000      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x9a0>
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8002f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe f9db 	bl	8001302 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f4c:	e038      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <HAL_ADC_ConfigChannel+0xa5c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d133      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
 8002f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d12d      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d128      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_ADC_ConfigChannel+0x9e6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_ADC_ConfigChannel+0xa40>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x9ea>
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002f84:	e000      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x9ec>
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8002f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7fe f9b5 	bl	8001302 <LL_ADC_SetCommonPathInternalCh>
 8002f98:	e012      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002fac:	e008      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002fc8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	37e4      	adds	r7, #228	; 0xe4
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}
 8002fd4:	58026300 	.word	0x58026300
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40022100 	.word	0x40022100
 8002fe0:	58026000 	.word	0x58026000
 8002fe4:	c7520000 	.word	0xc7520000
 8002fe8:	40022300 	.word	0x40022300
 8002fec:	24000000 	.word	0x24000000
 8002ff0:	053e2d63 	.word	0x053e2d63
 8002ff4:	c3210000 	.word	0xc3210000
 8002ff8:	cb840000 	.word	0xcb840000

08002ffc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fc26 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8003018:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fc48 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8003024:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8098 	beq.w	8003164 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02a      	beq.n	8003098 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7e5b      	ldrb	r3, [r3, #25]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d126      	bne.n	8003098 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7e1b      	ldrb	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d122      	bne.n	8003098 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003056:	e014      	b.n	8003082 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4a45      	ldr	r2, [pc, #276]	; (8003170 <ADC_ConversionStop+0x174>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d90d      	bls.n	800307c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	f043 0210 	orr.w	r2, r3, #16
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e074      	b.n	8003166 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d1e3      	bne.n	8003058 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d014      	beq.n	80030c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fbde 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fb9b 	bl	80017ee <LL_ADC_IsDisableOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fbba 	bl	800183c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d014      	beq.n	80030f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fbee 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fb83 	bl	80017ee <LL_ADC_IsDisableOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fbca 	bl	800188c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d005      	beq.n	800310a <ADC_ConversionStop+0x10e>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d105      	bne.n	8003110 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003104:	230c      	movs	r3, #12
 8003106:	617b      	str	r3, [r7, #20]
        break;
 8003108:	e005      	b.n	8003116 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800310a:	2308      	movs	r3, #8
 800310c:	617b      	str	r3, [r7, #20]
        break;
 800310e:	e002      	b.n	8003116 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003110:	2304      	movs	r3, #4
 8003112:	617b      	str	r3, [r7, #20]
        break;
 8003114:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003116:	f7fe f8d5 	bl	80012c4 <HAL_GetTick>
 800311a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800311c:	e01b      	b.n	8003156 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800311e:	f7fe f8d1 	bl	80012c4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b05      	cmp	r3, #5
 800312a:	d914      	bls.n	8003156 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313e:	f043 0210 	orr.w	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e007      	b.n	8003166 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1dc      	bne.n	800311e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	000cdbff 	.word	0x000cdbff

08003174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fb21 	bl	80017c8 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d16e      	bne.n	800326a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <ADC_Enable+0x100>)
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e05a      	b.n	800326c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fadc 	bl	8001778 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031c0:	f7fe f880 	bl	80012c4 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <ADC_Enable+0x104>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <ADC_Enable+0x66>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <ADC_Enable+0x108>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <ADC_Enable+0x6a>
 80031da:	4b29      	ldr	r3, [pc, #164]	; (8003280 <ADC_Enable+0x10c>)
 80031dc:	e000      	b.n	80031e0 <ADC_Enable+0x6c>
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <ADC_Enable+0x110>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fa5f 	bl	80016a4 <LL_ADC_GetMultimode>
 80031e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a23      	ldr	r2, [pc, #140]	; (800327c <ADC_Enable+0x108>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d002      	beq.n	80031f8 <ADC_Enable+0x84>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e000      	b.n	80031fa <ADC_Enable+0x86>
 80031f8:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <ADC_Enable+0x104>)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02c      	beq.n	800325c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d130      	bne.n	800326a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003208:	e028      	b.n	800325c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fada 	bl	80017c8 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe faaa 	bl	8001778 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003224:	f7fe f84e 	bl	80012c4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d914      	bls.n	800325c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d00d      	beq.n	800325c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d1cf      	bne.n	800320a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	8000003f 	.word	0x8000003f
 8003278:	40022000 	.word	0x40022000
 800327c:	40022100 	.word	0x40022100
 8003280:	40022300 	.word	0x40022300
 8003284:	58026300 	.word	0x58026300

08003288 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe faaa 	bl	80017ee <LL_ADC_IsDisableOngoing>
 800329a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fa91 	bl	80017c8 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d047      	beq.n	800333c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d144      	bne.n	800333c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030d 	and.w	r3, r3, #13
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d10c      	bne.n	80032da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe fa6b 	bl	80017a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2203      	movs	r2, #3
 80032d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fff7 	bl	80012c4 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032d8:	e029      	b.n	800332e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	f043 0210 	orr.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e023      	b.n	800333e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032f6:	f7fd ffe5 	bl	80012c4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d914      	bls.n	800332e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e007      	b.n	800333e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1dc      	bne.n	80032f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6c      	ldr	r2, [pc, #432]	; (8003508 <ADC_ConfigureBoostMode+0x1c0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <ADC_ConfigureBoostMode+0x1c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6b      	ldr	r2, [pc, #428]	; (800350c <ADC_ConfigureBoostMode+0x1c4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d109      	bne.n	8003378 <ADC_ConfigureBoostMode+0x30>
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <ADC_ConfigureBoostMode+0x1c8>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e008      	b.n	800338a <ADC_ConfigureBoostMode+0x42>
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <ADC_ConfigureBoostMode+0x1cc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01c      	beq.n	80033c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800338e:	f002 fd45 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8003392:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800339c:	d010      	beq.n	80033c0 <ADC_ConfigureBoostMode+0x78>
 800339e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033a2:	d873      	bhi.n	800348c <ADC_ConfigureBoostMode+0x144>
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d002      	beq.n	80033b0 <ADC_ConfigureBoostMode+0x68>
 80033aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ae:	d16d      	bne.n	800348c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	60fb      	str	r3, [r7, #12]
        break;
 80033be:	e068      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	60fb      	str	r3, [r7, #12]
        break;
 80033c6:	e064      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	f003 ff20 	bl	8007214 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033de:	d051      	beq.n	8003484 <ADC_ConfigureBoostMode+0x13c>
 80033e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033e4:	d854      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 80033e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033ea:	d047      	beq.n	800347c <ADC_ConfigureBoostMode+0x134>
 80033ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033f0:	d84e      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 80033f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033f6:	d03d      	beq.n	8003474 <ADC_ConfigureBoostMode+0x12c>
 80033f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80033fc:	d848      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 80033fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003402:	d033      	beq.n	800346c <ADC_ConfigureBoostMode+0x124>
 8003404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003408:	d842      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 800340a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800340e:	d029      	beq.n	8003464 <ADC_ConfigureBoostMode+0x11c>
 8003410:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003414:	d83c      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 8003416:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800341a:	d01a      	beq.n	8003452 <ADC_ConfigureBoostMode+0x10a>
 800341c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003420:	d836      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 8003422:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003426:	d014      	beq.n	8003452 <ADC_ConfigureBoostMode+0x10a>
 8003428:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800342c:	d830      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003432:	d00e      	beq.n	8003452 <ADC_ConfigureBoostMode+0x10a>
 8003434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003438:	d82a      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 800343a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800343e:	d008      	beq.n	8003452 <ADC_ConfigureBoostMode+0x10a>
 8003440:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003444:	d824      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x148>
 8003446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800344a:	d002      	beq.n	8003452 <ADC_ConfigureBoostMode+0x10a>
 800344c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003450:	d11e      	bne.n	8003490 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0c9b      	lsrs	r3, r3, #18
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	60fb      	str	r3, [r7, #12]
        break;
 8003462:	e016      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
        break;
 800346a:	e012      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	60fb      	str	r3, [r7, #12]
        break;
 8003472:	e00e      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	60fb      	str	r3, [r7, #12]
        break;
 800347a:	e00a      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	09db      	lsrs	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
        break;
 8003482:	e006      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	60fb      	str	r3, [r7, #12]
        break;
 800348a:	e002      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
        break;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003490:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <ADC_ConfigureBoostMode+0x1d0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d808      	bhi.n	80034b2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034b0:	e025      	b.n	80034fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a19      	ldr	r2, [pc, #100]	; (800351c <ADC_ConfigureBoostMode+0x1d4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d80a      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	e016      	b.n	80034fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <ADC_ConfigureBoostMode+0x1d8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d80a      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	e007      	b.n	80034fe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80034fc:	609a      	str	r2, [r3, #8]
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40022000 	.word	0x40022000
 800350c:	40022100 	.word	0x40022100
 8003510:	40022300 	.word	0x40022300
 8003514:	58026300 	.word	0x58026300
 8003518:	005f5e10 	.word	0x005f5e10
 800351c:	00bebc20 	.word	0x00bebc20
 8003520:	017d7840 	.word	0x017d7840

08003524 <LL_ADC_IsEnabled>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <LL_ADC_IsEnabled+0x18>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <LL_ADC_IsEnabled+0x1a>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_REG_IsConversionOngoing>:
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d101      	bne.n	8003562 <LL_ADC_REG_IsConversionOngoing+0x18>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b0a3      	sub	sp, #140	; 0x8c
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0c1      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035fe:	2300      	movs	r3, #0
 8003600:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5e      	ldr	r2, [pc, #376]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800360c:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e001      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0a0      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff87 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 800363c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff80 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 8081 	bne.w	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003652:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d17c      	bne.n	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a48      	ldr	r2, [pc, #288]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800366e:	4b46      	ldr	r3, [pc, #280]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003670:	e000      	b.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003672:	4b46      	ldr	r3, [pc, #280]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003674:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d039      	beq.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800367e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	431a      	orrs	r2, r3
 800368c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800368e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a3a      	ldr	r2, [pc, #232]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a39      	ldr	r2, [pc, #228]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10e      	bne.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80036a4:	4836      	ldr	r0, [pc, #216]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036a6:	f7ff ff3d 	bl	8003524 <LL_ADC_IsEnabled>
 80036aa:	4604      	mov	r4, r0
 80036ac:	4835      	ldr	r0, [pc, #212]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036ae:	f7ff ff39 	bl	8003524 <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4323      	orrs	r3, r4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf0c      	ite	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	2300      	movne	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e008      	b.n	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80036c2:	4833      	ldr	r0, [pc, #204]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80036c4:	f7ff ff2e 	bl	8003524 <LL_ADC_IsEnabled>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d047      	beq.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036de:	4013      	ands	r3, r2
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	6811      	ldr	r1, [r2, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	e03a      	b.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10e      	bne.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003712:	481b      	ldr	r0, [pc, #108]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003714:	f7ff ff06 	bl	8003524 <LL_ADC_IsEnabled>
 8003718:	4604      	mov	r4, r0
 800371a:	481a      	ldr	r0, [pc, #104]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800371c:	f7ff ff02 	bl	8003524 <LL_ADC_IsEnabled>
 8003720:	4603      	mov	r3, r0
 8003722:	4323      	orrs	r3, r4
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e008      	b.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003730:	4817      	ldr	r0, [pc, #92]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003732:	f7ff fef7 	bl	8003524 <LL_ADC_IsEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800374c:	4013      	ands	r3, r2
 800374e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003750:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003752:	e009      	b.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003766:	e000      	b.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003768:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003772:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003776:	4618      	mov	r0, r3
 8003778:	378c      	adds	r7, #140	; 0x8c
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}
 800377e:	bf00      	nop
 8003780:	40022000 	.word	0x40022000
 8003784:	40022100 	.word	0x40022100
 8003788:	40022300 	.word	0x40022300
 800378c:	58026300 	.word	0x58026300
 8003790:	58026000 	.word	0x58026000
 8003794:	fffff0e0 	.word	0xfffff0e0

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <__NVIC_SetPriorityGrouping+0x40>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <__NVIC_SetPriorityGrouping+0x40>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00
 80037dc:	05fa0000 	.word	0x05fa0000

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4907      	ldr	r1, [pc, #28]	; (8003834 <__NVIC_EnableIRQ+0x38>)
 8003816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2001      	movs	r0, #1
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	; (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	; (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003904:	d301      	bcc.n	800390a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003906:	2301      	movs	r3, #1
 8003908:	e00f      	b.n	800392a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <SysTick_Config+0x40>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003912:	210f      	movs	r1, #15
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f7ff ff8e 	bl	8003838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SysTick_Config+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <SysTick_Config+0x40>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff29 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff40 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff90 	bl	800388c <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5f 	bl	8003838 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff33 	bl	80037fc <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffa4 	bl	80038f4 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b098      	sub	sp, #96	; 0x60
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80039c0:	4a84      	ldr	r2, [pc, #528]	; (8003bd4 <HAL_FDCAN_Init+0x21c>)
 80039c2:	f107 030c 	add.w	r3, r7, #12
 80039c6:	4611      	mov	r1, r2
 80039c8:	224c      	movs	r2, #76	; 0x4c
 80039ca:	4618      	mov	r0, r3
 80039cc:	f006 fc36 	bl	800a23c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1c6      	b.n	8003d68 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_FDCAN_Init+0x220>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d106      	bne.n	80039f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd f9fa 	bl	8000e00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0210 	bic.w	r2, r2, #16
 8003a1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1c:	f7fd fc52 	bl	80012c4 <HAL_GetTick>
 8003a20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a22:	e014      	b.n	8003a4e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a24:	f7fd fc4e 	bl	80012c4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b0a      	cmp	r3, #10
 8003a30:	d90d      	bls.n	8003a4e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e18c      	b.n	8003d68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d0e3      	beq.n	8003a24 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a6c:	f7fd fc2a 	bl	80012c4 <HAL_GetTick>
 8003a70:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a72:	e014      	b.n	8003a9e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a74:	f7fd fc26 	bl	80012c4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b0a      	cmp	r3, #10
 8003a80:	d90d      	bls.n	8003a9e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2203      	movs	r2, #3
 8003a96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e164      	b.n	8003d68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0e3      	beq.n	8003a74 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0202 	orr.w	r2, r2, #2
 8003aba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7c1b      	ldrb	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad2:	619a      	str	r2, [r3, #24]
 8003ad4:	e007      	b.n	8003ae6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7c5b      	ldrb	r3, [r3, #17]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afc:	619a      	str	r2, [r3, #24]
 8003afe:	e007      	b.n	8003b10 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7c9b      	ldrb	r3, [r3, #18]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d108      	bne.n	8003b2a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b26:	619a      	str	r2, [r3, #24]
 8003b28:	e007      	b.n	8003b3a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b38:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b5e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0210 	bic.w	r2, r2, #16
 8003b6e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d108      	bne.n	8003b8a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0204 	orr.w	r2, r2, #4
 8003b86:	619a      	str	r2, [r3, #24]
 8003b88:	e030      	b.n	8003bec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02c      	beq.n	8003bec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d020      	beq.n	8003bdc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ba8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0210 	orr.w	r2, r2, #16
 8003bb8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d114      	bne.n	8003bec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0220 	orr.w	r2, r2, #32
 8003bd0:	619a      	str	r2, [r3, #24]
 8003bd2:	e00b      	b.n	8003bec <HAL_FDCAN_Init+0x234>
 8003bd4:	0800a270 	.word	0x0800a270
 8003bd8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bfc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c04:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c20:	d115      	bne.n	8003c4e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c30:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	3b01      	subs	r3, #1
 8003c38:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c3a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	3b01      	subs	r3, #1
 8003c44:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c4a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c4c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	4413      	add	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c82:	f023 0107 	bic.w	r1, r3, #7
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3360      	adds	r3, #96	; 0x60
 8003c8e:	443b      	add	r3, r7
 8003c90:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cae:	f023 0107 	bic.w	r1, r3, #7
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3360      	adds	r3, #96	; 0x60
 8003cba:	443b      	add	r3, r7
 8003cbc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d012      	beq.n	8003cf8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cda:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	3360      	adds	r3, #96	; 0x60
 8003ce6:	443b      	add	r3, r7
 8003ce8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003cec:	011a      	lsls	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d08:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	3360      	adds	r3, #96	; 0x60
 8003d14:	443b      	add	r3, r7
 8003d16:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <HAL_FDCAN_Init+0x3b8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d107      	bne.n	8003d40 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f022 0203 	bic.w	r2, r2, #3
 8003d3e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fd6f 	bl	800483c <FDCAN_CalcultateRamBlockAddresses>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003d64:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3760      	adds	r7, #96	; 0x60
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	4000a000 	.word	0x4000a000

08003d74 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d111      	bne.n	8003dac <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e008      	b.n	8003dbe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db2:	f043 0204 	orr.w	r2, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d141      	bne.n	8003e66 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dea:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e038      	b.n	8003e78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e026      	b.n	8003e78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fe81 	bl	8004b48 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e52:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003e56:	2201      	movs	r2, #1
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e008      	b.n	8003e78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e6c:	f043 0208 	orr.w	r2, r3, #8
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b08b      	sub	sp, #44	; 0x2c
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003e98:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003e9a:	7efb      	ldrb	r3, [r7, #27]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	f040 8149 	bne.w	8004134 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d14c      	bne.n	8003f42 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e13c      	b.n	8004146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e12a      	b.n	8004146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10a      	bne.n	8003f18 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f0a:	0fdb      	lsrs	r3, r3, #31
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	69f9      	ldr	r1, [r7, #28]
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e068      	b.n	8004014 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b41      	cmp	r3, #65	; 0x41
 8003f46:	d14c      	bne.n	8003fe2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0ec      	b.n	8004146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0da      	b.n	8004146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f98:	0e1b      	lsrs	r3, r3, #24
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003faa:	0fdb      	lsrs	r3, r3, #31
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	69f9      	ldr	r1, [r7, #28]
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	e018      	b.n	8004014 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d309      	bcc.n	8004000 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0a2      	b.n	8004146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e005      	b.n	8004044 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	3304      	adds	r3, #4
 8004060:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	0e1b      	lsrs	r3, r3, #24
 8004098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0fda      	lsrs	r2, r3, #31
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	3304      	adds	r3, #4
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	e00a      	b.n	80040d0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	441a      	add	r2, r3
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	440b      	add	r3, r1
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	3301      	adds	r3, #1
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	461a      	mov	r2, r3
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	4293      	cmp	r3, r2
 80040de:	d3ec      	bcc.n	80040ba <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d105      	bne.n	80040f2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80040f0:	e01e      	b.n	8004130 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b41      	cmp	r3, #65	; 0x41
 80040f6:	d105      	bne.n	8004104 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004102:	e015      	b.n	8004130 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b1f      	cmp	r3, #31
 8004108:	d808      	bhi.n	800411c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	fa01 f202 	lsl.w	r2, r1, r2
 8004116:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800411a:	e009      	b.n	8004130 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e008      	b.n	8004146 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	372c      	adds	r7, #44	; 0x2c
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	0800a2cc 	.word	0x0800a2cc

08004158 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800416a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d002      	beq.n	8004178 <HAL_FDCAN_ActivateNotification+0x20>
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d155      	bne.n	8004224 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	65da      	str	r2, [r3, #92]	; 0x5c
 8004196:	e014      	b.n	80041c2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d108      	bne.n	80041ba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0202 	orr.w	r2, r2, #2
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80041b8:	e003      	b.n	80041c2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2203      	movs	r2, #3
 80041c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	430a      	orrs	r2, r1
 80041dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_FDCAN_ActivateNotification+0xec>)
 8004208:	4013      	ands	r3, r2
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	430b      	orrs	r3, r1
 8004210:	6553      	str	r3, [r2, #84]	; 0x54
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0f9b      	lsrs	r3, r3, #30
 800421a:	490b      	ldr	r1, [pc, #44]	; (8004248 <HAL_FDCAN_ActivateNotification+0xf0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e008      	b.n	8004236 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422a:	f043 0202 	orr.w	r2, r3, #2
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	3fcfffff 	.word	0x3fcfffff
 8004248:	4000a800 	.word	0x4000a800

0800424c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b096      	sub	sp, #88	; 0x58
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004254:	4b95      	ldr	r3, [pc, #596]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	079b      	lsls	r3, r3, #30
 800425a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800425c:	4b93      	ldr	r3, [pc, #588]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	079b      	lsls	r3, r3, #30
 8004262:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004264:	4013      	ands	r3, r2
 8004266:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800427c:	4013      	ands	r3, r2
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004294:	4013      	ands	r3, r2
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ac:	4013      	ands	r3, r2
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80042ba:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c4:	4013      	ands	r3, r2
 80042c6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80042d2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042dc:	4013      	ands	r3, r2
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80042f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00f      	beq.n	800431a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fa44 	bl	80047a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01c      	beq.n	800435e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004342:	4013      	ands	r3, r2
 8004344:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800434e:	651a      	str	r2, [r3, #80]	; 0x50
 8004350:	4b56      	ldr	r3, [pc, #344]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f9f9 	bl	8004750 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800435e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800436a:	4b51      	ldr	r3, [pc, #324]	; (80044b0 <HAL_FDCAN_IRQHandler+0x264>)
 800436c:	400b      	ands	r3, r1
 800436e:	6513      	str	r3, [r2, #80]	; 0x50
 8004370:	4a4e      	ldr	r2, [pc, #312]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	0f9b      	lsrs	r3, r3, #30
 8004376:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9b2 	bl	80046e4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800438c:	4b48      	ldr	r3, [pc, #288]	; (80044b0 <HAL_FDCAN_IRQHandler+0x264>)
 800438e:	400b      	ands	r3, r1
 8004390:	6513      	str	r3, [r2, #80]	; 0x50
 8004392:	4a46      	ldr	r2, [pc, #280]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004396:	0f9b      	lsrs	r3, r3, #30
 8004398:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800439a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f9ac 	bl	80046fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80043ae:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <HAL_FDCAN_IRQHandler+0x264>)
 80043b0:	400b      	ands	r3, r1
 80043b2:	6513      	str	r3, [r2, #80]	; 0x50
 80043b4:	4a3d      	ldr	r2, [pc, #244]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	0f9b      	lsrs	r3, r3, #30
 80043ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80043bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc f922 	bl	8000608 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80043c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043d0:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_FDCAN_IRQHandler+0x264>)
 80043d2:	400b      	ands	r3, r1
 80043d4:	6513      	str	r3, [r2, #80]	; 0x50
 80043d6:	4a35      	ldr	r2, [pc, #212]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	0f9b      	lsrs	r3, r3, #30
 80043dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80043de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f995 	bl	8004710 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80043e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004402:	651a      	str	r2, [r3, #80]	; 0x50
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f98b 	bl	8004726 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01c      	beq.n	8004454 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004420:	2b00      	cmp	r3, #0
 8004422:	d017      	beq.n	8004454 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004438:	4013      	ands	r3, r2
 800443a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800444c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f973 	bl	800473a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00f      	beq.n	800447e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004470:	651a      	str	r2, [r3, #80]	; 0x50
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f974 	bl	8004766 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800449a:	651a      	str	r2, [r3, #80]	; 0x50
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_FDCAN_IRQHandler+0x260>)
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f969 	bl	800477a <HAL_FDCAN_TimestampWraparoundCallback>
 80044a8:	e004      	b.n	80044b4 <HAL_FDCAN_IRQHandler+0x268>
 80044aa:	bf00      	nop
 80044ac:	4000a800 	.word	0x4000a800
 80044b0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80044b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00f      	beq.n	80044de <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
 80044d2:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_FDCAN_IRQHandler+0x48c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f958 	bl	800478e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d014      	beq.n	8004512 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00f      	beq.n	8004512 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044fa:	651a      	str	r2, [r3, #80]	; 0x50
 80044fc:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <HAL_FDCAN_IRQHandler+0x48c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004508:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800451e:	4b6f      	ldr	r3, [pc, #444]	; (80046dc <HAL_FDCAN_IRQHandler+0x490>)
 8004520:	400b      	ands	r3, r1
 8004522:	6513      	str	r3, [r2, #80]	; 0x50
 8004524:	4a6c      	ldr	r2, [pc, #432]	; (80046d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004528:	0f9b      	lsrs	r3, r3, #30
 800452a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800452c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f94b 	bl	80047ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_FDCAN_IRQHandler+0x490>)
 8004542:	400b      	ands	r3, r1
 8004544:	6513      	str	r3, [r2, #80]	; 0x50
 8004546:	4a64      	ldr	r2, [pc, #400]	; (80046d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454a:	0f9b      	lsrs	r3, r3, #30
 800454c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5f      	ldr	r2, [pc, #380]	; (80046e0 <HAL_FDCAN_IRQHandler+0x494>)
 8004564:	4293      	cmp	r3, r2
 8004566:	f040 80aa 	bne.w	80046be <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a2 	beq.w	80046be <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800458e:	4013      	ands	r3, r2
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a6:	4013      	ands	r3, r2
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	4013      	ands	r3, r2
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80045cc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	4013      	ands	r3, r2
 80045d8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80045e4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8e4 	bl	80047e0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004624:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8e4 	bl	80047f6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d019      	beq.n	800466c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d014      	beq.n	800466c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	b29b      	uxth	r3, r3
 800464c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	6939      	ldr	r1, [r7, #16]
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8d0 	bl	800480c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004678:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800467a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f8d1 	bl	8004824 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f874 	bl	80047b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80046ce:	bf00      	nop
 80046d0:	3758      	adds	r7, #88	; 0x58
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	4000a800 	.word	0x4000a800
 80046dc:	3fcfffff 	.word	0x3fcfffff
 80046e0:	4000a000 	.word	0x4000a000

080046e4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004852:	4ba7      	ldr	r3, [pc, #668]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004854:	4013      	ands	r3, r2
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	0091      	lsls	r1, r2, #2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	430b      	orrs	r3, r1
 8004860:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	4413      	add	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004892:	4b97      	ldr	r3, [pc, #604]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004894:	4013      	ands	r3, r2
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0091      	lsls	r1, r2, #2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	430b      	orrs	r3, r1
 80048a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	041a      	lsls	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4413      	add	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80048d4:	4b86      	ldr	r3, [pc, #536]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	0091      	lsls	r1, r2, #2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	041a      	lsls	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800491c:	4b74      	ldr	r3, [pc, #464]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	0091      	lsls	r1, r2, #2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004936:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	041a      	lsls	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4413      	add	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004964:	4b62      	ldr	r3, [pc, #392]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004966:	4013      	ands	r3, r2
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	0091      	lsls	r1, r2, #2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	430b      	orrs	r3, r1
 8004972:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4413      	add	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004990:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	0091      	lsls	r1, r2, #2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	430b      	orrs	r3, r1
 800499e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049aa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	041a      	lsls	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4413      	add	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80049d2:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	0091      	lsls	r1, r2, #2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	430b      	orrs	r3, r1
 80049e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80049ec:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	041a      	lsls	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004a08:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	061a      	lsls	r2, r3, #24
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a20:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004a22:	4413      	add	r3, r2
 8004a24:	009a      	lsls	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004a8c:	441a      	add	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d915      	bls.n	8004b18 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004aec:	e006      	b.n	8004afc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004aee:	bf00      	nop
 8004af0:	ffff0003 	.word	0xffff0003
 8004af4:	10002b00 	.word	0x10002b00
 8004af8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e010      	b.n	8004b3a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e005      	b.n	8004b2c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3f3      	bcc.n	8004b20 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop

08004b48 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004b66:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e00a      	b.n	8004b8a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004b7c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004b82:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b88:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004b94:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004b9a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004ba0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e020      	b.n	8004c22 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3303      	adds	r3, #3
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	440b      	add	r3, r1
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004bf8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	440b      	add	r3, r1
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004c06:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004c10:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <FDCAN_CopyMessageToRAM+0xf8>)
 8004c28:	5cd3      	ldrb	r3, [r2, r3]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d3d6      	bcc.n	8004be0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	3724      	adds	r7, #36	; 0x24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	0800a2cc 	.word	0x0800a2cc

08004c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c52:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <HAL_GPIO_Init+0x228>)
 8004c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c56:	e18c      	b.n	8004f72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	4013      	ands	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 817e 	beq.w	8004f6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d005      	beq.n	8004c88 <HAL_GPIO_Init+0x44>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d130      	bne.n	8004cea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	2203      	movs	r2, #3
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0201 	and.w	r2, r3, #1
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d017      	beq.n	8004d26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	2203      	movs	r2, #3
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d123      	bne.n	8004d7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	08da      	lsrs	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3208      	adds	r2, #8
 8004d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	08da      	lsrs	r2, r3, #3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3208      	adds	r2, #8
 8004d74:	69b9      	ldr	r1, [r7, #24]
 8004d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2203      	movs	r2, #3
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0203 	and.w	r2, r3, #3
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80d8 	beq.w	8004f6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbc:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <HAL_GPIO_Init+0x22c>)
 8004dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc2:	4a2b      	ldr	r2, [pc, #172]	; (8004e70 <HAL_GPIO_Init+0x22c>)
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_GPIO_Init+0x22c>)
 8004dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dda:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <HAL_GPIO_Init+0x230>)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	3302      	adds	r3, #2
 8004de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	220f      	movs	r2, #15
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <HAL_GPIO_Init+0x234>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d04a      	beq.n	8004e9c <HAL_GPIO_Init+0x258>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <HAL_GPIO_Init+0x238>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02b      	beq.n	8004e66 <HAL_GPIO_Init+0x222>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_GPIO_Init+0x23c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d025      	beq.n	8004e62 <HAL_GPIO_Init+0x21e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_GPIO_Init+0x240>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <HAL_GPIO_Init+0x21a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <HAL_GPIO_Init+0x244>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x216>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_GPIO_Init+0x248>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x212>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <HAL_GPIO_Init+0x24c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x20e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <HAL_GPIO_Init+0x250>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x20a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <HAL_GPIO_Init+0x254>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x206>
 8004e46:	2309      	movs	r3, #9
 8004e48:	e029      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e4a:	230a      	movs	r3, #10
 8004e4c:	e027      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e4e:	2307      	movs	r3, #7
 8004e50:	e025      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e52:	2306      	movs	r3, #6
 8004e54:	e023      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e56:	2305      	movs	r3, #5
 8004e58:	e021      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	e01f      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e01d      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e01b      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e019      	b.n	8004e9e <HAL_GPIO_Init+0x25a>
 8004e6a:	bf00      	nop
 8004e6c:	58000080 	.word	0x58000080
 8004e70:	58024400 	.word	0x58024400
 8004e74:	58000400 	.word	0x58000400
 8004e78:	58020000 	.word	0x58020000
 8004e7c:	58020400 	.word	0x58020400
 8004e80:	58020800 	.word	0x58020800
 8004e84:	58020c00 	.word	0x58020c00
 8004e88:	58021000 	.word	0x58021000
 8004e8c:	58021400 	.word	0x58021400
 8004e90:	58021800 	.word	0x58021800
 8004e94:	58021c00 	.word	0x58021c00
 8004e98:	58022400 	.word	0x58022400
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	f002 0203 	and.w	r2, r2, #3
 8004ea4:	0092      	lsls	r2, r2, #2
 8004ea6:	4093      	lsls	r3, r2
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eae:	4938      	ldr	r1, [pc, #224]	; (8004f90 <HAL_GPIO_Init+0x34c>)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f47f ae6b 	bne.w	8004c58 <HAL_GPIO_Init+0x14>
  }
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	3724      	adds	r7, #36	; 0x24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	58000400 	.word	0x58000400

08004f94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d00a      	beq.n	8004fbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fa8:	4b16      	ldr	r3, [pc, #88]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d001      	beq.n	8004fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e01f      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e01d      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 0207 	bic.w	r2, r3, #7
 8004fc6:	490f      	ldr	r1, [pc, #60]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fce:	f7fc f979 	bl	80012c4 <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fd4:	e009      	b.n	8004fea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fd6:	f7fc f975 	bl	80012c4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe4:	d901      	bls.n	8004fea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e007      	b.n	8004ffa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_PWREx_ConfigSupply+0x70>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	d1ee      	bne.n	8004fd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	58024800 	.word	0x58024800

08005008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e3c8      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8087 	beq.w	8005136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005028:	4b88      	ldr	r3, [pc, #544]	; (800524c <HAL_RCC_OscConfig+0x244>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005032:	4b86      	ldr	r3, [pc, #536]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	2b10      	cmp	r3, #16
 800503c:	d007      	beq.n	800504e <HAL_RCC_OscConfig+0x46>
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b18      	cmp	r3, #24
 8005042:	d110      	bne.n	8005066 <HAL_RCC_OscConfig+0x5e>
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d10b      	bne.n	8005066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504e:	4b7f      	ldr	r3, [pc, #508]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d06c      	beq.n	8005134 <HAL_RCC_OscConfig+0x12c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d168      	bne.n	8005134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e3a2      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x76>
 8005070:	4b76      	ldr	r3, [pc, #472]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a75      	ldr	r2, [pc, #468]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e02e      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x98>
 8005086:	4b71      	ldr	r3, [pc, #452]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a70      	ldr	r2, [pc, #448]	; (800524c <HAL_RCC_OscConfig+0x244>)
 800508c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b6e      	ldr	r3, [pc, #440]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6d      	ldr	r2, [pc, #436]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e01d      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0xbc>
 80050aa:	4b68      	ldr	r3, [pc, #416]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a67      	ldr	r2, [pc, #412]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b65      	ldr	r3, [pc, #404]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a64      	ldr	r2, [pc, #400]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e00b      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050c4:	4b61      	ldr	r3, [pc, #388]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a60      	ldr	r2, [pc, #384]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b5e      	ldr	r3, [pc, #376]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a5d      	ldr	r2, [pc, #372]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc f8ee 	bl	80012c4 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fc f8ea 	bl	80012c4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e356      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050fe:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0xe4>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fc f8da 	bl	80012c4 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7fc f8d6 	bl	80012c4 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e342      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005126:	4b49      	ldr	r3, [pc, #292]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x10c>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 808c 	beq.w	800525c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005144:	4b41      	ldr	r3, [pc, #260]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800514c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800514e:	4b3f      	ldr	r3, [pc, #252]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_RCC_OscConfig+0x162>
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2b18      	cmp	r3, #24
 800515e:	d137      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1c8>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d132      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516a:	4b38      	ldr	r3, [pc, #224]	; (800524c <HAL_RCC_OscConfig+0x244>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x17a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e314      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005182:	4b32      	ldr	r3, [pc, #200]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 0219 	bic.w	r2, r3, #25
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	492f      	ldr	r1, [pc, #188]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fc f896 	bl	80012c4 <HAL_GetTick>
 8005198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519c:	f7fc f892 	bl	80012c4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e2fe      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ae:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ba:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	4920      	ldr	r1, [pc, #128]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ce:	e045      	b.n	800525c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d026      	beq.n	8005226 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051d8:	4b1c      	ldr	r3, [pc, #112]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 0219 	bic.w	r2, r3, #25
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4919      	ldr	r1, [pc, #100]	; (800524c <HAL_RCC_OscConfig+0x244>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fc f86b 	bl	80012c4 <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fc f867 	bl	80012c4 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e2d3      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	490b      	ldr	r1, [pc, #44]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
 8005224:	e01a      	b.n	800525c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_OscConfig+0x244>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <HAL_RCC_OscConfig+0x244>)
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc f847 	bl	80012c4 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005238:	e00a      	b.n	8005250 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523a:	f7fc f843 	bl	80012c4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d903      	bls.n	8005250 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e2af      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
 800524c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005250:	4b96      	ldr	r3, [pc, #600]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1ee      	bne.n	800523a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	d06a      	beq.n	800533e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005268:	4b90      	ldr	r3, [pc, #576]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005270:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005272:	4b8e      	ldr	r3, [pc, #568]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d007      	beq.n	800528e <HAL_RCC_OscConfig+0x286>
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b18      	cmp	r3, #24
 8005282:	d11b      	bne.n	80052bc <HAL_RCC_OscConfig+0x2b4>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d116      	bne.n	80052bc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800528e:	4b87      	ldr	r3, [pc, #540]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCC_OscConfig+0x29e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e282      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052a6:	4b81      	ldr	r3, [pc, #516]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	061b      	lsls	r3, r3, #24
 80052b4:	497d      	ldr	r1, [pc, #500]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052ba:	e040      	b.n	800533e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052c4:	4b79      	ldr	r3, [pc, #484]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a78      	ldr	r2, [pc, #480]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80052ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fb fff8 	bl	80012c4 <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052d8:	f7fb fff4 	bl	80012c4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e260      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	4969      	ldr	r1, [pc, #420]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	60cb      	str	r3, [r1, #12]
 800530a:	e018      	b.n	800533e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800530c:	4b67      	ldr	r3, [pc, #412]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a66      	ldr	r2, [pc, #408]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fb ffd4 	bl	80012c4 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005320:	f7fb ffd0 	bl	80012c4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e23c      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005332:	4b5e      	ldr	r3, [pc, #376]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d036      	beq.n	80053b8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d019      	beq.n	8005386 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b56      	ldr	r3, [pc, #344]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	4a55      	ldr	r2, [pc, #340]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535e:	f7fb ffb1 	bl	80012c4 <HAL_GetTick>
 8005362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005366:	f7fb ffad 	bl	80012c4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e219      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005378:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 800537a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x35e>
 8005384:	e018      	b.n	80053b8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005386:	4b49      	ldr	r3, [pc, #292]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538a:	4a48      	ldr	r2, [pc, #288]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005392:	f7fb ff97 	bl	80012c4 <HAL_GetTick>
 8005396:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800539a:	f7fb ff93 	bl	80012c4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e1ff      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053ac:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80053ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d036      	beq.n	8005432 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d019      	beq.n	8005400 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053cc:	4b37      	ldr	r3, [pc, #220]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a36      	ldr	r2, [pc, #216]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80053d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053d8:	f7fb ff74 	bl	80012c4 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e0:	f7fb ff70 	bl	80012c4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e1dc      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x3d8>
 80053fe:	e018      	b.n	8005432 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a29      	ldr	r2, [pc, #164]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800540a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800540c:	f7fb ff5a 	bl	80012c4 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005414:	f7fb ff56 	bl	80012c4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e1c2      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8086 	beq.w	800554c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x4a8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <HAL_RCC_OscConfig+0x4a8>)
 8005446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544c:	f7fb ff3a 	bl	80012c4 <HAL_GetTick>
 8005450:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fb ff36 	bl	80012c4 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e1a2      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_RCC_OscConfig+0x4a8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d106      	bne.n	8005488 <HAL_RCC_OscConfig+0x480>
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	4a0b      	ldr	r2, [pc, #44]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6713      	str	r3, [r2, #112]	; 0x70
 8005486:	e032      	b.n	80054ee <HAL_RCC_OscConfig+0x4e6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d111      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4ac>
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	4a05      	ldr	r2, [pc, #20]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6713      	str	r3, [r2, #112]	; 0x70
 800549c:	4b03      	ldr	r3, [pc, #12]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a02      	ldr	r2, [pc, #8]	; (80054ac <HAL_RCC_OscConfig+0x4a4>)
 80054a2:	f023 0304 	bic.w	r3, r3, #4
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e021      	b.n	80054ee <HAL_RCC_OscConfig+0x4e6>
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400
 80054b0:	58024800 	.word	0x58024800
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	d10c      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4ce>
 80054bc:	4b83      	ldr	r3, [pc, #524]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c0:	4a82      	ldr	r2, [pc, #520]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054c2:	f043 0304 	orr.w	r3, r3, #4
 80054c6:	6713      	str	r3, [r2, #112]	; 0x70
 80054c8:	4b80      	ldr	r3, [pc, #512]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	4a7f      	ldr	r2, [pc, #508]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	e00b      	b.n	80054ee <HAL_RCC_OscConfig+0x4e6>
 80054d6:	4b7d      	ldr	r3, [pc, #500]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	4a7c      	ldr	r2, [pc, #496]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	6713      	str	r3, [r2, #112]	; 0x70
 80054e2:	4b7a      	ldr	r3, [pc, #488]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	4a79      	ldr	r2, [pc, #484]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d015      	beq.n	8005522 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fb fee5 	bl	80012c4 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054fc:	e00a      	b.n	8005514 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fb fee1 	bl	80012c4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e14b      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005514:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0ee      	beq.n	80054fe <HAL_RCC_OscConfig+0x4f6>
 8005520:	e014      	b.n	800554c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fb fecf 	bl	80012c4 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005528:	e00a      	b.n	8005540 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552a:	f7fb fecb 	bl	80012c4 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	f241 3288 	movw	r2, #5000	; 0x1388
 8005538:	4293      	cmp	r3, r2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e135      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005540:	4b62      	ldr	r3, [pc, #392]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1ee      	bne.n	800552a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 812a 	beq.w	80057aa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005556:	4b5d      	ldr	r3, [pc, #372]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555e:	2b18      	cmp	r3, #24
 8005560:	f000 80ba 	beq.w	80056d8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b02      	cmp	r3, #2
 800556a:	f040 8095 	bne.w	8005698 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b57      	ldr	r3, [pc, #348]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a56      	ldr	r2, [pc, #344]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fb fea3 	bl	80012c4 <HAL_GetTick>
 800557e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005582:	f7fb fe9f 	bl	80012c4 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e10b      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005594:	4b4d      	ldr	r3, [pc, #308]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a0:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80055a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a4:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <HAL_RCC_OscConfig+0x6c8>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055b0:	0112      	lsls	r2, r2, #4
 80055b2:	430a      	orrs	r2, r1
 80055b4:	4945      	ldr	r1, [pc, #276]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	628b      	str	r3, [r1, #40]	; 0x28
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	3b01      	subs	r3, #1
 80055c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	3b01      	subs	r3, #1
 80055ca:	025b      	lsls	r3, r3, #9
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	3b01      	subs	r3, #1
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	3b01      	subs	r3, #1
 80055e4:	061b      	lsls	r3, r3, #24
 80055e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055ea:	4938      	ldr	r1, [pc, #224]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a35      	ldr	r2, [pc, #212]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055fc:	4b33      	ldr	r3, [pc, #204]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80055fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005600:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <HAL_RCC_OscConfig+0x6cc>)
 8005602:	4013      	ands	r3, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005608:	00d2      	lsls	r2, r2, #3
 800560a:	4930      	ldr	r1, [pc, #192]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800560c:	4313      	orrs	r3, r2
 800560e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005610:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	f023 020c 	bic.w	r2, r3, #12
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	492b      	ldr	r1, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005622:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	f023 0202 	bic.w	r2, r3, #2
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	4927      	ldr	r1, [pc, #156]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005630:	4313      	orrs	r3, r2
 8005632:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005634:	4b25      	ldr	r3, [pc, #148]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4a24      	ldr	r2, [pc, #144]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4b22      	ldr	r3, [pc, #136]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a21      	ldr	r2, [pc, #132]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800564c:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005658:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a18      	ldr	r2, [pc, #96]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800566a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800566e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fb fe28 	bl	80012c4 <HAL_GetTick>
 8005674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005678:	f7fb fe24 	bl	80012c4 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e090      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800568a:	4b10      	ldr	r3, [pc, #64]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x670>
 8005696:	e088      	b.n	80057aa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a0b      	ldr	r2, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 800569e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fb fe0e 	bl	80012c4 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fb fe0a 	bl	80012c4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e076      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056be:	4b03      	ldr	r3, [pc, #12]	; (80056cc <HAL_RCC_OscConfig+0x6c4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x6a4>
 80056ca:	e06e      	b.n	80057aa <HAL_RCC_OscConfig+0x7a2>
 80056cc:	58024400 	.word	0x58024400
 80056d0:	fffffc0c 	.word	0xfffffc0c
 80056d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056d8:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056de:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d031      	beq.n	8005750 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f003 0203 	and.w	r2, r3, #3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d12a      	bne.n	8005750 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d122      	bne.n	8005750 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d11a      	bne.n	8005750 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	0a5b      	lsrs	r3, r3, #9
 800571e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d111      	bne.n	8005750 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d108      	bne.n	8005750 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	0e1b      	lsrs	r3, r3, #24
 8005742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e02b      	b.n	80057ac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005754:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 8005756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005758:	08db      	lsrs	r3, r3, #3
 800575a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d01f      	beq.n	80057aa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800576a:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005776:	f7fb fda5 	bl	80012c4 <HAL_GetTick>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800577c:	bf00      	nop
 800577e:	f7fb fda1 	bl	80012c4 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	4293      	cmp	r3, r2
 8005788:	d0f9      	beq.n	800577e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800578a:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 800578c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <HAL_RCC_OscConfig+0x7b0>)
 8005790:	4013      	ands	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005796:	00d2      	lsls	r2, r2, #3
 8005798:	4906      	ldr	r1, [pc, #24]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 800579a:	4313      	orrs	r3, r2
 800579c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <HAL_RCC_OscConfig+0x7ac>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3730      	adds	r7, #48	; 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	58024400 	.word	0x58024400
 80057b8:	ffff0007 	.word	0xffff0007

080057bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e19c      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b8a      	ldr	r3, [pc, #552]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d910      	bls.n	8005800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b87      	ldr	r3, [pc, #540]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 020f 	bic.w	r2, r3, #15
 80057e6:	4985      	ldr	r1, [pc, #532]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b83      	ldr	r3, [pc, #524]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e184      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d010      	beq.n	800582e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	4b7b      	ldr	r3, [pc, #492]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005818:	429a      	cmp	r2, r3
 800581a:	d908      	bls.n	800582e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800581c:	4b78      	ldr	r3, [pc, #480]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	4975      	ldr	r1, [pc, #468]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800582a:	4313      	orrs	r3, r2
 800582c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d010      	beq.n	800585c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	4b70      	ldr	r3, [pc, #448]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005846:	429a      	cmp	r2, r3
 8005848:	d908      	bls.n	800585c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800584a:	4b6d      	ldr	r3, [pc, #436]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	496a      	ldr	r1, [pc, #424]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 8005858:	4313      	orrs	r3, r2
 800585a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d010      	beq.n	800588a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	4b64      	ldr	r3, [pc, #400]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005874:	429a      	cmp	r2, r3
 8005876:	d908      	bls.n	800588a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	495e      	ldr	r1, [pc, #376]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 8005886:	4313      	orrs	r3, r2
 8005888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d010      	beq.n	80058b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d908      	bls.n	80058b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058a6:	4b56      	ldr	r3, [pc, #344]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	4953      	ldr	r1, [pc, #332]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	4b4d      	ldr	r3, [pc, #308]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d908      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f023 020f 	bic.w	r2, r3, #15
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4947      	ldr	r1, [pc, #284]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d055      	beq.n	800599e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058f2:	4b43      	ldr	r3, [pc, #268]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	4940      	ldr	r1, [pc, #256]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 8005900:	4313      	orrs	r3, r2
 8005902:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d107      	bne.n	800591c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800590c:	4b3c      	ldr	r3, [pc, #240]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d121      	bne.n	800595c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0f6      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d107      	bne.n	8005934 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d115      	bne.n	800595c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0ea      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d107      	bne.n	800594c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800593c:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0de      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800594c:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0d6      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800595c:	4b28      	ldr	r3, [pc, #160]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f023 0207 	bic.w	r2, r3, #7
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4925      	ldr	r1, [pc, #148]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800596a:	4313      	orrs	r3, r2
 800596c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596e:	f7fb fca9 	bl	80012c4 <HAL_GetTick>
 8005972:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005974:	e00a      	b.n	800598c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005976:	f7fb fca5 	bl	80012c4 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0be      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598c:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	429a      	cmp	r2, r3
 800599c:	d1eb      	bne.n	8005976 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d010      	beq.n	80059cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d208      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f023 020f 	bic.w	r2, r3, #15
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	490e      	ldr	r1, [pc, #56]	; (8005a00 <HAL_RCC_ClockConfig+0x244>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d214      	bcs.n	8005a04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b08      	ldr	r3, [pc, #32]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 020f 	bic.w	r2, r3, #15
 80059e2:	4906      	ldr	r1, [pc, #24]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_RCC_ClockConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e086      	b.n	8005b0a <HAL_RCC_ClockConfig+0x34e>
 80059fc:	52002000 	.word	0x52002000
 8005a00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	4b3f      	ldr	r3, [pc, #252]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d208      	bcs.n	8005a32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a20:	4b3c      	ldr	r3, [pc, #240]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	4939      	ldr	r1, [pc, #228]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d208      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	492e      	ldr	r1, [pc, #184]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d208      	bcs.n	8005a8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a7c:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	4922      	ldr	r1, [pc, #136]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d208      	bcs.n	8005abc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005aaa:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	4917      	ldr	r1, [pc, #92]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005abc:	f000 f834 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	4912      	ldr	r1, [pc, #72]	; (8005b18 <HAL_RCC_ClockConfig+0x35c>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ada:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <HAL_RCC_ClockConfig+0x358>)
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <HAL_RCC_ClockConfig+0x35c>)
 8005ae4:	5cd3      	ldrb	r3, [r2, r3]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <HAL_RCC_ClockConfig+0x360>)
 8005af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005af4:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <HAL_RCC_ClockConfig+0x364>)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005afa:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <HAL_RCC_ClockConfig+0x368>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fb fb96 	bl	8001230 <HAL_InitTick>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	58024400 	.word	0x58024400
 8005b18:	0800a2bc 	.word	0x0800a2bc
 8005b1c:	24000004 	.word	0x24000004
 8005b20:	24000000 	.word	0x24000000
 8005b24:	24000008 	.word	0x24000008

08005b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b2e:	4bb3      	ldr	r3, [pc, #716]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b36:	2b18      	cmp	r3, #24
 8005b38:	f200 8155 	bhi.w	8005de6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005ba9 	.word	0x08005ba9
 8005b48:	08005de7 	.word	0x08005de7
 8005b4c:	08005de7 	.word	0x08005de7
 8005b50:	08005de7 	.word	0x08005de7
 8005b54:	08005de7 	.word	0x08005de7
 8005b58:	08005de7 	.word	0x08005de7
 8005b5c:	08005de7 	.word	0x08005de7
 8005b60:	08005de7 	.word	0x08005de7
 8005b64:	08005bcf 	.word	0x08005bcf
 8005b68:	08005de7 	.word	0x08005de7
 8005b6c:	08005de7 	.word	0x08005de7
 8005b70:	08005de7 	.word	0x08005de7
 8005b74:	08005de7 	.word	0x08005de7
 8005b78:	08005de7 	.word	0x08005de7
 8005b7c:	08005de7 	.word	0x08005de7
 8005b80:	08005de7 	.word	0x08005de7
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005de7 	.word	0x08005de7
 8005b8c:	08005de7 	.word	0x08005de7
 8005b90:	08005de7 	.word	0x08005de7
 8005b94:	08005de7 	.word	0x08005de7
 8005b98:	08005de7 	.word	0x08005de7
 8005b9c:	08005de7 	.word	0x08005de7
 8005ba0:	08005de7 	.word	0x08005de7
 8005ba4:	08005bdb 	.word	0x08005bdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba8:	4b94      	ldr	r3, [pc, #592]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bb4:	4b91      	ldr	r3, [pc, #580]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	4a90      	ldr	r2, [pc, #576]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005bc6:	e111      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005bc8:	4b8d      	ldr	r3, [pc, #564]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bca:	61bb      	str	r3, [r7, #24]
      break;
 8005bcc:	e10e      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005bce:	4b8d      	ldr	r3, [pc, #564]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bd0:	61bb      	str	r3, [r7, #24]
      break;
 8005bd2:	e10b      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005bd4:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005bd6:	61bb      	str	r3, [r7, #24]
      break;
 8005bd8:	e108      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bda:	4b88      	ldr	r3, [pc, #544]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005be4:	4b85      	ldr	r3, [pc, #532]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bf0:	4b82      	ldr	r3, [pc, #520]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005bfa:	4b80      	ldr	r3, [pc, #512]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	08db      	lsrs	r3, r3, #3
 8005c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80e1 	beq.w	8005de0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	f000 8083 	beq.w	8005d2c <HAL_RCC_GetSysClockFreq+0x204>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	f200 80a1 	bhi.w	8005d70 <HAL_RCC_GetSysClockFreq+0x248>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x114>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d056      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c3a:	e099      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c3c:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d02d      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c48:	4b6c      	ldr	r3, [pc, #432]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	08db      	lsrs	r3, r3, #3
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	4a6b      	ldr	r2, [pc, #428]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
 8005c58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ca2:	e087      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005e10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb6:	4b51      	ldr	r3, [pc, #324]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ce6:	e065      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005e14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b40      	ldr	r3, [pc, #256]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d2a:	e043      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005e18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d6e:	e021      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005db2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	0a5b      	lsrs	r3, r3, #9
 8005dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd8:	ee17 3a90 	vmov	r3, s15
 8005ddc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005dde:	e005      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
      break;
 8005de4:	e002      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005de8:	61bb      	str	r3, [r7, #24]
      break;
 8005dea:	bf00      	nop
  }

  return sysclockfreq;
 8005dec:	69bb      	ldr	r3, [r7, #24]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3724      	adds	r7, #36	; 0x24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	03d09000 	.word	0x03d09000
 8005e04:	003d0900 	.word	0x003d0900
 8005e08:	017d7840 	.word	0x017d7840
 8005e0c:	46000000 	.word	0x46000000
 8005e10:	4c742400 	.word	0x4c742400
 8005e14:	4a742400 	.word	0x4a742400
 8005e18:	4bbebc20 	.word	0x4bbebc20

08005e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e22:	f7ff fe81 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	490f      	ldr	r1, [pc, #60]	; (8005e70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e34:	5ccb      	ldrb	r3, [r1, r3]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e5a:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	0800a2bc 	.word	0x0800a2bc
 8005e74:	24000004 	.word	0x24000004
 8005e78:	24000000 	.word	0x24000000

08005e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e80:	f7ff ffcc 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	0800a2bc 	.word	0x0800a2bc

08005ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005eac:	f7ff ffb6 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	4904      	ldr	r1, [pc, #16]	; (8005ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	0800a2bc 	.word	0x0800a2bc

08005ed4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed8:	b0c6      	sub	sp, #280	; 0x118
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005ef8:	2500      	movs	r5, #0
 8005efa:	ea54 0305 	orrs.w	r3, r4, r5
 8005efe:	d049      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f0a:	d02f      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f10:	d828      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f16:	d01a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f1c:	d822      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f26:	d007      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f28:	e01c      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2a:	4bab      	ldr	r3, [pc, #684]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	4aaa      	ldr	r2, [pc, #680]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f36:	e01a      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f002 fa49 	bl	80083d8 <RCCEx_PLL2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f4c:	e00f      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	3328      	adds	r3, #40	; 0x28
 8005f54:	2102      	movs	r1, #2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f002 faf0 	bl	800853c <RCCEx_PLL3_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f62:	e004      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f6a:	e000      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f76:	4b98      	ldr	r3, [pc, #608]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f84:	4a94      	ldr	r2, [pc, #592]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f86:	430b      	orrs	r3, r1
 8005f88:	6513      	str	r3, [r2, #80]	; 0x50
 8005f8a:	e003      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005fa0:	f04f 0900 	mov.w	r9, #0
 8005fa4:	ea58 0309 	orrs.w	r3, r8, r9
 8005fa8:	d047      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d82a      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005fd1 	.word	0x08005fd1
 8005fc0:	08005fdf 	.word	0x08005fdf
 8005fc4:	08005ff5 	.word	0x08005ff5
 8005fc8:	08006013 	.word	0x08006013
 8005fcc:	08006013 	.word	0x08006013
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd0:	4b81      	ldr	r3, [pc, #516]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a80      	ldr	r2, [pc, #512]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fdc:	e01a      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 f9f6 	bl	80083d8 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e00f      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff8:	3328      	adds	r3, #40	; 0x28
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f002 fa9d 	bl	800853c <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006008:	e004      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006010:	e000      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800601c:	4b6e      	ldr	r3, [pc, #440]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	f023 0107 	bic.w	r1, r3, #7
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602a:	4a6b      	ldr	r2, [pc, #428]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800602c:	430b      	orrs	r3, r1
 800602e:	6513      	str	r3, [r2, #80]	; 0x50
 8006030:	e003      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006032:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006036:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006046:	f04f 0b00 	mov.w	fp, #0
 800604a:	ea5a 030b 	orrs.w	r3, sl, fp
 800604e:	d05b      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006058:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800605c:	d03b      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800605e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006062:	d834      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006068:	d037      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800606a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606e:	d82e      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006070:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006074:	d033      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006076:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800607a:	d828      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800607c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006080:	d01a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006086:	d822      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800608c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006090:	d007      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006092:	e01c      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006094:	4b50      	ldr	r3, [pc, #320]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a4f      	ldr	r2, [pc, #316]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800609a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060a0:	e01e      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a6:	3308      	adds	r3, #8
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 f994 	bl	80083d8 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060b6:	e013      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060bc:	3328      	adds	r3, #40	; 0x28
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 fa3b 	bl	800853c <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060cc:	e008      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060d4:	e004      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060d6:	bf00      	nop
 80060d8:	e002      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060e8:	4b3b      	ldr	r3, [pc, #236]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060f8:	4a37      	ldr	r2, [pc, #220]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6593      	str	r3, [r2, #88]	; 0x58
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006104:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006114:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800611e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d05d      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006130:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006134:	d03b      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006136:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800613a:	d834      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800613c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006140:	d037      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006146:	d82e      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006148:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800614c:	d033      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800614e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006152:	d828      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006158:	d01a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800615a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800615e:	d822      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006168:	d007      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800616a:	e01c      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006178:	e01e      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617e:	3308      	adds	r3, #8
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f002 f928 	bl	80083d8 <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800618e:	e013      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006194:	3328      	adds	r3, #40	; 0x28
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f002 f9cf 	bl	800853c <RCCEx_PLL3_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a4:	e008      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061ac:	e004      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061ae:	bf00      	nop
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061d0:	4a01      	ldr	r2, [pc, #4]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6593      	str	r3, [r2, #88]	; 0x58
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80061d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80061f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061fa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80061fe:	460b      	mov	r3, r1
 8006200:	4313      	orrs	r3, r2
 8006202:	d03a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d01f      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800620e:	2b30      	cmp	r3, #48	; 0x30
 8006210:	d819      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006212:	2b20      	cmp	r3, #32
 8006214:	d00c      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006216:	2b20      	cmp	r3, #32
 8006218:	d815      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d019      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800621e:	2b10      	cmp	r3, #16
 8006220:	d111      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006222:	4baa      	ldr	r3, [pc, #680]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	4aa9      	ldr	r2, [pc, #676]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800622c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800622e:	e011      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006234:	3308      	adds	r3, #8
 8006236:	2102      	movs	r1, #2
 8006238:	4618      	mov	r0, r3
 800623a:	f002 f8cd 	bl	80083d8 <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800625c:	4b9b      	ldr	r3, [pc, #620]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800625e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006260:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	4a98      	ldr	r2, [pc, #608]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800626c:	430b      	orrs	r3, r1
 800626e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006270:	e003      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006276:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800628a:	2300      	movs	r3, #0
 800628c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006290:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d051      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a4:	d035      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80062a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062aa:	d82e      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062b0:	d031      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80062b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062b6:	d828      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062bc:	d01a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c2:	d822      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062cc:	d007      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80062ce:	e01c      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d0:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a7d      	ldr	r2, [pc, #500]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062dc:	e01c      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	3308      	adds	r3, #8
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 f876 	bl	80083d8 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062f2:	e011      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f8:	3328      	adds	r3, #40	; 0x28
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f002 f91d 	bl	800853c <RCCEx_PLL3_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006310:	e002      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006320:	4b6a      	ldr	r3, [pc, #424]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632e:	4a67      	ldr	r2, [pc, #412]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006330:	430b      	orrs	r3, r1
 8006332:	6513      	str	r3, [r2, #80]	; 0x50
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800633a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800634a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006354:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d053      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006368:	d033      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800636a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800636e:	d82c      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006374:	d02f      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006376:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800637a:	d826      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800637c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006380:	d02b      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006386:	d820      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800638c:	d012      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800638e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006392:	d81a      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d022      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d115      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	3308      	adds	r3, #8
 80063a4:	2101      	movs	r1, #1
 80063a6:	4618      	mov	r0, r3
 80063a8:	f002 f816 	bl	80083d8 <RCCEx_PLL2_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063b2:	e015      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	3328      	adds	r3, #40	; 0x28
 80063ba:	2101      	movs	r1, #1
 80063bc:	4618      	mov	r0, r3
 80063be:	f002 f8bd 	bl	800853c <RCCEx_PLL3_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063c8:	e00a      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063d0:	e006      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063d2:	bf00      	nop
 80063d4:	e004      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063e8:	4b38      	ldr	r3, [pc, #224]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f6:	4a35      	ldr	r2, [pc, #212]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6513      	str	r3, [r2, #80]	; 0x50
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006402:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800641c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d058      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800642e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006432:	d033      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006438:	d82c      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643e:	d02f      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d826      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800644a:	d02b      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800644c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006450:	d820      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006456:	d012      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645c:	d81a      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d022      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006466:	d115      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	3308      	adds	r3, #8
 800646e:	2101      	movs	r1, #1
 8006470:	4618      	mov	r0, r3
 8006472:	f001 ffb1 	bl	80083d8 <RCCEx_PLL2_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800647c:	e015      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	3328      	adds	r3, #40	; 0x28
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f002 f858 	bl	800853c <RCCEx_PLL3_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006492:	e00a      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800649a:	e006      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800649c:	bf00      	nop
 800649e:	e004      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10e      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064c2:	4a02      	ldr	r2, [pc, #8]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6593      	str	r3, [r2, #88]	; 0x58
 80064c8:	e006      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80064ca:	bf00      	nop
 80064cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80064e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80064ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d037      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006502:	d00e      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006508:	d816      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800650e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006512:	d111      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006514:	4bc4      	ldr	r3, [pc, #784]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	4ac3      	ldr	r2, [pc, #780]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800651a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800651e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006520:	e00f      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	3308      	adds	r3, #8
 8006528:	2101      	movs	r1, #1
 800652a:	4618      	mov	r0, r3
 800652c:	f001 ff54 	bl	80083d8 <RCCEx_PLL2_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006536:	e004      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800653e:	e000      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006542:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800654a:	4bb7      	ldr	r3, [pc, #732]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006558:	4ab3      	ldr	r2, [pc, #716]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800655a:	430b      	orrs	r3, r1
 800655c:	6513      	str	r3, [r2, #80]	; 0x50
 800655e:	e003      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006564:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006578:	2300      	movs	r3, #0
 800657a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800657e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d039      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658e:	2b03      	cmp	r3, #3
 8006590:	d81c      	bhi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065d5 	.word	0x080065d5
 800659c:	080065a9 	.word	0x080065a9
 80065a0:	080065b7 	.word	0x080065b7
 80065a4:	080065d5 	.word	0x080065d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a8:	4b9f      	ldr	r3, [pc, #636]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	4a9e      	ldr	r2, [pc, #632]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065b4:	e00f      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ba:	3308      	adds	r3, #8
 80065bc:	2102      	movs	r1, #2
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 ff0a 	bl	80083d8 <RCCEx_PLL2_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065ca:	e004      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80065d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065de:	4b92      	ldr	r3, [pc, #584]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	f023 0103 	bic.w	r1, r3, #3
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ec:	4a8e      	ldr	r2, [pc, #568]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065f2:	e003      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800660c:	2300      	movs	r3, #0
 800660e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006612:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006616:	460b      	mov	r3, r1
 8006618:	4313      	orrs	r3, r2
 800661a:	f000 8099 	beq.w	8006750 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800661e:	4b83      	ldr	r3, [pc, #524]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a82      	ldr	r2, [pc, #520]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800662a:	f7fa fe4b 	bl	80012c4 <HAL_GetTick>
 800662e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006632:	e00b      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006634:	f7fa fe46 	bl	80012c4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b64      	cmp	r3, #100	; 0x64
 8006642:	d903      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800664a:	e005      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800664c:	4b77      	ldr	r3, [pc, #476]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0ed      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006658:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800665c:	2b00      	cmp	r3, #0
 800665e:	d173      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006660:	4b71      	ldr	r3, [pc, #452]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800666c:	4053      	eors	r3, r2
 800666e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006672:	2b00      	cmp	r3, #0
 8006674:	d015      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006676:	4b6c      	ldr	r3, [pc, #432]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006682:	4b69      	ldr	r3, [pc, #420]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	4a68      	ldr	r2, [pc, #416]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800668e:	4b66      	ldr	r3, [pc, #408]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	4a65      	ldr	r2, [pc, #404]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006698:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800669a:	4a63      	ldr	r2, [pc, #396]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800669c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ae:	d118      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b0:	f7fa fe08 	bl	80012c4 <HAL_GetTick>
 80066b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066b8:	e00d      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fa fe03 	bl	80012c4 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066c4:	1ad2      	subs	r2, r2, r3
 80066c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d903      	bls.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80066d4:	e005      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d6:	4b54      	ldr	r3, [pc, #336]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0eb      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80066e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d129      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066fa:	d10e      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80066fc:	4b4a      	ldr	r3, [pc, #296]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800670c:	091a      	lsrs	r2, r3, #4
 800670e:	4b48      	ldr	r3, [pc, #288]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006710:	4013      	ands	r3, r2
 8006712:	4a45      	ldr	r2, [pc, #276]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006714:	430b      	orrs	r3, r1
 8006716:	6113      	str	r3, [r2, #16]
 8006718:	e005      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800671a:	4b43      	ldr	r3, [pc, #268]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	4a42      	ldr	r2, [pc, #264]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006720:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006724:	6113      	str	r3, [r2, #16]
 8006726:	4b40      	ldr	r3, [pc, #256]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006728:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006736:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006738:	430b      	orrs	r3, r1
 800673a:	6713      	str	r3, [r2, #112]	; 0x70
 800673c:	e008      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800673e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006742:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006746:	e003      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800674c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f002 0301 	and.w	r3, r2, #1
 800675c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006766:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	f000 808f 	beq.w	8006890 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006778:	2b28      	cmp	r3, #40	; 0x28
 800677a:	d871      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	08006869 	.word	0x08006869
 8006788:	08006861 	.word	0x08006861
 800678c:	08006861 	.word	0x08006861
 8006790:	08006861 	.word	0x08006861
 8006794:	08006861 	.word	0x08006861
 8006798:	08006861 	.word	0x08006861
 800679c:	08006861 	.word	0x08006861
 80067a0:	08006861 	.word	0x08006861
 80067a4:	08006835 	.word	0x08006835
 80067a8:	08006861 	.word	0x08006861
 80067ac:	08006861 	.word	0x08006861
 80067b0:	08006861 	.word	0x08006861
 80067b4:	08006861 	.word	0x08006861
 80067b8:	08006861 	.word	0x08006861
 80067bc:	08006861 	.word	0x08006861
 80067c0:	08006861 	.word	0x08006861
 80067c4:	0800684b 	.word	0x0800684b
 80067c8:	08006861 	.word	0x08006861
 80067cc:	08006861 	.word	0x08006861
 80067d0:	08006861 	.word	0x08006861
 80067d4:	08006861 	.word	0x08006861
 80067d8:	08006861 	.word	0x08006861
 80067dc:	08006861 	.word	0x08006861
 80067e0:	08006861 	.word	0x08006861
 80067e4:	08006869 	.word	0x08006869
 80067e8:	08006861 	.word	0x08006861
 80067ec:	08006861 	.word	0x08006861
 80067f0:	08006861 	.word	0x08006861
 80067f4:	08006861 	.word	0x08006861
 80067f8:	08006861 	.word	0x08006861
 80067fc:	08006861 	.word	0x08006861
 8006800:	08006861 	.word	0x08006861
 8006804:	08006869 	.word	0x08006869
 8006808:	08006861 	.word	0x08006861
 800680c:	08006861 	.word	0x08006861
 8006810:	08006861 	.word	0x08006861
 8006814:	08006861 	.word	0x08006861
 8006818:	08006861 	.word	0x08006861
 800681c:	08006861 	.word	0x08006861
 8006820:	08006861 	.word	0x08006861
 8006824:	08006869 	.word	0x08006869
 8006828:	58024400 	.word	0x58024400
 800682c:	58024800 	.word	0x58024800
 8006830:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006838:	3308      	adds	r3, #8
 800683a:	2101      	movs	r1, #1
 800683c:	4618      	mov	r0, r3
 800683e:	f001 fdcb 	bl	80083d8 <RCCEx_PLL2_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006848:	e00f      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684e:	3328      	adds	r3, #40	; 0x28
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fe72 	bl	800853c <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006872:	4bbf      	ldr	r3, [pc, #764]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006880:	4abb      	ldr	r2, [pc, #748]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6553      	str	r3, [r2, #84]	; 0x54
 8006886:	e003      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800688c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f002 0302 	and.w	r3, r2, #2
 800689c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a0:	2300      	movs	r3, #0
 80068a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d041      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b6:	2b05      	cmp	r3, #5
 80068b8:	d824      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80068ba:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	080068d9 	.word	0x080068d9
 80068c8:	080068ef 	.word	0x080068ef
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	0800690d 	.word	0x0800690d
 80068d4:	0800690d 	.word	0x0800690d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068dc:	3308      	adds	r3, #8
 80068de:	2101      	movs	r1, #1
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fd79 	bl	80083d8 <RCCEx_PLL2_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068ec:	e00f      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f2:	3328      	adds	r3, #40	; 0x28
 80068f4:	2101      	movs	r1, #1
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 fe20 	bl	800853c <RCCEx_PLL3_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006902:	e004      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800690a:	e000      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800690c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006916:	4b96      	ldr	r3, [pc, #600]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691a:	f023 0107 	bic.w	r1, r3, #7
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006924:	4a92      	ldr	r2, [pc, #584]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006926:	430b      	orrs	r3, r1
 8006928:	6553      	str	r3, [r2, #84]	; 0x54
 800692a:	e003      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f002 0304 	and.w	r3, r2, #4
 8006940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800694a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d044      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695c:	2b05      	cmp	r3, #5
 800695e:	d825      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	080069b5 	.word	0x080069b5
 800696c:	08006981 	.word	0x08006981
 8006970:	08006997 	.word	0x08006997
 8006974:	080069b5 	.word	0x080069b5
 8006978:	080069b5 	.word	0x080069b5
 800697c:	080069b5 	.word	0x080069b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006984:	3308      	adds	r3, #8
 8006986:	2101      	movs	r1, #1
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fd25 	bl	80083d8 <RCCEx_PLL2_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006994:	e00f      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699a:	3328      	adds	r3, #40	; 0x28
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 fdcc 	bl	800853c <RCCEx_PLL3_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069aa:	e004      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80069b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069be:	4b6c      	ldr	r3, [pc, #432]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	f023 0107 	bic.w	r1, r3, #7
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	4a68      	ldr	r2, [pc, #416]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6593      	str	r3, [r2, #88]	; 0x58
 80069d4:	e003      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f002 0320 	and.w	r3, r2, #32
 80069ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4313      	orrs	r3, r2
 80069fc:	d055      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a0a:	d033      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a10:	d82c      	bhi.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a16:	d02f      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d826      	bhi.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a22:	d02b      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a28:	d820      	bhi.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2e:	d012      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a34:	d81a      	bhi.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d022      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3e:	d115      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a44:	3308      	adds	r3, #8
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fcc5 	bl	80083d8 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a54:	e015      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	3328      	adds	r3, #40	; 0x28
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 fd6c 	bl	800853c <RCCEx_PLL3_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a6a:	e00a      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a72:	e006      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a74:	bf00      	nop
 8006a76:	e004      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a78:	bf00      	nop
 8006a7a:	e002      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a8a:	4b39      	ldr	r3, [pc, #228]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9a:	4a35      	ldr	r2, [pc, #212]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6553      	str	r3, [r2, #84]	; 0x54
 8006aa0:	e003      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006ab6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ac0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d058      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ad2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ad6:	d033      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006ad8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006adc:	d82c      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae2:	d02f      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae8:	d826      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006aea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aee:	d02b      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006af4:	d820      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afa:	d012      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b00:	d81a      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d022      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0a:	d115      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	3308      	adds	r3, #8
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fc5f 	bl	80083d8 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b20:	e015      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	3328      	adds	r3, #40	; 0x28
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fd06 	bl	800853c <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b36:	e00a      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b3e:	e006      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b40:	bf00      	nop
 8006b42:	e004      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b44:	bf00      	nop
 8006b46:	e002      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10e      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b66:	4a02      	ldr	r2, [pc, #8]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b6c:	e006      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006b6e:	bf00      	nop
 8006b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006b96:	460b      	mov	r3, r1
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	d055      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ba4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ba8:	d033      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006baa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bae:	d82c      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb4:	d02f      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	d826      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bc0:	d02b      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006bc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bc6:	d820      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bcc:	d012      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd2:	d81a      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d022      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bdc:	d115      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be2:	3308      	adds	r3, #8
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fbf6 	bl	80083d8 <RCCEx_PLL2_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006bf2:	e015      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	3328      	adds	r3, #40	; 0x28
 8006bfa:	2102      	movs	r1, #2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 fc9d 	bl	800853c <RCCEx_PLL3_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c08:	e00a      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c10:	e006      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c12:	bf00      	nop
 8006c14:	e004      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c16:	bf00      	nop
 8006c18:	e002      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c1a:	bf00      	nop
 8006c1c:	e000      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c28:	4ba0      	ldr	r3, [pc, #640]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c38:	4a9c      	ldr	r2, [pc, #624]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f002 0308 	and.w	r3, r2, #8
 8006c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d01e      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7a:	3328      	adds	r3, #40	; 0x28
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 fc5c 	bl	800853c <RCCEx_PLL3_Config>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c90:	4b86      	ldr	r3, [pc, #536]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	4a82      	ldr	r2, [pc, #520]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f002 0310 	and.w	r3, r2, #16
 8006cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cbc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	d01e      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd2:	d10c      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	3328      	adds	r3, #40	; 0x28
 8006cda:	2102      	movs	r1, #2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fc2d 	bl	800853c <RCCEx_PLL3_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cee:	4b6f      	ldr	r3, [pc, #444]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cfe:	4a6b      	ldr	r2, [pc, #428]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d12:	2300      	movs	r3, #0
 8006d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d16:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	d03e      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d2c:	d022      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d32:	d81b      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3c:	d00b      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006d3e:	e015      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	3308      	adds	r3, #8
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 fb45 	bl	80083d8 <RCCEx_PLL2_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d54:	e00f      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5a:	3328      	adds	r3, #40	; 0x28
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 fbec 	bl	800853c <RCCEx_PLL3_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d6a:	e004      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d72:	e000      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10b      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d7e:	4b4b      	ldr	r3, [pc, #300]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d8e:	4a47      	ldr	r2, [pc, #284]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d90:	430b      	orrs	r3, r1
 8006d92:	6593      	str	r3, [r2, #88]	; 0x58
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006daa:	673b      	str	r3, [r7, #112]	; 0x70
 8006dac:	2300      	movs	r3, #0
 8006dae:	677b      	str	r3, [r7, #116]	; 0x74
 8006db0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006db4:	460b      	mov	r3, r1
 8006db6:	4313      	orrs	r3, r2
 8006db8:	d03b      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dc6:	d01f      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dcc:	d818      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dd8:	d007      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006dda:	e011      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ddc:	4b33      	ldr	r3, [pc, #204]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	4a32      	ldr	r2, [pc, #200]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006de8:	e00f      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dee:	3328      	adds	r3, #40	; 0x28
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fba2 	bl	800853c <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006dfe:	e004      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e06:	e000      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e22:	4a22      	ldr	r2, [pc, #136]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6553      	str	r3, [r2, #84]	; 0x54
 8006e28:	e003      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e40:	2300      	movs	r3, #0
 8006e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	d034      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5c:	d007      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006e5e:	e011      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e6c:	e00e      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	3308      	adds	r3, #8
 8006e74:	2102      	movs	r1, #2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 faae 	bl	80083d8 <RCCEx_PLL2_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e82:	e003      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10d      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea2:	4a02      	ldr	r2, [pc, #8]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ea8:	e006      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006eaa:	bf00      	nop
 8006eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006eb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8006eca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d00c      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed8:	3328      	adds	r3, #40	; 0x28
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 fb2d 	bl	800853c <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006efc:	2300      	movs	r3, #0
 8006efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f00:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006f04:	460b      	mov	r3, r1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	d036      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f14:	d018      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f1a:	d811      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f20:	d014      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f26:	d80b      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d011      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f30:	d106      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f32:	4bb7      	ldr	r3, [pc, #732]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	4ab6      	ldr	r2, [pc, #728]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f3e:	e008      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f48:	bf00      	nop
 8006f4a:	e002      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f5a:	4bad      	ldr	r3, [pc, #692]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f68:	4aa9      	ldr	r2, [pc, #676]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6553      	str	r3, [r2, #84]	; 0x54
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006f84:	653b      	str	r3, [r7, #80]	; 0x50
 8006f86:	2300      	movs	r3, #0
 8006f88:	657b      	str	r3, [r7, #84]	; 0x54
 8006f8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f94:	4b9e      	ldr	r3, [pc, #632]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a9b      	ldr	r2, [pc, #620]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fc4:	4b92      	ldr	r3, [pc, #584]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd2:	4a8f      	ldr	r2, [pc, #572]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ff4:	4b86      	ldr	r3, [pc, #536]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4a85      	ldr	r2, [pc, #532]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ffa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ffe:	6113      	str	r3, [r2, #16]
 8007000:	4b83      	ldr	r3, [pc, #524]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007002:	6919      	ldr	r1, [r3, #16]
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800700c:	4a80      	ldr	r2, [pc, #512]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800700e:	430b      	orrs	r3, r1
 8007010:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800701e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007020:	2300      	movs	r3, #0
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007024:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007028:	460b      	mov	r3, r1
 800702a:	4313      	orrs	r3, r2
 800702c:	d009      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800702e:	4b78      	ldr	r3, [pc, #480]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007032:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	4a74      	ldr	r2, [pc, #464]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800703e:	430b      	orrs	r3, r1
 8007040:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800704e:	633b      	str	r3, [r7, #48]	; 0x30
 8007050:	2300      	movs	r3, #0
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
 8007054:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007058:	460b      	mov	r3, r1
 800705a:	4313      	orrs	r3, r2
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800705e:	4b6c      	ldr	r3, [pc, #432]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706e:	4a68      	ldr	r2, [pc, #416]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007070:	430b      	orrs	r3, r1
 8007072:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	2100      	movs	r1, #0
 800707e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007086:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800708a:	460b      	mov	r3, r1
 800708c:	4313      	orrs	r3, r2
 800708e:	d011      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007094:	3308      	adds	r3, #8
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f001 f99d 	bl	80083d8 <RCCEx_PLL2_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80070a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	2100      	movs	r1, #0
 80070be:	6239      	str	r1, [r7, #32]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
 80070c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070ca:	460b      	mov	r3, r1
 80070cc:	4313      	orrs	r3, r2
 80070ce:	d011      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	3308      	adds	r3, #8
 80070d6:	2101      	movs	r1, #1
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 f97d 	bl	80083d8 <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80070e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	2100      	movs	r1, #0
 80070fe:	61b9      	str	r1, [r7, #24]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d011      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	3308      	adds	r3, #8
 8007116:	2102      	movs	r1, #2
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f95d 	bl	80083d8 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007124:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007130:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	2100      	movs	r1, #0
 800713e:	6139      	str	r1, [r7, #16]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	d011      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007154:	3328      	adds	r3, #40	; 0x28
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f001 f9ef 	bl	800853c <RCCEx_PLL3_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007164:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007170:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	2100      	movs	r1, #0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d011      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	3328      	adds	r3, #40	; 0x28
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f001 f9cf 	bl	800853c <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80071a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	2100      	movs	r1, #0
 80071be:	6039      	str	r1, [r7, #0]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80071ca:	460b      	mov	r3, r1
 80071cc:	4313      	orrs	r3, r2
 80071ce:	d011      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d4:	3328      	adds	r3, #40	; 0x28
 80071d6:	2102      	movs	r1, #2
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 f9af 	bl	800853c <RCCEx_PLL3_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80071e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80071f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e000      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
}
 8007202:	4618      	mov	r0, r3
 8007204:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007208:	46bd      	mov	sp, r7
 800720a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400

08007214 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b090      	sub	sp, #64	; 0x40
 8007218:	af00      	add	r7, sp, #0
 800721a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800721e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007222:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007226:	430b      	orrs	r3, r1
 8007228:	f040 8094 	bne.w	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800722c:	4b9b      	ldr	r3, [pc, #620]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b04      	cmp	r3, #4
 800723a:	f200 8087 	bhi.w	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007259 	.word	0x08007259
 8007248:	08007281 	.word	0x08007281
 800724c:	080072a9 	.word	0x080072a9
 8007250:	08007345 	.word	0x08007345
 8007254:	080072d1 	.word	0x080072d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007258:	4b90      	ldr	r3, [pc, #576]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007260:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007264:	d108      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ff62 	bl	8008134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007274:	f000 bc93 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800727c:	f000 bc8f 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007280:	4b86      	ldr	r3, [pc, #536]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800728c:	d108      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728e:	f107 0318 	add.w	r3, r7, #24
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fca6 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800729c:	f000 bc7f 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a4:	f000 bc7b 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072a8:	4b7c      	ldr	r3, [pc, #496]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b4:	d108      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b6:	f107 030c 	add.w	r3, r7, #12
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fde6 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c4:	f000 bc6b 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072cc:	f000 bc67 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072d0:	4b72      	ldr	r3, [pc, #456]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80072d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072da:	4b70      	ldr	r3, [pc, #448]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d10c      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072ec:	4b6b      	ldr	r3, [pc, #428]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	08db      	lsrs	r3, r3, #3
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	4a6a      	ldr	r2, [pc, #424]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072fe:	e01f      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007300:	4b66      	ldr	r3, [pc, #408]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800730c:	d106      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007314:	d102      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007316:	4b63      	ldr	r3, [pc, #396]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800731a:	e011      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800731c:	4b5f      	ldr	r3, [pc, #380]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007328:	d106      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007330:	d102      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007332:	4b5d      	ldr	r3, [pc, #372]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007336:	e003      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007338:	2300      	movs	r3, #0
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800733c:	f000 bc2f 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007340:	f000 bc2d 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007344:	4b59      	ldr	r3, [pc, #356]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007348:	f000 bc29 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007350:	f000 bc25 	b.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007358:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800735c:	430b      	orrs	r3, r1
 800735e:	f040 80a7 	bne.w	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007362:	4b4e      	ldr	r3, [pc, #312]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800736a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007372:	d054      	beq.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800737a:	f200 808b 	bhi.w	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007384:	f000 8083 	beq.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800738e:	f200 8081 	bhi.w	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007398:	d02f      	beq.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073a0:	d878      	bhi.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ae:	d012      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80073b0:	e070      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073b2:	4b3a      	ldr	r3, [pc, #232]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073be:	d107      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 feb5 	bl	8008134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ce:	e3e6      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d4:	e3e3      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073d6:	4b31      	ldr	r3, [pc, #196]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e2:	d107      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e4:	f107 0318 	add.w	r3, r7, #24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fbfb 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073f2:	e3d4      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f8:	e3d1      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073fa:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007406:	d107      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007408:	f107 030c 	add.w	r3, r7, #12
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fd3d 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007416:	e3c2      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800741c:	e3bf      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800741e:	4b1f      	ldr	r3, [pc, #124]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007426:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b04      	cmp	r3, #4
 8007432:	d10c      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007446:	fa22 f303 	lsr.w	r3, r2, r3
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800744c:	e01e      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745a:	d106      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007462:	d102      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007468:	e010      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007476:	d106      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747e:	d102      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007480:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007484:	e002      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800748a:	e388      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800748c:	e387      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007492:	e384      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007498:	e381      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	017d7840 	.word	0x017d7840
 80074ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80074b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80074b8:	430b      	orrs	r3, r1
 80074ba:	f040 809c 	bne.w	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80074be:	4b9e      	ldr	r3, [pc, #632]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80074c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074ce:	d054      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074d6:	f200 808b 	bhi.w	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074e0:	f000 8083 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074ea:	f200 8081 	bhi.w	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074f4:	d02f      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074fc:	d878      	bhi.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800750a:	d012      	beq.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800750c:	e070      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800750e:	4b8a      	ldr	r3, [pc, #552]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800751a:	d107      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800751c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fe07 	bl	8008134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800752a:	e338      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007530:	e335      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007532:	4b81      	ldr	r3, [pc, #516]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800753a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800753e:	d107      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007540:	f107 0318 	add.w	r3, r7, #24
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fb4d 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800754e:	e326      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007554:	e323      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007556:	4b78      	ldr	r3, [pc, #480]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800755e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007562:	d107      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007564:	f107 030c 	add.w	r3, r7, #12
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fc8f 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007572:	e314      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007578:	e311      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800757a:	4b6f      	ldr	r3, [pc, #444]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007582:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007584:	4b6c      	ldr	r3, [pc, #432]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b04      	cmp	r3, #4
 800758e:	d10c      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007596:	4b68      	ldr	r3, [pc, #416]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	08db      	lsrs	r3, r3, #3
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	4a66      	ldr	r2, [pc, #408]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a8:	e01e      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075aa:	4b63      	ldr	r3, [pc, #396]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b6:	d106      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075be:	d102      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075c0:	4b5f      	ldr	r3, [pc, #380]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075c4:	e010      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075c6:	4b5c      	ldr	r3, [pc, #368]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d2:	d106      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075da:	d102      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80075dc:	4b59      	ldr	r3, [pc, #356]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075e0:	e002      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80075e6:	e2da      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80075e8:	e2d9      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80075ea:	4b57      	ldr	r3, [pc, #348]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ee:	e2d6      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f4:	e2d3      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80075f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80075fe:	430b      	orrs	r3, r1
 8007600:	f040 80a7 	bne.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007604:	4b4c      	ldr	r3, [pc, #304]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007608:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007614:	d055      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800761c:	f200 8096 	bhi.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007626:	f000 8084 	beq.w	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007630:	f200 808c 	bhi.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763a:	d030      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007642:	f200 8083 	bhi.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007652:	d012      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007654:	e07a      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007656:	4b38      	ldr	r3, [pc, #224]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007662:	d107      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fd63 	bl	8008134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007672:	e294      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007678:	e291      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800767a:	4b2f      	ldr	r3, [pc, #188]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007686:	d107      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007688:	f107 0318 	add.w	r3, r7, #24
 800768c:	4618      	mov	r0, r3
 800768e:	f000 faa9 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007696:	e282      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800769c:	e27f      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800769e:	4b26      	ldr	r3, [pc, #152]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076aa:	d107      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fbeb 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ba:	e270      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076c0:	e26d      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076c2:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d10c      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80076d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076de:	4b16      	ldr	r3, [pc, #88]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	08db      	lsrs	r3, r3, #3
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80076ea:	fa22 f303 	lsr.w	r3, r2, r3
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f0:	e01e      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fe:	d106      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007706:	d102      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007708:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800770c:	e010      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800771a:	d106      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007722:	d102      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007728:	e002      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800772e:	e236      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007730:	e235      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007736:	e232      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007738:	58024400 	.word	0x58024400
 800773c:	03d09000 	.word	0x03d09000
 8007740:	003d0900 	.word	0x003d0900
 8007744:	017d7840 	.word	0x017d7840
 8007748:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007750:	e225      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007756:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800775a:	430b      	orrs	r3, r1
 800775c:	f040 8085 	bne.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007760:	4b9c      	ldr	r3, [pc, #624]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007764:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007768:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007770:	d06b      	beq.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007778:	d874      	bhi.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007780:	d056      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007788:	d86c      	bhi.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007790:	d03b      	beq.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007798:	d864      	bhi.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a0:	d021      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a8:	d85c      	bhi.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b6:	d004      	beq.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80077b8:	e054      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80077ba:	f7fe fb5f 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 80077be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077c0:	e1ed      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077c2:	4b84      	ldr	r3, [pc, #528]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ce:	d107      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d0:	f107 0318 	add.w	r3, r7, #24
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fa05 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077de:	e1de      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077e4:	e1db      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077e6:	4b7b      	ldr	r3, [pc, #492]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f2:	d107      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077f4:	f107 030c 	add.w	r3, r7, #12
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fb47 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007802:	e1cc      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007808:	e1c9      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800780a:	4b72      	ldr	r3, [pc, #456]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b04      	cmp	r3, #4
 8007814:	d109      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007816:	4b6f      	ldr	r3, [pc, #444]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	08db      	lsrs	r3, r3, #3
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	4a6d      	ldr	r2, [pc, #436]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007822:	fa22 f303 	lsr.w	r3, r2, r3
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007828:	e1b9      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800782e:	e1b6      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007830:	4b68      	ldr	r3, [pc, #416]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800783e:	4b67      	ldr	r3, [pc, #412]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007842:	e1ac      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007848:	e1a9      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800784a:	4b62      	ldr	r3, [pc, #392]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007856:	d102      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007858:	4b61      	ldr	r3, [pc, #388]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785c:	e19f      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007862:	e19c      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007868:	e199      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800786a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007872:	430b      	orrs	r3, r1
 8007874:	d173      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007876:	4b57      	ldr	r3, [pc, #348]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800787e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007886:	d02f      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788e:	d863      	bhi.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d004      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789c:	d012      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800789e:	e05b      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078a0:	4b4c      	ldr	r3, [pc, #304]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ac:	d107      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ae:	f107 0318 	add.w	r3, r7, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f996 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078bc:	e16f      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c2:	e16c      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078c4:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d0:	d107      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d2:	f107 030c 	add.w	r3, r7, #12
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fad8 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e0:	e15d      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e6:	e15a      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078e8:	4b3a      	ldr	r3, [pc, #232]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078f2:	4b38      	ldr	r3, [pc, #224]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d10c      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007904:	4b33      	ldr	r3, [pc, #204]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	08db      	lsrs	r3, r3, #3
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	4a32      	ldr	r2, [pc, #200]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007916:	e01e      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007918:	4b2e      	ldr	r3, [pc, #184]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007924:	d106      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800792c:	d102      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800792e:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007932:	e010      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007934:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007940:	d106      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007948:	d102      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800794a:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794e:	e002      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007954:	e123      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007956:	e122      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800795c:	e11f      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800795e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007962:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007966:	430b      	orrs	r3, r1
 8007968:	d13c      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800796c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007972:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007980:	d012      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007982:	e023      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007984:	4b13      	ldr	r3, [pc, #76]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007990:	d107      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fbcc 	bl	8008134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a0:	e0fd      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079a6:	e0fa      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b4:	d107      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b6:	f107 0318 	add.w	r3, r7, #24
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f912 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c4:	e0eb      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ca:	e0e8      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d0:	e0e5      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
 80079d8:	03d09000 	.word	0x03d09000
 80079dc:	003d0900 	.word	0x003d0900
 80079e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80079e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80079ec:	430b      	orrs	r3, r1
 80079ee:	f040 8085 	bne.w	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80079f2:	4b6d      	ldr	r3, [pc, #436]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80079f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80079fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a02:	d06b      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a0a:	d874      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a12:	d056      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1a:	d86c      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a22:	d03b      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a2a:	d864      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a32:	d021      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a3a:	d85c      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a48:	d004      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007a4a:	e054      	b.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a4c:	f000 f8b4 	bl	8007bb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a52:	e0a4      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a54:	4b54      	ldr	r3, [pc, #336]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a60:	d107      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a62:	f107 0318 	add.w	r3, r7, #24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f8bc 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a70:	e095      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a76:	e092      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a78:	4b4b      	ldr	r3, [pc, #300]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a84:	d107      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f9fe 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a94:	e083      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a9a:	e080      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a9c:	4b42      	ldr	r3, [pc, #264]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d109      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aa8:	4b3f      	ldr	r3, [pc, #252]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	08db      	lsrs	r3, r3, #3
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	4a3e      	ldr	r2, [pc, #248]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aba:	e070      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac0:	e06d      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ac2:	4b39      	ldr	r3, [pc, #228]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ace:	d102      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007ad0:	4b37      	ldr	r3, [pc, #220]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad4:	e063      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ada:	e060      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007adc:	4b32      	ldr	r3, [pc, #200]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ae8:	d102      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8007aea:	4b32      	ldr	r3, [pc, #200]	; (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aee:	e056      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af4:	e053      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007afa:	e050      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b00:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007b04:	430b      	orrs	r3, r1
 8007b06:	d148      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007b08:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b18:	d02a      	beq.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b20:	d838      	bhi.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2e:	d00d      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007b30:	e030      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b32:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007b40:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b44:	e02b      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4a:	e028      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b4c:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b58:	d107      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fae8 	bl	8008134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b68:	e019      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b6e:	e016      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b70:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b7e:	f107 0318 	add.w	r3, r7, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f82e 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b8c:	e007      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b92:	e004      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b98:	e001      	b.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3740      	adds	r7, #64	; 0x40
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	03d09000 	.word	0x03d09000
 8007bb0:	003d0900 	.word	0x003d0900
 8007bb4:	017d7840 	.word	0x017d7840

08007bb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007bbc:	f7fe f92e 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	091b      	lsrs	r3, r3, #4
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bce:	5ccb      	ldrb	r3, [r1, r3]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	0800a2bc 	.word	0x0800a2bc

08007be4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bec:	4ba1      	ldr	r3, [pc, #644]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007bf6:	4b9f      	ldr	r3, [pc, #636]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	0b1b      	lsrs	r3, r3, #12
 8007bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c02:	4b9c      	ldr	r3, [pc, #624]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	091b      	lsrs	r3, r3, #4
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c0e:	4b99      	ldr	r3, [pc, #612]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	08db      	lsrs	r3, r3, #3
 8007c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8111 	beq.w	8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	f000 8083 	beq.w	8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	f200 80a1 	bhi.w	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d056      	beq.n	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c4e:	e099      	b.n	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c50:	4b88      	ldr	r3, [pc, #544]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d02d      	beq.n	8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c5c:	4b85      	ldr	r3, [pc, #532]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	08db      	lsrs	r3, r3, #3
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	4a84      	ldr	r2, [pc, #528]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c68:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	4b7b      	ldr	r3, [pc, #492]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cb6:	e087      	b.n	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cca:	4b6a      	ldr	r3, [pc, #424]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfa:	e065      	b.n	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	4b59      	ldr	r3, [pc, #356]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d3e:	e043      	b.n	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d52:	4b48      	ldr	r3, [pc, #288]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d82:	e021      	b.n	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d96:	4b37      	ldr	r3, [pc, #220]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007dc8:	4b2a      	ldr	r3, [pc, #168]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	0a5b      	lsrs	r3, r3, #9
 8007dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dee:	ee17 2a90 	vmov	r2, s15
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007df6:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e00:	ee07 3a90 	vmov	s15, r3
 8007e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e1c:	ee17 2a90 	vmov	r2, s15
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e24:	4b13      	ldr	r3, [pc, #76]	; (8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	0e1b      	lsrs	r3, r3, #24
 8007e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4a:	ee17 2a90 	vmov	r2, s15
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e52:	e008      	b.n	8007e66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	609a      	str	r2, [r3, #8]
}
 8007e66:	bf00      	nop
 8007e68:	3724      	adds	r7, #36	; 0x24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	58024400 	.word	0x58024400
 8007e78:	03d09000 	.word	0x03d09000
 8007e7c:	46000000 	.word	0x46000000
 8007e80:	4c742400 	.word	0x4c742400
 8007e84:	4a742400 	.word	0x4a742400
 8007e88:	4bbebc20 	.word	0x4bbebc20

08007e8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b089      	sub	sp, #36	; 0x24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e94:	4ba1      	ldr	r3, [pc, #644]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e9e:	4b9f      	ldr	r3, [pc, #636]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	0d1b      	lsrs	r3, r3, #20
 8007ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007eaa:	4b9c      	ldr	r3, [pc, #624]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007eb6:	4b99      	ldr	r3, [pc, #612]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	08db      	lsrs	r3, r3, #3
 8007ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8111 	beq.w	80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	f000 8083 	beq.w	8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	f200 80a1 	bhi.w	800802c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d056      	beq.n	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ef6:	e099      	b.n	800802c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ef8:	4b88      	ldr	r3, [pc, #544]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d02d      	beq.n	8007f60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f04:	4b85      	ldr	r3, [pc, #532]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	08db      	lsrs	r3, r3, #3
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	4a84      	ldr	r2, [pc, #528]	; (8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
 8007f14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2e:	4b7b      	ldr	r3, [pc, #492]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f5e:	e087      	b.n	8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f72:	4b6a      	ldr	r3, [pc, #424]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa2:	e065      	b.n	8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800812c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb6:	4b59      	ldr	r3, [pc, #356]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe6:	e043      	b.n	8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffa:	4b48      	ldr	r3, [pc, #288]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800a:	ed97 6a03 	vldr	s12, [r7, #12]
 800800e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802a:	e021      	b.n	8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800812c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800803a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803e:	4b37      	ldr	r3, [pc, #220]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008052:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800806e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008070:	4b2a      	ldr	r3, [pc, #168]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	0a5b      	lsrs	r3, r3, #9
 8008076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800808a:	edd7 6a07 	vldr	s13, [r7, #28]
 800808e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008096:	ee17 2a90 	vmov	r2, s15
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800809e:	4b1f      	ldr	r3, [pc, #124]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a8:	ee07 3a90 	vmov	s15, r3
 80080ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c4:	ee17 2a90 	vmov	r2, s15
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80080cc:	4b13      	ldr	r3, [pc, #76]	; (800811c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	0e1b      	lsrs	r3, r3, #24
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f2:	ee17 2a90 	vmov	r2, s15
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080fa:	e008      	b.n	800810e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	609a      	str	r2, [r3, #8]
}
 800810e:	bf00      	nop
 8008110:	3724      	adds	r7, #36	; 0x24
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	58024400 	.word	0x58024400
 8008120:	03d09000 	.word	0x03d09000
 8008124:	46000000 	.word	0x46000000
 8008128:	4c742400 	.word	0x4c742400
 800812c:	4a742400 	.word	0x4a742400
 8008130:	4bbebc20 	.word	0x4bbebc20

08008134 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800813c:	4ba0      	ldr	r3, [pc, #640]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	f003 0303 	and.w	r3, r3, #3
 8008144:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008146:	4b9e      	ldr	r3, [pc, #632]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	091b      	lsrs	r3, r3, #4
 800814c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008150:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008152:	4b9b      	ldr	r3, [pc, #620]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800815c:	4b98      	ldr	r3, [pc, #608]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	08db      	lsrs	r3, r3, #3
 8008162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	fb02 f303 	mul.w	r3, r2, r3
 800816c:	ee07 3a90 	vmov	s15, r3
 8008170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008174:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8111 	beq.w	80083a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b02      	cmp	r3, #2
 8008184:	f000 8083 	beq.w	800828e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b02      	cmp	r3, #2
 800818c:	f200 80a1 	bhi.w	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d056      	beq.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800819c:	e099      	b.n	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800819e:	4b88      	ldr	r3, [pc, #544]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d02d      	beq.n	8008206 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081aa:	4b85      	ldr	r3, [pc, #532]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	08db      	lsrs	r3, r3, #3
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	4a83      	ldr	r2, [pc, #524]	; (80083c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80081b6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	ee07 3a90 	vmov	s15, r3
 80081cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d4:	4b7a      	ldr	r3, [pc, #488]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80083c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008200:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008204:	e087      	b.n	8008316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008210:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80083cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008218:	4b69      	ldr	r3, [pc, #420]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008228:	ed97 6a03 	vldr	s12, [r7, #12]
 800822c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80083c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008248:	e065      	b.n	8008316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008254:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80083d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825c:	4b58      	ldr	r3, [pc, #352]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008270:	eddf 5a55 	vldr	s11, [pc, #340]	; 80083c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828c:	e043      	b.n	8008316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008298:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80083d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800829c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a0:	4b47      	ldr	r3, [pc, #284]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80083c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d0:	e021      	b.n	8008316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80083cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80082e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e4:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80083c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008314:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008316:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	0a5b      	lsrs	r3, r3, #9
 800831c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800832c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008330:	edd7 6a07 	vldr	s13, [r7, #28]
 8008334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833c:	ee17 2a90 	vmov	r2, s15
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008344:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008348:	0c1b      	lsrs	r3, r3, #16
 800834a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800835a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800835e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836a:	ee17 2a90 	vmov	r2, s15
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008372:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	0e1b      	lsrs	r3, r3, #24
 8008378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800838c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008398:	ee17 2a90 	vmov	r2, s15
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80083a0:	e008      	b.n	80083b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	609a      	str	r2, [r3, #8]
}
 80083b4:	bf00      	nop
 80083b6:	3724      	adds	r7, #36	; 0x24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	58024400 	.word	0x58024400
 80083c4:	03d09000 	.word	0x03d09000
 80083c8:	46000000 	.word	0x46000000
 80083cc:	4c742400 	.word	0x4c742400
 80083d0:	4a742400 	.word	0x4a742400
 80083d4:	4bbebc20 	.word	0x4bbebc20

080083d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083e6:	4b53      	ldr	r3, [pc, #332]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d101      	bne.n	80083f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e099      	b.n	800852a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083f6:	4b4f      	ldr	r3, [pc, #316]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a4e      	ldr	r2, [pc, #312]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008402:	f7f8 ff5f 	bl	80012c4 <HAL_GetTick>
 8008406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008408:	e008      	b.n	800841c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800840a:	f7f8 ff5b 	bl	80012c4 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e086      	b.n	800852a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800841c:	4b45      	ldr	r3, [pc, #276]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f0      	bne.n	800840a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008428:	4b42      	ldr	r3, [pc, #264]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	031b      	lsls	r3, r3, #12
 8008436:	493f      	ldr	r1, [pc, #252]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 8008438:	4313      	orrs	r3, r2
 800843a:	628b      	str	r3, [r1, #40]	; 0x28
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	3b01      	subs	r3, #1
 8008442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	3b01      	subs	r3, #1
 800844c:	025b      	lsls	r3, r3, #9
 800844e:	b29b      	uxth	r3, r3
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	3b01      	subs	r3, #1
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	3b01      	subs	r3, #1
 8008466:	061b      	lsls	r3, r3, #24
 8008468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800846c:	4931      	ldr	r1, [pc, #196]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 800846e:	4313      	orrs	r3, r2
 8008470:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008472:	4b30      	ldr	r3, [pc, #192]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	492d      	ldr	r1, [pc, #180]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 8008480:	4313      	orrs	r3, r2
 8008482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008484:	4b2b      	ldr	r3, [pc, #172]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	f023 0220 	bic.w	r2, r3, #32
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	4928      	ldr	r1, [pc, #160]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 8008492:	4313      	orrs	r3, r2
 8008494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008496:	4b27      	ldr	r3, [pc, #156]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	4a26      	ldr	r2, [pc, #152]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 800849c:	f023 0310 	bic.w	r3, r3, #16
 80084a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084a2:	4b24      	ldr	r3, [pc, #144]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a6:	4b24      	ldr	r3, [pc, #144]	; (8008538 <RCCEx_PLL2_Config+0x160>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	69d2      	ldr	r2, [r2, #28]
 80084ae:	00d2      	lsls	r2, r2, #3
 80084b0:	4920      	ldr	r1, [pc, #128]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084b6:	4b1f      	ldr	r3, [pc, #124]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	4a1e      	ldr	r2, [pc, #120]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084bc:	f043 0310 	orr.w	r3, r3, #16
 80084c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d106      	bne.n	80084d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084c8:	4b1a      	ldr	r3, [pc, #104]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084d4:	e00f      	b.n	80084f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d106      	bne.n	80084ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084dc:	4b15      	ldr	r3, [pc, #84]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	4a14      	ldr	r2, [pc, #80]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084e8:	e005      	b.n	80084f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	4a11      	ldr	r2, [pc, #68]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a0e      	ldr	r2, [pc, #56]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 80084fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008502:	f7f8 fedf 	bl	80012c4 <HAL_GetTick>
 8008506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008508:	e008      	b.n	800851c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800850a:	f7f8 fedb 	bl	80012c4 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e006      	b.n	800852a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <RCCEx_PLL2_Config+0x15c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f0      	beq.n	800850a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
 8008538:	ffff0007 	.word	0xffff0007

0800853c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800854a:	4b53      	ldr	r3, [pc, #332]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	2b03      	cmp	r3, #3
 8008554:	d101      	bne.n	800855a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e099      	b.n	800868e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800855a:	4b4f      	ldr	r3, [pc, #316]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a4e      	ldr	r2, [pc, #312]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008566:	f7f8 fead 	bl	80012c4 <HAL_GetTick>
 800856a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800856c:	e008      	b.n	8008580 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800856e:	f7f8 fea9 	bl	80012c4 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e086      	b.n	800868e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008580:	4b45      	ldr	r3, [pc, #276]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f0      	bne.n	800856e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800858c:	4b42      	ldr	r3, [pc, #264]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	051b      	lsls	r3, r3, #20
 800859a:	493f      	ldr	r1, [pc, #252]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800859c:	4313      	orrs	r3, r2
 800859e:	628b      	str	r3, [r1, #40]	; 0x28
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	025b      	lsls	r3, r3, #9
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	431a      	orrs	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	041b      	lsls	r3, r3, #16
 80085be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	061b      	lsls	r3, r3, #24
 80085cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085d0:	4931      	ldr	r1, [pc, #196]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085d6:	4b30      	ldr	r3, [pc, #192]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	492d      	ldr	r1, [pc, #180]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085e8:	4b2b      	ldr	r3, [pc, #172]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	4928      	ldr	r1, [pc, #160]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085fa:	4b27      	ldr	r3, [pc, #156]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008606:	4b24      	ldr	r3, [pc, #144]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <RCCEx_PLL3_Config+0x160>)
 800860c:	4013      	ands	r3, r2
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	69d2      	ldr	r2, [r2, #28]
 8008612:	00d2      	lsls	r2, r2, #3
 8008614:	4920      	ldr	r1, [pc, #128]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008616:	4313      	orrs	r3, r2
 8008618:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800861a:	4b1f      	ldr	r3, [pc, #124]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d106      	bne.n	800863a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	4a19      	ldr	r2, [pc, #100]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008632:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008638:	e00f      	b.n	800865a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d106      	bne.n	800864e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008640:	4b15      	ldr	r3, [pc, #84]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	4a14      	ldr	r2, [pc, #80]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008646:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800864a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800864c:	e005      	b.n	800865a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a11      	ldr	r2, [pc, #68]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008658:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800865a:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a0e      	ldr	r2, [pc, #56]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008666:	f7f8 fe2d 	bl	80012c4 <HAL_GetTick>
 800866a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800866c:	e008      	b.n	8008680 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800866e:	f7f8 fe29 	bl	80012c4 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e006      	b.n	800868e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <RCCEx_PLL3_Config+0x15c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0f0      	beq.n	800866e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	58024400 	.word	0x58024400
 800869c:	ffff0007 	.word	0xffff0007

080086a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e049      	b.n	8008746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7f8 fc0c 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f000 f9b4 	bl	8008a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b01      	cmp	r3, #1
 8008762:	d001      	beq.n	8008768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e05e      	b.n	8008826 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f042 0201 	orr.w	r2, r2, #1
 800877e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a2b      	ldr	r2, [pc, #172]	; (8008834 <HAL_TIM_Base_Start_IT+0xe4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d02c      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008792:	d027      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a27      	ldr	r2, [pc, #156]	; (8008838 <HAL_TIM_Base_Start_IT+0xe8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d022      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a26      	ldr	r2, [pc, #152]	; (800883c <HAL_TIM_Base_Start_IT+0xec>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d01d      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a24      	ldr	r2, [pc, #144]	; (8008840 <HAL_TIM_Base_Start_IT+0xf0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d018      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a23      	ldr	r2, [pc, #140]	; (8008844 <HAL_TIM_Base_Start_IT+0xf4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d013      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a21      	ldr	r2, [pc, #132]	; (8008848 <HAL_TIM_Base_Start_IT+0xf8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00e      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a20      	ldr	r2, [pc, #128]	; (800884c <HAL_TIM_Base_Start_IT+0xfc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d009      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <HAL_TIM_Base_Start_IT+0x100>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d004      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x94>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <HAL_TIM_Base_Start_IT+0x104>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d115      	bne.n	8008810 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	4b1b      	ldr	r3, [pc, #108]	; (8008858 <HAL_TIM_Base_Start_IT+0x108>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b06      	cmp	r3, #6
 80087f4:	d015      	beq.n	8008822 <HAL_TIM_Base_Start_IT+0xd2>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087fc:	d011      	beq.n	8008822 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0201 	orr.w	r2, r2, #1
 800880c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880e:	e008      	b.n	8008822 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e000      	b.n	8008824 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40010400 	.word	0x40010400
 8008848:	40001800 	.word	0x40001800
 800884c:	40014000 	.word	0x40014000
 8008850:	4000e000 	.word	0x4000e000
 8008854:	4000e400 	.word	0x4000e400
 8008858:	00010007 	.word	0x00010007

0800885c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_TIM_ConfigClockSource+0x1c>
 8008874:	2302      	movs	r3, #2
 8008876:	e0dc      	b.n	8008a32 <HAL_TIM_ConfigClockSource+0x1d6>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4b6a      	ldr	r3, [pc, #424]	; (8008a3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008894:	4013      	ands	r3, r2
 8008896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800889e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a64      	ldr	r2, [pc, #400]	; (8008a40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	f000 80a9 	beq.w	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80088b4:	4a62      	ldr	r2, [pc, #392]	; (8008a40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	f200 80ae 	bhi.w	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80088bc:	4a61      	ldr	r2, [pc, #388]	; (8008a44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	f000 80a1 	beq.w	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80088c4:	4a5f      	ldr	r2, [pc, #380]	; (8008a44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	f200 80a6 	bhi.w	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80088cc:	4a5e      	ldr	r2, [pc, #376]	; (8008a48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	f000 8099 	beq.w	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80088d4:	4a5c      	ldr	r2, [pc, #368]	; (8008a48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	f200 809e 	bhi.w	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80088dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088e0:	f000 8091 	beq.w	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80088e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088e8:	f200 8096 	bhi.w	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80088ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f0:	f000 8089 	beq.w	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80088f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f8:	f200 808e 	bhi.w	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80088fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008900:	d03e      	beq.n	8008980 <HAL_TIM_ConfigClockSource+0x124>
 8008902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008906:	f200 8087 	bhi.w	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890e:	f000 8086 	beq.w	8008a1e <HAL_TIM_ConfigClockSource+0x1c2>
 8008912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008916:	d87f      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008918:	2b70      	cmp	r3, #112	; 0x70
 800891a:	d01a      	beq.n	8008952 <HAL_TIM_ConfigClockSource+0xf6>
 800891c:	2b70      	cmp	r3, #112	; 0x70
 800891e:	d87b      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008920:	2b60      	cmp	r3, #96	; 0x60
 8008922:	d050      	beq.n	80089c6 <HAL_TIM_ConfigClockSource+0x16a>
 8008924:	2b60      	cmp	r3, #96	; 0x60
 8008926:	d877      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008928:	2b50      	cmp	r3, #80	; 0x50
 800892a:	d03c      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x14a>
 800892c:	2b50      	cmp	r3, #80	; 0x50
 800892e:	d873      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d058      	beq.n	80089e6 <HAL_TIM_ConfigClockSource+0x18a>
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	d86f      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008938:	2b30      	cmp	r3, #48	; 0x30
 800893a:	d064      	beq.n	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 800893c:	2b30      	cmp	r3, #48	; 0x30
 800893e:	d86b      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008940:	2b20      	cmp	r3, #32
 8008942:	d060      	beq.n	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008944:	2b20      	cmp	r3, #32
 8008946:	d867      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d05c      	beq.n	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 800894c:	2b10      	cmp	r3, #16
 800894e:	d05a      	beq.n	8008a06 <HAL_TIM_ConfigClockSource+0x1aa>
 8008950:	e062      	b.n	8008a18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008962:	f000 f9a3 	bl	8008cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	609a      	str	r2, [r3, #8]
      break;
 800897e:	e04f      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008990:	f000 f98c 	bl	8008cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089a2:	609a      	str	r2, [r3, #8]
      break;
 80089a4:	e03c      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b2:	461a      	mov	r2, r3
 80089b4:	f000 f8fc 	bl	8008bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2150      	movs	r1, #80	; 0x50
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f956 	bl	8008c70 <TIM_ITRx_SetConfig>
      break;
 80089c4:	e02c      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089d2:	461a      	mov	r2, r3
 80089d4:	f000 f91b 	bl	8008c0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2160      	movs	r1, #96	; 0x60
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f946 	bl	8008c70 <TIM_ITRx_SetConfig>
      break;
 80089e4:	e01c      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f2:	461a      	mov	r2, r3
 80089f4:	f000 f8dc 	bl	8008bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2140      	movs	r1, #64	; 0x40
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 f936 	bl	8008c70 <TIM_ITRx_SetConfig>
      break;
 8008a04:	e00c      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f000 f92d 	bl	8008c70 <TIM_ITRx_SetConfig>
      break;
 8008a16:	e003      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1c:	e000      	b.n	8008a20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	ffceff88 	.word	0xffceff88
 8008a40:	00100040 	.word	0x00100040
 8008a44:	00100030 	.word	0x00100030
 8008a48:	00100020 	.word	0x00100020

08008a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a4a      	ldr	r2, [pc, #296]	; (8008b88 <TIM_Base_SetConfig+0x13c>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <TIM_Base_SetConfig+0x40>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6a:	d00f      	beq.n	8008a8c <TIM_Base_SetConfig+0x40>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a47      	ldr	r2, [pc, #284]	; (8008b8c <TIM_Base_SetConfig+0x140>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00b      	beq.n	8008a8c <TIM_Base_SetConfig+0x40>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a46      	ldr	r2, [pc, #280]	; (8008b90 <TIM_Base_SetConfig+0x144>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d007      	beq.n	8008a8c <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a45      	ldr	r2, [pc, #276]	; (8008b94 <TIM_Base_SetConfig+0x148>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d003      	beq.n	8008a8c <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a44      	ldr	r2, [pc, #272]	; (8008b98 <TIM_Base_SetConfig+0x14c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d108      	bne.n	8008a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a39      	ldr	r2, [pc, #228]	; (8008b88 <TIM_Base_SetConfig+0x13c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d027      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aac:	d023      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a36      	ldr	r2, [pc, #216]	; (8008b8c <TIM_Base_SetConfig+0x140>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01f      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a35      	ldr	r2, [pc, #212]	; (8008b90 <TIM_Base_SetConfig+0x144>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d01b      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a34      	ldr	r2, [pc, #208]	; (8008b94 <TIM_Base_SetConfig+0x148>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d017      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a33      	ldr	r2, [pc, #204]	; (8008b98 <TIM_Base_SetConfig+0x14c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d013      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a32      	ldr	r2, [pc, #200]	; (8008b9c <TIM_Base_SetConfig+0x150>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00f      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a31      	ldr	r2, [pc, #196]	; (8008ba0 <TIM_Base_SetConfig+0x154>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d00b      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a30      	ldr	r2, [pc, #192]	; (8008ba4 <TIM_Base_SetConfig+0x158>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d007      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a2f      	ldr	r2, [pc, #188]	; (8008ba8 <TIM_Base_SetConfig+0x15c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d003      	beq.n	8008af6 <TIM_Base_SetConfig+0xaa>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a2e      	ldr	r2, [pc, #184]	; (8008bac <TIM_Base_SetConfig+0x160>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d108      	bne.n	8008b08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <TIM_Base_SetConfig+0x13c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00f      	beq.n	8008b54 <TIM_Base_SetConfig+0x108>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <TIM_Base_SetConfig+0x14c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d00b      	beq.n	8008b54 <TIM_Base_SetConfig+0x108>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a17      	ldr	r2, [pc, #92]	; (8008b9c <TIM_Base_SetConfig+0x150>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d007      	beq.n	8008b54 <TIM_Base_SetConfig+0x108>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <TIM_Base_SetConfig+0x154>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d003      	beq.n	8008b54 <TIM_Base_SetConfig+0x108>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <TIM_Base_SetConfig+0x158>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d103      	bne.n	8008b5c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d105      	bne.n	8008b7a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f023 0201 	bic.w	r2, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	611a      	str	r2, [r3, #16]
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40010000 	.word	0x40010000
 8008b8c:	40000400 	.word	0x40000400
 8008b90:	40000800 	.word	0x40000800
 8008b94:	40000c00 	.word	0x40000c00
 8008b98:	40010400 	.word	0x40010400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800
 8008ba8:	4000e000 	.word	0x4000e000
 8008bac:	4000e400 	.word	0x4000e400

08008bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f023 0201 	bic.w	r2, r3, #1
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	011b      	lsls	r3, r3, #4
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f023 030a 	bic.w	r3, r3, #10
 8008bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b087      	sub	sp, #28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	f023 0210 	bic.w	r2, r3, #16
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	031b      	lsls	r3, r3, #12
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <TIM_ITRx_SetConfig+0x38>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f043 0307 	orr.w	r3, r3, #7
 8008c92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	609a      	str	r2, [r3, #8]
}
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	ffcfff8f 	.word	0xffcfff8f

08008cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	021a      	lsls	r2, r3, #8
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	609a      	str	r2, [r3, #8]
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d101      	bne.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e077      	b.n	8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a35      	ldr	r2, [pc, #212]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a34      	ldr	r2, [pc, #208]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d108      	bne.n	8008d4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a25      	ldr	r2, [pc, #148]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d02c      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d76:	d027      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a22      	ldr	r2, [pc, #136]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d022      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a21      	ldr	r2, [pc, #132]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d01d      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d018      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d013      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00e      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a1a      	ldr	r2, [pc, #104]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d009      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d004      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a17      	ldr	r2, [pc, #92]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d10c      	bne.n	8008de2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	40010000 	.word	0x40010000
 8008e04:	40010400 	.word	0x40010400
 8008e08:	40000400 	.word	0x40000400
 8008e0c:	40000800 	.word	0x40000800
 8008e10:	40000c00 	.word	0x40000c00
 8008e14:	40001800 	.word	0x40001800
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	4000e000 	.word	0x4000e000
 8008e20:	4000e400 	.word	0x4000e400

08008e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e042      	b.n	8008ebc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7f8 f86b 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2224      	movs	r2, #36	; 0x24
 8008e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f022 0201 	bic.w	r2, r2, #1
 8008e64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fe94 	bl	8009b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f825 	bl	8008ec4 <UART_SetConfig>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e01b      	b.n	8008ebc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689a      	ldr	r2, [r3, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0201 	orr.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 ff13 	bl	8009ce0 <UART_CheckIdleState>
 8008eba:	4603      	mov	r3, r0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ec8:	b092      	sub	sp, #72	; 0x48
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4bbe      	ldr	r3, [pc, #760]	; (80091ec <UART_SetConfig+0x328>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4ab3      	ldr	r2, [pc, #716]	; (80091f0 <UART_SetConfig+0x32c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d004      	beq.n	8008f30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689a      	ldr	r2, [r3, #8]
 8008f36:	4baf      	ldr	r3, [pc, #700]	; (80091f4 <UART_SetConfig+0x330>)
 8008f38:	4013      	ands	r3, r2
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	6812      	ldr	r2, [r2, #0]
 8008f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f40:	430b      	orrs	r3, r1
 8008f42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	f023 010f 	bic.w	r1, r3, #15
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4aa6      	ldr	r2, [pc, #664]	; (80091f8 <UART_SetConfig+0x334>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d177      	bne.n	8009054 <UART_SetConfig+0x190>
 8008f64:	4ba5      	ldr	r3, [pc, #660]	; (80091fc <UART_SetConfig+0x338>)
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f6c:	2b28      	cmp	r3, #40	; 0x28
 8008f6e:	d86d      	bhi.n	800904c <UART_SetConfig+0x188>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <UART_SetConfig+0xb4>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	0800901d 	.word	0x0800901d
 8008f7c:	0800904d 	.word	0x0800904d
 8008f80:	0800904d 	.word	0x0800904d
 8008f84:	0800904d 	.word	0x0800904d
 8008f88:	0800904d 	.word	0x0800904d
 8008f8c:	0800904d 	.word	0x0800904d
 8008f90:	0800904d 	.word	0x0800904d
 8008f94:	0800904d 	.word	0x0800904d
 8008f98:	08009025 	.word	0x08009025
 8008f9c:	0800904d 	.word	0x0800904d
 8008fa0:	0800904d 	.word	0x0800904d
 8008fa4:	0800904d 	.word	0x0800904d
 8008fa8:	0800904d 	.word	0x0800904d
 8008fac:	0800904d 	.word	0x0800904d
 8008fb0:	0800904d 	.word	0x0800904d
 8008fb4:	0800904d 	.word	0x0800904d
 8008fb8:	0800902d 	.word	0x0800902d
 8008fbc:	0800904d 	.word	0x0800904d
 8008fc0:	0800904d 	.word	0x0800904d
 8008fc4:	0800904d 	.word	0x0800904d
 8008fc8:	0800904d 	.word	0x0800904d
 8008fcc:	0800904d 	.word	0x0800904d
 8008fd0:	0800904d 	.word	0x0800904d
 8008fd4:	0800904d 	.word	0x0800904d
 8008fd8:	08009035 	.word	0x08009035
 8008fdc:	0800904d 	.word	0x0800904d
 8008fe0:	0800904d 	.word	0x0800904d
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	0800904d 	.word	0x0800904d
 8008fec:	0800904d 	.word	0x0800904d
 8008ff0:	0800904d 	.word	0x0800904d
 8008ff4:	0800904d 	.word	0x0800904d
 8008ff8:	0800903d 	.word	0x0800903d
 8008ffc:	0800904d 	.word	0x0800904d
 8009000:	0800904d 	.word	0x0800904d
 8009004:	0800904d 	.word	0x0800904d
 8009008:	0800904d 	.word	0x0800904d
 800900c:	0800904d 	.word	0x0800904d
 8009010:	0800904d 	.word	0x0800904d
 8009014:	0800904d 	.word	0x0800904d
 8009018:	08009045 	.word	0x08009045
 800901c:	2301      	movs	r3, #1
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009022:	e326      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009024:	2304      	movs	r3, #4
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902a:	e322      	b.n	8009672 <UART_SetConfig+0x7ae>
 800902c:	2308      	movs	r3, #8
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009032:	e31e      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009034:	2310      	movs	r3, #16
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e31a      	b.n	8009672 <UART_SetConfig+0x7ae>
 800903c:	2320      	movs	r3, #32
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e316      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e312      	b.n	8009672 <UART_SetConfig+0x7ae>
 800904c:	2380      	movs	r3, #128	; 0x80
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e30e      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a69      	ldr	r2, [pc, #420]	; (8009200 <UART_SetConfig+0x33c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d130      	bne.n	80090c0 <UART_SetConfig+0x1fc>
 800905e:	4b67      	ldr	r3, [pc, #412]	; (80091fc <UART_SetConfig+0x338>)
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b05      	cmp	r3, #5
 8009068:	d826      	bhi.n	80090b8 <UART_SetConfig+0x1f4>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <UART_SetConfig+0x1ac>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009089 	.word	0x08009089
 8009074:	08009091 	.word	0x08009091
 8009078:	08009099 	.word	0x08009099
 800907c:	080090a1 	.word	0x080090a1
 8009080:	080090a9 	.word	0x080090a9
 8009084:	080090b1 	.word	0x080090b1
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908e:	e2f0      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009090:	2304      	movs	r3, #4
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e2ec      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009098:	2308      	movs	r3, #8
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e2e8      	b.n	8009672 <UART_SetConfig+0x7ae>
 80090a0:	2310      	movs	r3, #16
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e2e4      	b.n	8009672 <UART_SetConfig+0x7ae>
 80090a8:	2320      	movs	r3, #32
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e2e0      	b.n	8009672 <UART_SetConfig+0x7ae>
 80090b0:	2340      	movs	r3, #64	; 0x40
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e2dc      	b.n	8009672 <UART_SetConfig+0x7ae>
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e2d8      	b.n	8009672 <UART_SetConfig+0x7ae>
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a4f      	ldr	r2, [pc, #316]	; (8009204 <UART_SetConfig+0x340>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d130      	bne.n	800912c <UART_SetConfig+0x268>
 80090ca:	4b4c      	ldr	r3, [pc, #304]	; (80091fc <UART_SetConfig+0x338>)
 80090cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d826      	bhi.n	8009124 <UART_SetConfig+0x260>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x218>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	080090f5 	.word	0x080090f5
 80090e0:	080090fd 	.word	0x080090fd
 80090e4:	08009105 	.word	0x08009105
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	08009115 	.word	0x08009115
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	2300      	movs	r3, #0
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e2ba      	b.n	8009672 <UART_SetConfig+0x7ae>
 80090fc:	2304      	movs	r3, #4
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e2b6      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009104:	2308      	movs	r3, #8
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e2b2      	b.n	8009672 <UART_SetConfig+0x7ae>
 800910c:	2310      	movs	r3, #16
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e2ae      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009114:	2320      	movs	r3, #32
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e2aa      	b.n	8009672 <UART_SetConfig+0x7ae>
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e2a6      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009124:	2380      	movs	r3, #128	; 0x80
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e2a2      	b.n	8009672 <UART_SetConfig+0x7ae>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a35      	ldr	r2, [pc, #212]	; (8009208 <UART_SetConfig+0x344>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d130      	bne.n	8009198 <UART_SetConfig+0x2d4>
 8009136:	4b31      	ldr	r3, [pc, #196]	; (80091fc <UART_SetConfig+0x338>)
 8009138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b05      	cmp	r3, #5
 8009140:	d826      	bhi.n	8009190 <UART_SetConfig+0x2cc>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <UART_SetConfig+0x284>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009161 	.word	0x08009161
 800914c:	08009169 	.word	0x08009169
 8009150:	08009171 	.word	0x08009171
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e284      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009168:	2304      	movs	r3, #4
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e280      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009170:	2308      	movs	r3, #8
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e27c      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009178:	2310      	movs	r3, #16
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e278      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009180:	2320      	movs	r3, #32
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e274      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e270      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009190:	2380      	movs	r3, #128	; 0x80
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e26c      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a1b      	ldr	r2, [pc, #108]	; (800920c <UART_SetConfig+0x348>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d142      	bne.n	8009228 <UART_SetConfig+0x364>
 80091a2:	4b16      	ldr	r3, [pc, #88]	; (80091fc <UART_SetConfig+0x338>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b05      	cmp	r3, #5
 80091ac:	d838      	bhi.n	8009220 <UART_SetConfig+0x35c>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <UART_SetConfig+0x2f0>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091cd 	.word	0x080091cd
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	080091e5 	.word	0x080091e5
 80091c4:	08009211 	.word	0x08009211
 80091c8:	08009219 	.word	0x08009219
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e24e      	b.n	8009672 <UART_SetConfig+0x7ae>
 80091d4:	2304      	movs	r3, #4
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091da:	e24a      	b.n	8009672 <UART_SetConfig+0x7ae>
 80091dc:	2308      	movs	r3, #8
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e2:	e246      	b.n	8009672 <UART_SetConfig+0x7ae>
 80091e4:	2310      	movs	r3, #16
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ea:	e242      	b.n	8009672 <UART_SetConfig+0x7ae>
 80091ec:	cfff69f3 	.word	0xcfff69f3
 80091f0:	58000c00 	.word	0x58000c00
 80091f4:	11fff4ff 	.word	0x11fff4ff
 80091f8:	40011000 	.word	0x40011000
 80091fc:	58024400 	.word	0x58024400
 8009200:	40004400 	.word	0x40004400
 8009204:	40004800 	.word	0x40004800
 8009208:	40004c00 	.word	0x40004c00
 800920c:	40005000 	.word	0x40005000
 8009210:	2320      	movs	r3, #32
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009216:	e22c      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921e:	e228      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009220:	2380      	movs	r3, #128	; 0x80
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009226:	e224      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4ab1      	ldr	r2, [pc, #708]	; (80094f4 <UART_SetConfig+0x630>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d176      	bne.n	8009320 <UART_SetConfig+0x45c>
 8009232:	4bb1      	ldr	r3, [pc, #708]	; (80094f8 <UART_SetConfig+0x634>)
 8009234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800923a:	2b28      	cmp	r3, #40	; 0x28
 800923c:	d86c      	bhi.n	8009318 <UART_SetConfig+0x454>
 800923e:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <UART_SetConfig+0x380>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	080092e9 	.word	0x080092e9
 8009248:	08009319 	.word	0x08009319
 800924c:	08009319 	.word	0x08009319
 8009250:	08009319 	.word	0x08009319
 8009254:	08009319 	.word	0x08009319
 8009258:	08009319 	.word	0x08009319
 800925c:	08009319 	.word	0x08009319
 8009260:	08009319 	.word	0x08009319
 8009264:	080092f1 	.word	0x080092f1
 8009268:	08009319 	.word	0x08009319
 800926c:	08009319 	.word	0x08009319
 8009270:	08009319 	.word	0x08009319
 8009274:	08009319 	.word	0x08009319
 8009278:	08009319 	.word	0x08009319
 800927c:	08009319 	.word	0x08009319
 8009280:	08009319 	.word	0x08009319
 8009284:	080092f9 	.word	0x080092f9
 8009288:	08009319 	.word	0x08009319
 800928c:	08009319 	.word	0x08009319
 8009290:	08009319 	.word	0x08009319
 8009294:	08009319 	.word	0x08009319
 8009298:	08009319 	.word	0x08009319
 800929c:	08009319 	.word	0x08009319
 80092a0:	08009319 	.word	0x08009319
 80092a4:	08009301 	.word	0x08009301
 80092a8:	08009319 	.word	0x08009319
 80092ac:	08009319 	.word	0x08009319
 80092b0:	08009319 	.word	0x08009319
 80092b4:	08009319 	.word	0x08009319
 80092b8:	08009319 	.word	0x08009319
 80092bc:	08009319 	.word	0x08009319
 80092c0:	08009319 	.word	0x08009319
 80092c4:	08009309 	.word	0x08009309
 80092c8:	08009319 	.word	0x08009319
 80092cc:	08009319 	.word	0x08009319
 80092d0:	08009319 	.word	0x08009319
 80092d4:	08009319 	.word	0x08009319
 80092d8:	08009319 	.word	0x08009319
 80092dc:	08009319 	.word	0x08009319
 80092e0:	08009319 	.word	0x08009319
 80092e4:	08009311 	.word	0x08009311
 80092e8:	2301      	movs	r3, #1
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ee:	e1c0      	b.n	8009672 <UART_SetConfig+0x7ae>
 80092f0:	2304      	movs	r3, #4
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f6:	e1bc      	b.n	8009672 <UART_SetConfig+0x7ae>
 80092f8:	2308      	movs	r3, #8
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fe:	e1b8      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009300:	2310      	movs	r3, #16
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009306:	e1b4      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009308:	2320      	movs	r3, #32
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930e:	e1b0      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009310:	2340      	movs	r3, #64	; 0x40
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009316:	e1ac      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009318:	2380      	movs	r3, #128	; 0x80
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931e:	e1a8      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a75      	ldr	r2, [pc, #468]	; (80094fc <UART_SetConfig+0x638>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d130      	bne.n	800938c <UART_SetConfig+0x4c8>
 800932a:	4b73      	ldr	r3, [pc, #460]	; (80094f8 <UART_SetConfig+0x634>)
 800932c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	2b05      	cmp	r3, #5
 8009334:	d826      	bhi.n	8009384 <UART_SetConfig+0x4c0>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <UART_SetConfig+0x478>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009355 	.word	0x08009355
 8009340:	0800935d 	.word	0x0800935d
 8009344:	08009365 	.word	0x08009365
 8009348:	0800936d 	.word	0x0800936d
 800934c:	08009375 	.word	0x08009375
 8009350:	0800937d 	.word	0x0800937d
 8009354:	2300      	movs	r3, #0
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935a:	e18a      	b.n	8009672 <UART_SetConfig+0x7ae>
 800935c:	2304      	movs	r3, #4
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009362:	e186      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009364:	2308      	movs	r3, #8
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936a:	e182      	b.n	8009672 <UART_SetConfig+0x7ae>
 800936c:	2310      	movs	r3, #16
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e17e      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009374:	2320      	movs	r3, #32
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e17a      	b.n	8009672 <UART_SetConfig+0x7ae>
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e176      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e172      	b.n	8009672 <UART_SetConfig+0x7ae>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a5b      	ldr	r2, [pc, #364]	; (8009500 <UART_SetConfig+0x63c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d130      	bne.n	80093f8 <UART_SetConfig+0x534>
 8009396:	4b58      	ldr	r3, [pc, #352]	; (80094f8 <UART_SetConfig+0x634>)
 8009398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	2b05      	cmp	r3, #5
 80093a0:	d826      	bhi.n	80093f0 <UART_SetConfig+0x52c>
 80093a2:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <UART_SetConfig+0x4e4>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	080093c1 	.word	0x080093c1
 80093ac:	080093c9 	.word	0x080093c9
 80093b0:	080093d1 	.word	0x080093d1
 80093b4:	080093d9 	.word	0x080093d9
 80093b8:	080093e1 	.word	0x080093e1
 80093bc:	080093e9 	.word	0x080093e9
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c6:	e154      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093c8:	2304      	movs	r3, #4
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ce:	e150      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093d0:	2308      	movs	r3, #8
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e14c      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093d8:	2310      	movs	r3, #16
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e148      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093e0:	2320      	movs	r3, #32
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e144      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e140      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093f0:	2380      	movs	r3, #128	; 0x80
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e13c      	b.n	8009672 <UART_SetConfig+0x7ae>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a41      	ldr	r2, [pc, #260]	; (8009504 <UART_SetConfig+0x640>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	f040 8082 	bne.w	8009508 <UART_SetConfig+0x644>
 8009404:	4b3c      	ldr	r3, [pc, #240]	; (80094f8 <UART_SetConfig+0x634>)
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800940c:	2b28      	cmp	r3, #40	; 0x28
 800940e:	d86d      	bhi.n	80094ec <UART_SetConfig+0x628>
 8009410:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <UART_SetConfig+0x554>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	080094bd 	.word	0x080094bd
 800941c:	080094ed 	.word	0x080094ed
 8009420:	080094ed 	.word	0x080094ed
 8009424:	080094ed 	.word	0x080094ed
 8009428:	080094ed 	.word	0x080094ed
 800942c:	080094ed 	.word	0x080094ed
 8009430:	080094ed 	.word	0x080094ed
 8009434:	080094ed 	.word	0x080094ed
 8009438:	080094c5 	.word	0x080094c5
 800943c:	080094ed 	.word	0x080094ed
 8009440:	080094ed 	.word	0x080094ed
 8009444:	080094ed 	.word	0x080094ed
 8009448:	080094ed 	.word	0x080094ed
 800944c:	080094ed 	.word	0x080094ed
 8009450:	080094ed 	.word	0x080094ed
 8009454:	080094ed 	.word	0x080094ed
 8009458:	080094cd 	.word	0x080094cd
 800945c:	080094ed 	.word	0x080094ed
 8009460:	080094ed 	.word	0x080094ed
 8009464:	080094ed 	.word	0x080094ed
 8009468:	080094ed 	.word	0x080094ed
 800946c:	080094ed 	.word	0x080094ed
 8009470:	080094ed 	.word	0x080094ed
 8009474:	080094ed 	.word	0x080094ed
 8009478:	080094d5 	.word	0x080094d5
 800947c:	080094ed 	.word	0x080094ed
 8009480:	080094ed 	.word	0x080094ed
 8009484:	080094ed 	.word	0x080094ed
 8009488:	080094ed 	.word	0x080094ed
 800948c:	080094ed 	.word	0x080094ed
 8009490:	080094ed 	.word	0x080094ed
 8009494:	080094ed 	.word	0x080094ed
 8009498:	080094dd 	.word	0x080094dd
 800949c:	080094ed 	.word	0x080094ed
 80094a0:	080094ed 	.word	0x080094ed
 80094a4:	080094ed 	.word	0x080094ed
 80094a8:	080094ed 	.word	0x080094ed
 80094ac:	080094ed 	.word	0x080094ed
 80094b0:	080094ed 	.word	0x080094ed
 80094b4:	080094ed 	.word	0x080094ed
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	2301      	movs	r3, #1
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e0d6      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094c4:	2304      	movs	r3, #4
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ca:	e0d2      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094cc:	2308      	movs	r3, #8
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d2:	e0ce      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094d4:	2310      	movs	r3, #16
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e0ca      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094dc:	2320      	movs	r3, #32
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e0c6      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094e4:	2340      	movs	r3, #64	; 0x40
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e0c2      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094ec:	2380      	movs	r3, #128	; 0x80
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e0be      	b.n	8009672 <UART_SetConfig+0x7ae>
 80094f4:	40011400 	.word	0x40011400
 80094f8:	58024400 	.word	0x58024400
 80094fc:	40007800 	.word	0x40007800
 8009500:	40007c00 	.word	0x40007c00
 8009504:	40011800 	.word	0x40011800
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4aad      	ldr	r2, [pc, #692]	; (80097c4 <UART_SetConfig+0x900>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d176      	bne.n	8009600 <UART_SetConfig+0x73c>
 8009512:	4bad      	ldr	r3, [pc, #692]	; (80097c8 <UART_SetConfig+0x904>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800951a:	2b28      	cmp	r3, #40	; 0x28
 800951c:	d86c      	bhi.n	80095f8 <UART_SetConfig+0x734>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <UART_SetConfig+0x660>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	080095c9 	.word	0x080095c9
 8009528:	080095f9 	.word	0x080095f9
 800952c:	080095f9 	.word	0x080095f9
 8009530:	080095f9 	.word	0x080095f9
 8009534:	080095f9 	.word	0x080095f9
 8009538:	080095f9 	.word	0x080095f9
 800953c:	080095f9 	.word	0x080095f9
 8009540:	080095f9 	.word	0x080095f9
 8009544:	080095d1 	.word	0x080095d1
 8009548:	080095f9 	.word	0x080095f9
 800954c:	080095f9 	.word	0x080095f9
 8009550:	080095f9 	.word	0x080095f9
 8009554:	080095f9 	.word	0x080095f9
 8009558:	080095f9 	.word	0x080095f9
 800955c:	080095f9 	.word	0x080095f9
 8009560:	080095f9 	.word	0x080095f9
 8009564:	080095d9 	.word	0x080095d9
 8009568:	080095f9 	.word	0x080095f9
 800956c:	080095f9 	.word	0x080095f9
 8009570:	080095f9 	.word	0x080095f9
 8009574:	080095f9 	.word	0x080095f9
 8009578:	080095f9 	.word	0x080095f9
 800957c:	080095f9 	.word	0x080095f9
 8009580:	080095f9 	.word	0x080095f9
 8009584:	080095e1 	.word	0x080095e1
 8009588:	080095f9 	.word	0x080095f9
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080095f9 	.word	0x080095f9
 8009594:	080095f9 	.word	0x080095f9
 8009598:	080095f9 	.word	0x080095f9
 800959c:	080095f9 	.word	0x080095f9
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095f9 	.word	0x080095f9
 80095ac:	080095f9 	.word	0x080095f9
 80095b0:	080095f9 	.word	0x080095f9
 80095b4:	080095f9 	.word	0x080095f9
 80095b8:	080095f9 	.word	0x080095f9
 80095bc:	080095f9 	.word	0x080095f9
 80095c0:	080095f9 	.word	0x080095f9
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ce:	e050      	b.n	8009672 <UART_SetConfig+0x7ae>
 80095d0:	2304      	movs	r3, #4
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d6:	e04c      	b.n	8009672 <UART_SetConfig+0x7ae>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e048      	b.n	8009672 <UART_SetConfig+0x7ae>
 80095e0:	2310      	movs	r3, #16
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e044      	b.n	8009672 <UART_SetConfig+0x7ae>
 80095e8:	2320      	movs	r3, #32
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e040      	b.n	8009672 <UART_SetConfig+0x7ae>
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e03c      	b.n	8009672 <UART_SetConfig+0x7ae>
 80095f8:	2380      	movs	r3, #128	; 0x80
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e038      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a71      	ldr	r2, [pc, #452]	; (80097cc <UART_SetConfig+0x908>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d130      	bne.n	800966c <UART_SetConfig+0x7a8>
 800960a:	4b6f      	ldr	r3, [pc, #444]	; (80097c8 <UART_SetConfig+0x904>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	2b05      	cmp	r3, #5
 8009614:	d826      	bhi.n	8009664 <UART_SetConfig+0x7a0>
 8009616:	a201      	add	r2, pc, #4	; (adr r2, 800961c <UART_SetConfig+0x758>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009635 	.word	0x08009635
 8009620:	0800963d 	.word	0x0800963d
 8009624:	08009645 	.word	0x08009645
 8009628:	0800964d 	.word	0x0800964d
 800962c:	08009655 	.word	0x08009655
 8009630:	0800965d 	.word	0x0800965d
 8009634:	2302      	movs	r3, #2
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963a:	e01a      	b.n	8009672 <UART_SetConfig+0x7ae>
 800963c:	2304      	movs	r3, #4
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009642:	e016      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009644:	2308      	movs	r3, #8
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964a:	e012      	b.n	8009672 <UART_SetConfig+0x7ae>
 800964c:	2310      	movs	r3, #16
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e00e      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009654:	2320      	movs	r3, #32
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e00a      	b.n	8009672 <UART_SetConfig+0x7ae>
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e006      	b.n	8009672 <UART_SetConfig+0x7ae>
 8009664:	2380      	movs	r3, #128	; 0x80
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e002      	b.n	8009672 <UART_SetConfig+0x7ae>
 800966c:	2380      	movs	r3, #128	; 0x80
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a55      	ldr	r2, [pc, #340]	; (80097cc <UART_SetConfig+0x908>)
 8009678:	4293      	cmp	r3, r2
 800967a:	f040 80f8 	bne.w	800986e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800967e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009682:	2b20      	cmp	r3, #32
 8009684:	dc46      	bgt.n	8009714 <UART_SetConfig+0x850>
 8009686:	2b02      	cmp	r3, #2
 8009688:	db75      	blt.n	8009776 <UART_SetConfig+0x8b2>
 800968a:	3b02      	subs	r3, #2
 800968c:	2b1e      	cmp	r3, #30
 800968e:	d872      	bhi.n	8009776 <UART_SetConfig+0x8b2>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x7d4>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	0800971b 	.word	0x0800971b
 800969c:	08009777 	.word	0x08009777
 80096a0:	08009723 	.word	0x08009723
 80096a4:	08009777 	.word	0x08009777
 80096a8:	08009777 	.word	0x08009777
 80096ac:	08009777 	.word	0x08009777
 80096b0:	08009733 	.word	0x08009733
 80096b4:	08009777 	.word	0x08009777
 80096b8:	08009777 	.word	0x08009777
 80096bc:	08009777 	.word	0x08009777
 80096c0:	08009777 	.word	0x08009777
 80096c4:	08009777 	.word	0x08009777
 80096c8:	08009777 	.word	0x08009777
 80096cc:	08009777 	.word	0x08009777
 80096d0:	08009743 	.word	0x08009743
 80096d4:	08009777 	.word	0x08009777
 80096d8:	08009777 	.word	0x08009777
 80096dc:	08009777 	.word	0x08009777
 80096e0:	08009777 	.word	0x08009777
 80096e4:	08009777 	.word	0x08009777
 80096e8:	08009777 	.word	0x08009777
 80096ec:	08009777 	.word	0x08009777
 80096f0:	08009777 	.word	0x08009777
 80096f4:	08009777 	.word	0x08009777
 80096f8:	08009777 	.word	0x08009777
 80096fc:	08009777 	.word	0x08009777
 8009700:	08009777 	.word	0x08009777
 8009704:	08009777 	.word	0x08009777
 8009708:	08009777 	.word	0x08009777
 800970c:	08009777 	.word	0x08009777
 8009710:	08009769 	.word	0x08009769
 8009714:	2b40      	cmp	r3, #64	; 0x40
 8009716:	d02a      	beq.n	800976e <UART_SetConfig+0x8aa>
 8009718:	e02d      	b.n	8009776 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800971a:	f7fe fa4d 	bl	8007bb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800971e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009720:	e02f      	b.n	8009782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fa5c 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009730:	e027      	b.n	8009782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009732:	f107 0318 	add.w	r3, r7, #24
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe fba8 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009740:	e01f      	b.n	8009782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009742:	4b21      	ldr	r3, [pc, #132]	; (80097c8 <UART_SetConfig+0x904>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800974e:	4b1e      	ldr	r3, [pc, #120]	; (80097c8 <UART_SetConfig+0x904>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	08db      	lsrs	r3, r3, #3
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	4a1d      	ldr	r2, [pc, #116]	; (80097d0 <UART_SetConfig+0x90c>)
 800975a:	fa22 f303 	lsr.w	r3, r2, r3
 800975e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009760:	e00f      	b.n	8009782 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009762:	4b1b      	ldr	r3, [pc, #108]	; (80097d0 <UART_SetConfig+0x90c>)
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009766:	e00c      	b.n	8009782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009768:	4b1a      	ldr	r3, [pc, #104]	; (80097d4 <UART_SetConfig+0x910>)
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976c:	e009      	b.n	8009782 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800976e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009774:	e005      	b.n	8009782 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 81ee 	beq.w	8009b66 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	4a12      	ldr	r2, [pc, #72]	; (80097d8 <UART_SetConfig+0x914>)
 8009790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009794:	461a      	mov	r2, r3
 8009796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009798:	fbb3 f3f2 	udiv	r3, r3, r2
 800979c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	4413      	add	r3, r2
 80097a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d305      	bcc.n	80097ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d910      	bls.n	80097dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80097c0:	e1d1      	b.n	8009b66 <UART_SetConfig+0xca2>
 80097c2:	bf00      	nop
 80097c4:	40011c00 	.word	0x40011c00
 80097c8:	58024400 	.word	0x58024400
 80097cc:	58000c00 	.word	0x58000c00
 80097d0:	03d09000 	.word	0x03d09000
 80097d4:	003d0900 	.word	0x003d0900
 80097d8:	0800a2dc 	.word	0x0800a2dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097de:	2200      	movs	r2, #0
 80097e0:	60bb      	str	r3, [r7, #8]
 80097e2:	60fa      	str	r2, [r7, #12]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	4ac0      	ldr	r2, [pc, #768]	; (8009aec <UART_SetConfig+0xc28>)
 80097ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2200      	movs	r2, #0
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097fe:	f7f6 fd85 	bl	800030c <__aeabi_uldivmod>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	f04f 0300 	mov.w	r3, #0
 8009812:	020b      	lsls	r3, r1, #8
 8009814:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009818:	0202      	lsls	r2, r0, #8
 800981a:	6979      	ldr	r1, [r7, #20]
 800981c:	6849      	ldr	r1, [r1, #4]
 800981e:	0849      	lsrs	r1, r1, #1
 8009820:	2000      	movs	r0, #0
 8009822:	460c      	mov	r4, r1
 8009824:	4605      	mov	r5, r0
 8009826:	eb12 0804 	adds.w	r8, r2, r4
 800982a:	eb43 0905 	adc.w	r9, r3, r5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	469a      	mov	sl, r3
 8009836:	4693      	mov	fp, r2
 8009838:	4652      	mov	r2, sl
 800983a:	465b      	mov	r3, fp
 800983c:	4640      	mov	r0, r8
 800983e:	4649      	mov	r1, r9
 8009840:	f7f6 fd64 	bl	800030c <__aeabi_uldivmod>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4613      	mov	r3, r2
 800984a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009852:	d308      	bcc.n	8009866 <UART_SetConfig+0x9a2>
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800985a:	d204      	bcs.n	8009866 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009862:	60da      	str	r2, [r3, #12]
 8009864:	e17f      	b.n	8009b66 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800986c:	e17b      	b.n	8009b66 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009876:	f040 80bd 	bne.w	80099f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800987a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800987e:	2b20      	cmp	r3, #32
 8009880:	dc48      	bgt.n	8009914 <UART_SetConfig+0xa50>
 8009882:	2b00      	cmp	r3, #0
 8009884:	db7b      	blt.n	800997e <UART_SetConfig+0xaba>
 8009886:	2b20      	cmp	r3, #32
 8009888:	d879      	bhi.n	800997e <UART_SetConfig+0xaba>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <UART_SetConfig+0x9cc>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	0800991b 	.word	0x0800991b
 8009894:	08009923 	.word	0x08009923
 8009898:	0800997f 	.word	0x0800997f
 800989c:	0800997f 	.word	0x0800997f
 80098a0:	0800992b 	.word	0x0800992b
 80098a4:	0800997f 	.word	0x0800997f
 80098a8:	0800997f 	.word	0x0800997f
 80098ac:	0800997f 	.word	0x0800997f
 80098b0:	0800993b 	.word	0x0800993b
 80098b4:	0800997f 	.word	0x0800997f
 80098b8:	0800997f 	.word	0x0800997f
 80098bc:	0800997f 	.word	0x0800997f
 80098c0:	0800997f 	.word	0x0800997f
 80098c4:	0800997f 	.word	0x0800997f
 80098c8:	0800997f 	.word	0x0800997f
 80098cc:	0800997f 	.word	0x0800997f
 80098d0:	0800994b 	.word	0x0800994b
 80098d4:	0800997f 	.word	0x0800997f
 80098d8:	0800997f 	.word	0x0800997f
 80098dc:	0800997f 	.word	0x0800997f
 80098e0:	0800997f 	.word	0x0800997f
 80098e4:	0800997f 	.word	0x0800997f
 80098e8:	0800997f 	.word	0x0800997f
 80098ec:	0800997f 	.word	0x0800997f
 80098f0:	0800997f 	.word	0x0800997f
 80098f4:	0800997f 	.word	0x0800997f
 80098f8:	0800997f 	.word	0x0800997f
 80098fc:	0800997f 	.word	0x0800997f
 8009900:	0800997f 	.word	0x0800997f
 8009904:	0800997f 	.word	0x0800997f
 8009908:	0800997f 	.word	0x0800997f
 800990c:	0800997f 	.word	0x0800997f
 8009910:	08009971 	.word	0x08009971
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	d02e      	beq.n	8009976 <UART_SetConfig+0xab2>
 8009918:	e031      	b.n	800997e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800991a:	f7fc faaf 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 800991e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009920:	e033      	b.n	800998a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009922:	f7fc fac1 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 8009926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009928:	e02f      	b.n	800998a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800992a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe f958 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009938:	e027      	b.n	800998a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993a:	f107 0318 	add.w	r3, r7, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe faa4 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009948:	e01f      	b.n	800998a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994a:	4b69      	ldr	r3, [pc, #420]	; (8009af0 <UART_SetConfig+0xc2c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009956:	4b66      	ldr	r3, [pc, #408]	; (8009af0 <UART_SetConfig+0xc2c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	4a64      	ldr	r2, [pc, #400]	; (8009af4 <UART_SetConfig+0xc30>)
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009968:	e00f      	b.n	800998a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800996a:	4b62      	ldr	r3, [pc, #392]	; (8009af4 <UART_SetConfig+0xc30>)
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800996e:	e00c      	b.n	800998a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009970:	4b61      	ldr	r3, [pc, #388]	; (8009af8 <UART_SetConfig+0xc34>)
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009974:	e009      	b.n	800998a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800997c:	e005      	b.n	800998a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80ea 	beq.w	8009b66 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	4a55      	ldr	r2, [pc, #340]	; (8009aec <UART_SetConfig+0xc28>)
 8009998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999c:	461a      	mov	r2, r3
 800999e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a4:	005a      	lsls	r2, r3, #1
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	085b      	lsrs	r3, r3, #1
 80099ac:	441a      	add	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	2b0f      	cmp	r3, #15
 80099bc:	d916      	bls.n	80099ec <UART_SetConfig+0xb28>
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c4:	d212      	bcs.n	80099ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	f023 030f 	bic.w	r3, r3, #15
 80099ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	b29a      	uxth	r2, r3
 80099dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099de:	4313      	orrs	r3, r2
 80099e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80099e8:	60da      	str	r2, [r3, #12]
 80099ea:	e0bc      	b.n	8009b66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80099f2:	e0b8      	b.n	8009b66 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	dc4b      	bgt.n	8009a94 <UART_SetConfig+0xbd0>
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f2c0 8087 	blt.w	8009b10 <UART_SetConfig+0xc4c>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	f200 8084 	bhi.w	8009b10 <UART_SetConfig+0xc4c>
 8009a08:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <UART_SetConfig+0xb4c>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a9b 	.word	0x08009a9b
 8009a14:	08009aa3 	.word	0x08009aa3
 8009a18:	08009b11 	.word	0x08009b11
 8009a1c:	08009b11 	.word	0x08009b11
 8009a20:	08009aab 	.word	0x08009aab
 8009a24:	08009b11 	.word	0x08009b11
 8009a28:	08009b11 	.word	0x08009b11
 8009a2c:	08009b11 	.word	0x08009b11
 8009a30:	08009abb 	.word	0x08009abb
 8009a34:	08009b11 	.word	0x08009b11
 8009a38:	08009b11 	.word	0x08009b11
 8009a3c:	08009b11 	.word	0x08009b11
 8009a40:	08009b11 	.word	0x08009b11
 8009a44:	08009b11 	.word	0x08009b11
 8009a48:	08009b11 	.word	0x08009b11
 8009a4c:	08009b11 	.word	0x08009b11
 8009a50:	08009acb 	.word	0x08009acb
 8009a54:	08009b11 	.word	0x08009b11
 8009a58:	08009b11 	.word	0x08009b11
 8009a5c:	08009b11 	.word	0x08009b11
 8009a60:	08009b11 	.word	0x08009b11
 8009a64:	08009b11 	.word	0x08009b11
 8009a68:	08009b11 	.word	0x08009b11
 8009a6c:	08009b11 	.word	0x08009b11
 8009a70:	08009b11 	.word	0x08009b11
 8009a74:	08009b11 	.word	0x08009b11
 8009a78:	08009b11 	.word	0x08009b11
 8009a7c:	08009b11 	.word	0x08009b11
 8009a80:	08009b11 	.word	0x08009b11
 8009a84:	08009b11 	.word	0x08009b11
 8009a88:	08009b11 	.word	0x08009b11
 8009a8c:	08009b11 	.word	0x08009b11
 8009a90:	08009b03 	.word	0x08009b03
 8009a94:	2b40      	cmp	r3, #64	; 0x40
 8009a96:	d037      	beq.n	8009b08 <UART_SetConfig+0xc44>
 8009a98:	e03a      	b.n	8009b10 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a9a:	f7fc f9ef 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8009a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009aa0:	e03c      	b.n	8009b1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aa2:	f7fc fa01 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 8009aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009aa8:	e038      	b.n	8009b1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe f898 	bl	8007be4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab8:	e030      	b.n	8009b1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aba:	f107 0318 	add.w	r3, r7, #24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe f9e4 	bl	8007e8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ac8:	e028      	b.n	8009b1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <UART_SetConfig+0xc2c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d012      	beq.n	8009afc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ad6:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <UART_SetConfig+0xc2c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	08db      	lsrs	r3, r3, #3
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	4a04      	ldr	r2, [pc, #16]	; (8009af4 <UART_SetConfig+0xc30>)
 8009ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ae8:	e018      	b.n	8009b1c <UART_SetConfig+0xc58>
 8009aea:	bf00      	nop
 8009aec:	0800a2dc 	.word	0x0800a2dc
 8009af0:	58024400 	.word	0x58024400
 8009af4:	03d09000 	.word	0x03d09000
 8009af8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009afc:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <UART_SetConfig+0xccc>)
 8009afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b00:	e00c      	b.n	8009b1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b02:	4b24      	ldr	r3, [pc, #144]	; (8009b94 <UART_SetConfig+0xcd0>)
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b06:	e009      	b.n	8009b1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b0e:	e005      	b.n	8009b1c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b1a:	bf00      	nop
    }

    if (pclk != 0U)
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d021      	beq.n	8009b66 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	4a1c      	ldr	r2, [pc, #112]	; (8009b98 <UART_SetConfig+0xcd4>)
 8009b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b30:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	441a      	add	r2, r3
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b44:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2b0f      	cmp	r3, #15
 8009b4a:	d909      	bls.n	8009b60 <UART_SetConfig+0xc9c>
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b52:	d205      	bcs.n	8009b60 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	e002      	b.n	8009b66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009b82:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3748      	adds	r7, #72	; 0x48
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b90:	03d09000 	.word	0x03d09000
 8009b94:	003d0900 	.word	0x003d0900
 8009b98:	0800a2dc 	.word	0x0800a2dc

08009b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0e:	f003 0304 	and.w	r3, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01a      	beq.n	8009cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c9a:	d10a      	bne.n	8009cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	605a      	str	r2, [r3, #4]
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b098      	sub	sp, #96	; 0x60
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cf0:	f7f7 fae8 	bl	80012c4 <HAL_GetTick>
 8009cf4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d12f      	bne.n	8009d64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f88e 	bl	8009e34 <UART_WaitOnFlagUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d022      	beq.n	8009d64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d32:	653b      	str	r3, [r7, #80]	; 0x50
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e6      	bne.n	8009d1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e063      	b.n	8009e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d149      	bne.n	8009e06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f857 	bl	8009e34 <UART_WaitOnFlagUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d03c      	beq.n	8009e06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	e853 3f00 	ldrex	r3, [r3]
 8009d98:	623b      	str	r3, [r7, #32]
   return(result);
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
 8009dac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e6      	bne.n	8009d8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	e853 3f00 	ldrex	r3, [r3]
 8009dcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f023 0301 	bic.w	r3, r3, #1
 8009dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3308      	adds	r3, #8
 8009ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dde:	61fa      	str	r2, [r7, #28]
 8009de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de2:	69b9      	ldr	r1, [r7, #24]
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	617b      	str	r3, [r7, #20]
   return(result);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e5      	bne.n	8009dbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e012      	b.n	8009e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3758      	adds	r7, #88	; 0x58
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	4613      	mov	r3, r2
 8009e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e44:	e04f      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d04b      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4e:	f7f7 fa39 	bl	80012c4 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d302      	bcc.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e04e      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d037      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b80      	cmp	r3, #128	; 0x80
 8009e7a:	d034      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	d031      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d110      	bne.n	8009eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2208      	movs	r2, #8
 8009e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 f839 	bl	8009f10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e029      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ec0:	d111      	bne.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f81f 	bl	8009f10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e00f      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69da      	ldr	r2, [r3, #28]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	4013      	ands	r3, r2
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	bf0c      	ite	eq
 8009ef6:	2301      	moveq	r3, #1
 8009ef8:	2300      	movne	r3, #0
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	79fb      	ldrb	r3, [r7, #7]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d0a0      	beq.n	8009e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b095      	sub	sp, #84	; 0x54
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f36:	643b      	str	r3, [r7, #64]	; 0x40
 8009f38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e6      	bne.n	8009f18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	4b1e      	ldr	r3, [pc, #120]	; (8009fd8 <UART_EndRxTransfer+0xc8>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1e5      	bne.n	8009f4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d118      	bne.n	8009fb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f023 0310 	bic.w	r3, r3, #16
 8009f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6979      	ldr	r1, [r7, #20]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009fcc:	bf00      	nop
 8009fce:	3754      	adds	r7, #84	; 0x54
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	effffffe 	.word	0xeffffffe

08009fdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d101      	bne.n	8009ff2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e027      	b.n	800a042 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2224      	movs	r2, #36	; 0x24
 8009ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a020:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a062:	2302      	movs	r3, #2
 800a064:	e02d      	b.n	800a0c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2224      	movs	r2, #36	; 0x24
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0201 	bic.w	r2, r2, #1
 800a08c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f850 	bl	800a148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0de:	2302      	movs	r3, #2
 800a0e0:	e02d      	b.n	800a13e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2224      	movs	r2, #36	; 0x24
 800a0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0201 	bic.w	r2, r2, #1
 800a108:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f812 	bl	800a148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a154:	2b00      	cmp	r3, #0
 800a156:	d108      	bne.n	800a16a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a168:	e031      	b.n	800a1ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a16a:	2310      	movs	r3, #16
 800a16c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a16e:	2310      	movs	r3, #16
 800a170:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	0e5b      	lsrs	r3, r3, #25
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	0f5b      	lsrs	r3, r3, #29
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	7b3a      	ldrb	r2, [r7, #12]
 800a196:	4911      	ldr	r1, [pc, #68]	; (800a1dc <UARTEx_SetNbDataToProcess+0x94>)
 800a198:	5c8a      	ldrb	r2, [r1, r2]
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a19e:	7b3a      	ldrb	r2, [r7, #12]
 800a1a0:	490f      	ldr	r1, [pc, #60]	; (800a1e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a1a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	7b7a      	ldrb	r2, [r7, #13]
 800a1b4:	4909      	ldr	r1, [pc, #36]	; (800a1dc <UARTEx_SetNbDataToProcess+0x94>)
 800a1b6:	5c8a      	ldrb	r2, [r1, r2]
 800a1b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1bc:	7b7a      	ldrb	r2, [r7, #13]
 800a1be:	4908      	ldr	r1, [pc, #32]	; (800a1e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a1c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	0800a2f4 	.word	0x0800a2f4
 800a1e0:	0800a2fc 	.word	0x0800a2fc

0800a1e4 <memset>:
 800a1e4:	4402      	add	r2, r0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d100      	bne.n	800a1ee <memset+0xa>
 800a1ec:	4770      	bx	lr
 800a1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f2:	e7f9      	b.n	800a1e8 <memset+0x4>

0800a1f4 <__libc_init_array>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4d0d      	ldr	r5, [pc, #52]	; (800a22c <__libc_init_array+0x38>)
 800a1f8:	4c0d      	ldr	r4, [pc, #52]	; (800a230 <__libc_init_array+0x3c>)
 800a1fa:	1b64      	subs	r4, r4, r5
 800a1fc:	10a4      	asrs	r4, r4, #2
 800a1fe:	2600      	movs	r6, #0
 800a200:	42a6      	cmp	r6, r4
 800a202:	d109      	bne.n	800a218 <__libc_init_array+0x24>
 800a204:	4d0b      	ldr	r5, [pc, #44]	; (800a234 <__libc_init_array+0x40>)
 800a206:	4c0c      	ldr	r4, [pc, #48]	; (800a238 <__libc_init_array+0x44>)
 800a208:	f000 f826 	bl	800a258 <_init>
 800a20c:	1b64      	subs	r4, r4, r5
 800a20e:	10a4      	asrs	r4, r4, #2
 800a210:	2600      	movs	r6, #0
 800a212:	42a6      	cmp	r6, r4
 800a214:	d105      	bne.n	800a222 <__libc_init_array+0x2e>
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	f855 3b04 	ldr.w	r3, [r5], #4
 800a21c:	4798      	blx	r3
 800a21e:	3601      	adds	r6, #1
 800a220:	e7ee      	b.n	800a200 <__libc_init_array+0xc>
 800a222:	f855 3b04 	ldr.w	r3, [r5], #4
 800a226:	4798      	blx	r3
 800a228:	3601      	adds	r6, #1
 800a22a:	e7f2      	b.n	800a212 <__libc_init_array+0x1e>
 800a22c:	0800a30c 	.word	0x0800a30c
 800a230:	0800a30c 	.word	0x0800a30c
 800a234:	0800a30c 	.word	0x0800a30c
 800a238:	0800a310 	.word	0x0800a310

0800a23c <memcpy>:
 800a23c:	440a      	add	r2, r1
 800a23e:	4291      	cmp	r1, r2
 800a240:	f100 33ff 	add.w	r3, r0, #4294967295
 800a244:	d100      	bne.n	800a248 <memcpy+0xc>
 800a246:	4770      	bx	lr
 800a248:	b510      	push	{r4, lr}
 800a24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a252:	4291      	cmp	r1, r2
 800a254:	d1f9      	bne.n	800a24a <memcpy+0xe>
 800a256:	bd10      	pop	{r4, pc}

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
